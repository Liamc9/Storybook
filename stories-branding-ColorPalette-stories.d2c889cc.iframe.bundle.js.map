{"version":3,"file":"stories-branding-ColorPalette-stories.d2c889cc.iframe.bundle.js","mappings":";;;;AAUA;;;AAKA;;;AAKA;AACA;;;;AAMA;;;;;;AAQA;AACA;AACA;;;;;;;AASA;;;;AAMA;AACA;;;AAKA;AACA;;ACrDA;AAGA","sources":["webpack://storybook/./src/components/Branding/ColorPalette.jsx","webpack://storybook/./src/stories/branding/ColorPalette.stories.js"],"sourcesContent":["// src/components/ColorPalette/ColorPalette.js\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst PaletteContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 2rem;\r\n`;\r\n\r\nconst PaletteSection = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst SectionTitle = styled.h3`\r\n  margin-bottom: 1rem;\r\n  font-size: 1.2rem;\r\n  color: ${(props) => props.neutralDark};\r\n`;\r\n\r\nconst ColorsWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n`;\r\n\r\nconst ColorSwatch = styled.div`\r\n  width: 150px;\r\n  height: 150px;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  position: relative;\r\n  background-color: ${(props) => props.color};\r\n  border: 1px solid ${(props) => props.neutralMedium};\r\n`;\r\n\r\nconst ColorInfo = styled.div`\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n  text-align: center;\r\n`;\r\n\r\nconst ColorName = styled.span`\r\n  display: block;\r\n  font-weight: bold;\r\n  margin-bottom: 0.25rem;\r\n  color: ${(props) => props.neutralDark};\r\n`;\r\n\r\nconst ColorHex = styled.span`\r\n  display: block;\r\n  font-size: 0.9rem;\r\n  color: ${(props) => props.neutralDark};\r\n`;\r\n\r\nconst ColorPalette = ({ palette }) => {\r\n  const {\r\n    primary,\r\n    lightPrimary,\r\n    veryLightPrimary,\r\n    darkPrimary,\r\n    veryDarkPrimary,\r\n    neutrals,\r\n  } = palette;\r\n\r\n  const renderColorSwatch = (color) => (\r\n    <ColorSwatch color={color.hex} neutralMedium={neutrals.mediumGray} key={color.name}>\r\n      <ColorInfo>\r\n        <ColorName>{color.name}</ColorName>\r\n        <ColorHex>{color.hex}</ColorHex>\r\n      </ColorInfo>\r\n    </ColorSwatch>\r\n  );\r\n\r\n  return (\r\n    <PaletteContainer>\r\n      {/* Primary Color and Shades */}\r\n      <PaletteSection>\r\n        <SectionTitle neutralDark={neutrals.darkGray}>Primary Color and Shades</SectionTitle>\r\n        <ColorsWrapper>\r\n          {renderColorSwatch({\r\n            name: 'Primary - Warm Taupe',\r\n            hex: primary,\r\n          })}\r\n          {renderColorSwatch({\r\n            name: 'Light Warm Taupe',\r\n            hex: lightPrimary,\r\n          })}\r\n          {renderColorSwatch({\r\n            name: 'Very Light Warm Taupe',\r\n            hex: veryLightPrimary,\r\n          })}\r\n          {renderColorSwatch({\r\n            name: 'Dark Warm Taupe',\r\n            hex: darkPrimary,\r\n          })}\r\n          {renderColorSwatch({\r\n            name: 'Very Dark Warm Taupe',\r\n            hex: veryDarkPrimary,\r\n          })}\r\n        </ColorsWrapper>\r\n      </PaletteSection>\r\n\r\n      {/* Neutral Colors */}\r\n      <PaletteSection>\r\n        <SectionTitle neutralDark={neutrals.darkGray}>Neutral Colors</SectionTitle>\r\n        <ColorsWrapper>\r\n          {Object.entries(neutrals).map(([key, hex]) =>\r\n            renderColorSwatch({\r\n              name: key,\r\n              hex,\r\n            })\r\n          )}\r\n        </ColorsWrapper>\r\n      </PaletteSection>\r\n    </PaletteContainer>\r\n  );\r\n};\r\n\r\nColorPalette.propTypes = {\r\n  palette: PropTypes.shape({\r\n    primary: PropTypes.string.isRequired,\r\n    lightPrimary: PropTypes.string.isRequired,\r\n    veryLightPrimary: PropTypes.string.isRequired,\r\n    darkPrimary: PropTypes.string.isRequired,\r\n    veryDarkPrimary: PropTypes.string.isRequired,\r\n    neutrals: PropTypes.shape({\r\n      white: PropTypes.string.isRequired,\r\n      lightGray: PropTypes.string.isRequired,\r\n      mediumGray: PropTypes.string.isRequired,\r\n      darkGray: PropTypes.string.isRequired,\r\n      black: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ColorPalette;\r\n","import React from 'react';\r\nimport ColorPalette from '../../components/Branding/ColorPalette';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  padding: 2rem;\r\n  background-color: ${(props) => props.palette.neutrals.white};\r\n`;\r\n\r\nexport default {\r\n  title: 'Branding/Color Palette',\r\n  component: ColorPalette,\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\n# Color Palette\r\n\r\n**ColorPalette** component displays the primary color and its shades, along with neutral colors used in our brand.\r\n\r\n## Usage\r\n\r\nUse this component to ensure consistency in your application's color scheme.\r\n\r\n### Example\r\n\r\n\\`\\`\\`jsx\r\n<ColorPalette palette={palette} />\r\n\\`\\`\\`\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    palette: {\r\n      control: 'object',\r\n      description:\r\n        'Defines the color palette including primary color, its shades, and neutral colors.',\r\n    },\r\n  },\r\n};\r\n\r\nconst Template = (args) => (\r\n  <Container palette={args.palette}>\r\n    <ColorPalette palette={args.palette} />\r\n  </Container>\r\n);\r\n\r\nexport const DefaultPalette = Template.bind({});\r\nDefaultPalette.args = {\r\n  palette: {\r\n    primary: '#B08B5B', // Warm Taupe\r\n    lightPrimary: '#C19B6D', // Light Warm Taupe\r\n    veryLightPrimary: '#D2AD80', // Very Light Warm Taupe\r\n    darkPrimary: '#9A7D4E', // Dark Warm Taupe\r\n    veryDarkPrimary: '#846E41', // Very Dark Warm Taupe\r\n    neutrals: {\r\n      white: '#FFFFFF', // White\r\n      lightGray: '#F0F0F0', // Light Gray\r\n      mediumGray: '#C0C0C0', // Medium Gray\r\n      darkGray: '#4F4F4F', // Dark Gray\r\n      black: '#000000', // Black\r\n    },\r\n  },\r\n};\r\n"],"names":[],"sourceRoot":""}