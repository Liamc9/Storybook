{"version":3,"file":"stories-molecules-search-SearchDrawer-stories.5949a70a.iframe.bundle.js","mappings":";;;;;;;;;AAkBA;;;;;;;;;;;AAcA;;;;;;;;;;;AAWA;;;;ACjCA;;;;;;;;AAUA;;AAqDA","sources":["webpack://storybook/./src/components/molecules/search/SearchBar2.jsx","webpack://storybook/./src/components/molecules/search/SearchDrawer.jsx"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { SearchIcon2 } from \"../../Branding/icons/Icons\"; // Assuming you have an icon component\r\n\r\n// Container for the input and icon\r\nconst SearchBarContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  background-color: #f5f5f5;\r\n  border: 1px solid #dcdcdc;\r\n  border-radius: 25px;\r\n  padding: 8px 16px;\r\n  transition: border-color 0.3s, box-shadow 0.3s;\r\n`;\r\n\r\n// Style for the input field\r\nconst StyledInput = styled.input`\r\n  flex: 1;\r\n  border: none;\r\n  background: transparent;\r\n  font-size: 16px;\r\n  color: #333;\r\n  outline: none;\r\n\r\n  &::placeholder {\r\n    color: #aaa;\r\n  }\r\n`;\r\n\r\n// Style for the icon\r\nconst StyledIcon = styled.div`\r\n  margin-right: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #333;\r\n\r\n  svg {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n`;\r\n\r\nconst SearchBar2 = ({ value, onChange, placeholder, onKeyDown, inputRef }) => {\r\n  return (\r\n    <SearchBarContainer>\r\n      <StyledIcon>\r\n        <SearchIcon2 /> {/* Replace with your actual icon component */}\r\n      </StyledIcon>\r\n\r\n      <StyledInput\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        onKeyDown={onKeyDown} // Pass the onKeyDown handler\r\n        ref={inputRef} // Assign the ref to the input element\r\n      />\r\n    </SearchBarContainer>\r\n  );\r\n};\r\n\r\nSearchBar2.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  placeholder: PropTypes.string,\r\n  onKeyDown: PropTypes.func, // Ensure onKeyDown is optional\r\n  inputRef: PropTypes.object, // Prop type for the ref\r\n};\r\n\r\nSearchBar2.defaultProps = {\r\n  placeholder: \"Search...\",\r\n  onKeyDown: null,\r\n  inputRef: null,\r\n};\r\n\r\nexport default SearchBar2;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport SearchBar2 from \"./SearchBar2\";\r\n\r\n// Styled components...\r\nconst SearchBarContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n`;\r\n\r\nconst CancelButton = styled.button`\r\n  background: none;\r\n  border: none;\r\n  color: black;\r\n  font-size: 16px;\r\n  margin-left: 8px;\r\n  cursor: pointer;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 16px;\r\n`;\r\n\r\nconst SearchDrawer = ({\r\n  trendingItems,\r\n  query,\r\n  onQueryChange,\r\n  searchResults,\r\n  closeDrawer,\r\n  onSearchSubmit,\r\n  renderSearchResult,\r\n  renderTrendingItem,\r\n  isOpen, // Accept isOpen prop\r\n}) => {\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (isOpen && inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isOpen]); // Dependency array includes isOpen\r\n\r\n  const handleInputChange = (e) => {\r\n    onQueryChange(e.target.value);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\" && query.trim() !== \"\") {\r\n      onSearchSubmit(); // No need to pass the query, it's managed by the parent\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    onQueryChange(\"\"); // Clear the input when closing\r\n    closeDrawer();\r\n  };\r\n\r\n  // Filter searchResults based on query\r\n  const filteredResults = searchResults.filter((result) =>\r\n    result.title.toLowerCase().includes(query.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <Wrapper>\r\n      <SearchBarContainer>\r\n        <SearchBar2\r\n          value={query}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Search for...\"\r\n          onKeyDown={handleKeyDown}\r\n          inputRef={inputRef} // Pass the ref to SearchBar2\r\n        />\r\n        <CancelButton onClick={handleClose}>Cancel</CancelButton>\r\n      </SearchBarContainer>\r\n      <div>\r\n        {query === \"\" ? (\r\n          <div>\r\n            <h3>Trending</h3>\r\n            {trendingItems.map((item, index) => renderTrendingItem(item, index))}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h3>Search Results</h3>\r\n            {filteredResults.length > 0 ? (\r\n              filteredResults.map((result, index) =>\r\n                renderSearchResult(result, index)\r\n              )\r\n            ) : (\r\n              <p>No results found.</p>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nSearchDrawer.propTypes = {\r\n  trendingItems: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  query: PropTypes.string.isRequired,\r\n  onQueryChange: PropTypes.func.isRequired,\r\n  searchResults: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      description: PropTypes.string,\r\n      thumbnail: PropTypes.string,\r\n    })\r\n  ).isRequired,\r\n  closeDrawer: PropTypes.func.isRequired,\r\n  onSearchSubmit: PropTypes.func.isRequired,\r\n  renderSearchResult: PropTypes.func.isRequired,\r\n  renderTrendingItem: PropTypes.func.isRequired,\r\n  isOpen: PropTypes.bool.isRequired, // Add prop type for isOpen\r\n};\r\n\r\nexport default SearchDrawer;\r\n"],"names":[],"sourceRoot":""}