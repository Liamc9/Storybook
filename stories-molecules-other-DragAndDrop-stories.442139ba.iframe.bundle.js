"use strict";(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[9822],{"./src/stories/molecules/other/DragAndDrop.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomMaxLength:()=>CustomMaxLength,Default:()=>Default,EmptyColumns:()=>EmptyColumns,PreFilledColumns:()=>PreFilledColumns,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DragAndDrop_stories});var react=__webpack_require__("./node_modules/react/index.js"),dragula=__webpack_require__("./node_modules/dragula/dragula.js"),dragula_default=__webpack_require__.n(dragula);__webpack_require__("./node_modules/dragula/dist/dragula.css");function DragAndDrop(){const[tasks,setTasks]=(0,react.useState)({toDo:["Analysis","Coding","Card Sorting","Measure"],doing:["Hypothesis","User Testing","Prototype"],done:["Ideation","Sketches"],trash:["Interviews","Research"]}),toDoRef=(0,react.useRef)(null),doingRef=(0,react.useRef)(null),doneRef=(0,react.useRef)(null),trashRef=(0,react.useRef)(null);(0,react.useEffect)((()=>{const drake=dragula_default()([toDoRef.current,doingRef.current,doneRef.current,trashRef.current],{removeOnSpill:!1}).on("drag",(el=>{el.classList.remove("ex-moved")})).on("drop",(el=>{el.classList.add("ex-moved")})).on("over",((el,container)=>{container.classList.add("ex-over")})).on("out",((el,container)=>{container.classList.remove("ex-over")}));return()=>{drake.destroy()}}),[]);const addTask=()=>{const inputTask=document.getElementById("taskText").value.trim();""!==inputTask&&(setTasks((prevTasks=>({...prevTasks,toDo:[...prevTasks.toDo,inputTask]}))),document.getElementById("taskText").value="")};return react.createElement(react.Fragment,null,react.createElement("style",null,'\n                @import url("https://fonts.googleapis.com/css?family=Arimo:400,700|Roboto+Slab:400,700");\n\n:root {\n  font-size: calc(0.5vw + 1vh);\n}\n\n* {\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\nbody {\n  min-width: 420px;\n}\n\nh1,\nh4 {\n  font-family: "Arimo", sans-serif;\n  line-height: 1.3;\n}\n\nheader h1 {\n  font-size: 2.4rem;\n  margin: 4rem auto;\n}\n\nspan {\n  font-size: 3rem;\n}\n\np {\n  font-family: "Roboto Slab", serif;\n}\n\na,\na:link,\na:active,\na:visited {\n  color: #0066aa;\n  text-decoration: none;\n  border-bottom: #000013 0.16rem solid;\n}\n\na:hover {\n  color: #000013;\n  border-bottom: #0066aa 0.16rem solid;\n}\n\nheader,\nfooter {\n  width: 40rem;\n  margin: 2rem auto;\n  text-align: center;\n}\n\n.add-task-container {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  width: 20rem;\n  height: 5.3rem;\n  margin: auto;\n  background: #a8a8a8;\n  border: #000013 0.2rem solid;\n  border-radius: 0.2rem;\n  padding: 0.4rem;\n}\n\n.main-container {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.columns {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  margin: 1.6rem auto;\n}\n\n.column {\n  width: 8.4rem;\n  margin: 0 0.6rem;\n  background: #a8a8a8;\n  border: #000013 0.2rem solid;\n  border-radius: 0.2rem;\n}\n\n.column-header {\n  padding: 0.1rem;\n  border-bottom: #000013 0.2rem solid;\n}\n\n.column-header h4 {\n  text-align: center;\n}\n\n.to-do-column .column-header {\n  background: #ff872f;\n}\n\n.doing-column .column-header {\n  background: #13a4d9;\n}\n\n.done-column .column-header {\n  background: #15d072;\n}\n\n.trash-column .column-header {\n  background: #ff4444;\n}\n\n.task-list {\n  min-height: 3rem;\n}\n\nul {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n\nli {\n  list-style-type: none;\n}\n\n.column-button {\n  text-align: center;\n  padding: 0.1rem;\n}\n\n.button {\n  font-family: "Arimo", sans-serif;\n  font-weight: 700;\n  border: #000013 0.14rem solid;\n  border-radius: 0.2rem;\n  color: #000013;\n  padding: 0.6rem 1rem;\n  margin-bottom: 0.3rem;\n  cursor: pointer;\n}\n\n.delete-button {\n  background-color: #ff4444;\n  margin: 0.1rem auto 0.6rem auto;\n}\n\n.delete-button:hover {\n  background-color: #fa7070;\n}\n\n.add-button {\n  background-color: #ffcb1e;\n  padding: 0 1rem;\n  height: 2.8rem;\n  width: 10rem;\n  margin-top: 0.6rem;\n}\n\n.add-button:hover {\n  background-color: #ffdd6e;\n}\n\n.task {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  vertical-align: middle;\n  list-style-type: none;\n  background: #fff;\n  -webkit-transition: all 0.3s;\n  transition: all 0.3s;\n  margin: 0.4rem;\n  height: 4rem;\n  border: #000013 0.15rem solid;\n  border-radius: 0.2rem;\n  cursor: move;\n  text-align: center;\n  vertical-align: middle;\n}\n\n#taskText {\n  background: #fff;\n  border: #000013 0.15rem solid;\n  border-radius: 0.2rem;\n  text-align: center;\n  font-family: "Roboto Slab", serif;\n  height: 4rem;\n  width: 7rem;\n  margin: auto 0.8rem auto 0.1rem;\n}\n\n.task p {\n  margin: auto;\n}\n\n/* Dragula CSS Release 3.2.0 from: https://github.com/bevacqua/dragula */\n\n.gu-mirror {\n  position: fixed !important;\n  margin: 0 !important;\n  z-index: 9999 !important;\n  opacity: 0.8;\n  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";\n  filter: alpha(opacity=80);\n}\n\n.gu-hide {\n  display: none !important;\n}\n\n.gu-unselectable {\n  -webkit-user-select: none !important;\n  -moz-user-select: none !important;\n  -ms-user-select: none !important;\n  user-select: none !important;\n}\n\n.gu-transit {\n  opacity: 0.2;\n  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=20)";\n  filter: alpha(opacity=20);\n}\n\n                '),react.createElement("div",{className:"add-task-container"},react.createElement("input",{type:"text",maxLength:"12",id:"taskText",placeholder:"New Task...",onKeyDown:event=>{"Enter"===event.key&&addTask()}}),react.createElement("button",{id:"add",className:"button add-button",onClick:addTask},"Add New Task")),react.createElement("div",{className:"main-container"},react.createElement("ul",{className:"columns"},react.createElement("li",{className:"column to-do-column"},react.createElement("div",{className:"column-header"},react.createElement("h4",null,"To Do")),react.createElement("ul",{className:"task-list",id:"to-do",ref:toDoRef},tasks.toDo.map(((task,index)=>react.createElement("li",{key:index,className:"task"},react.createElement("p",null,task)))))),react.createElement("li",{className:"column doing-column"},react.createElement("div",{className:"column-header"},react.createElement("h4",null,"Doing")),react.createElement("ul",{className:"task-list",id:"doing",ref:doingRef},tasks.doing.map(((task,index)=>react.createElement("li",{key:index,className:"task"},react.createElement("p",null,task)))))),react.createElement("li",{className:"column done-column"},react.createElement("div",{className:"column-header"},react.createElement("h4",null,"Done")),react.createElement("ul",{className:"task-list",id:"done",ref:doneRef},tasks.done.map(((task,index)=>react.createElement("li",{key:index,className:"task"},react.createElement("p",null,task)))))),react.createElement("li",{className:"column trash-column"},react.createElement("div",{className:"column-header"},react.createElement("h4",null,"Trash")),react.createElement("ul",{className:"task-list",id:"trash",ref:trashRef},tasks.trash.map(((task,index)=>react.createElement("li",{key:index,className:"task"},react.createElement("p",null,task))))),react.createElement("div",{className:"column-button"},react.createElement("button",{className:"button delete-button",onClick:()=>{setTasks((prevTasks=>({...prevTasks,trash:[]})))}},"Delete"))))))}const DragAndDrop_stories={title:"Molecules/Other/DragAndDrop",component:DragAndDrop,tags:["autodocs"],parameters:{docs:{description:{component:"\nThe `DragAndDrop` component is a functional interface element that allows users to manage tasks across different columns using drag-and-drop functionality. It is designed for organizing items into categories such as \"To Do\", \"Doing\", \"Done\", and \"Trash\".\n\n### Features\n- **Drag-and-Drop Functionality**: Users can move tasks between columns with intuitive drag-and-drop interaction.\n- **Customizable Task Lists**: Accepts initial tasks as input to set up the component with predefined data.\n- **Input Control**: Options for customizing the maximum length of task input.\n\n### Usage\n\n```jsx\nimport React from 'react';\nimport DragAndDrop from './components/DragAndDrop';\n\nconst ExampleComponent = () => (\n  <DragAndDrop\n    initialTasks={{\n      toDo: ['Task 1', 'Task 2'],\n      doing: ['Task 3'],\n      done: ['Task 4'],\n      trash: [],\n    }}\n  />\n);\n\nexport default ExampleComponent;\n```\n        "}}}},Default=()=>react.createElement(DragAndDrop,null);Default.storyName="Default Setup",Default.parameters={docs:{storyDescription:"Displays the default task lists for To Do, Doing, Done, and Trash."}};const EmptyColumns=()=>react.createElement(DragAndDrop,{initialTasks:{toDo:[],doing:[],done:[],trash:[]}});EmptyColumns.storyName="Empty Task Lists",EmptyColumns.parameters={docs:{storyDescription:"All columns (To Do, Doing, Done, and Trash) start empty."}};const PreFilledColumns=()=>react.createElement(DragAndDrop,{initialTasks:{toDo:["Research","Planning"],doing:["Development","Testing"],done:["Deployment"],trash:["Old Ideas"]}});PreFilledColumns.storyName="Pre-filled Task Lists",PreFilledColumns.parameters={docs:{storyDescription:"Showcases task columns that start with predefined tasks."}};const CustomMaxLength=()=>react.createElement(DragAndDrop,{maxTaskLength:6});CustomMaxLength.storyName="Custom Max Task Length",CustomMaxLength.parameters={docs:{storyDescription:"Sets a custom max length of 6 characters for new tasks."}};const __namedExportsOrder=["Default","EmptyColumns","PreFilledColumns","CustomMaxLength"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"() => <DragAndDrop />",...Default.parameters?.docs?.source}}},EmptyColumns.parameters={...EmptyColumns.parameters,docs:{...EmptyColumns.parameters?.docs,source:{originalSource:"() => {\n  const emptyTasks = {\n    toDo: [],\n    doing: [],\n    done: [],\n    trash: []\n  };\n  return <DragAndDrop initialTasks={emptyTasks} />;\n}",...EmptyColumns.parameters?.docs?.source}}},PreFilledColumns.parameters={...PreFilledColumns.parameters,docs:{...PreFilledColumns.parameters?.docs,source:{originalSource:"() => {\n  const preFilledTasks = {\n    toDo: ['Research', 'Planning'],\n    doing: ['Development', 'Testing'],\n    done: ['Deployment'],\n    trash: ['Old Ideas']\n  };\n  return <DragAndDrop initialTasks={preFilledTasks} />;\n}",...PreFilledColumns.parameters?.docs?.source}}},CustomMaxLength.parameters={...CustomMaxLength.parameters,docs:{...CustomMaxLength.parameters?.docs,source:{originalSource:"() => <DragAndDrop maxTaskLength={6} />",...CustomMaxLength.parameters?.docs?.source}}}}}]);