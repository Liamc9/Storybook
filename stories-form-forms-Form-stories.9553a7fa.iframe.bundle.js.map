{"version":3,"file":"stories-form-forms-Form-stories.9553a7fa.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAgCA;;;;;;;;;;AAYA;ACrCA;;;;;;;;AAQA;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;AAsBA;;;;AASA;;;;;;;;;;;;;;AC/BA;;;;;;;;;;AAYA;ACrBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA","sources":["webpack://storybook/./src/components/form/forms/MultiPageForm.jsx","webpack://storybook/./src/components/form/inputs/textInputs/TextInput4.jsx","webpack://storybook/./src/components/form/forms/SinglePageForm.jsx","webpack://storybook/./src/components/form/inputs/rangeInputs/RangeInput2.jsx"],"sourcesContent":["// MultiPageForm.jsx\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport FormLogic from \"./FormLogic\";\r\n\r\n// Import input components\r\nimport TextInput from \"../inputs/textInputs/TextInput\";\r\nimport ColorPicker from \"../inputs/colorPickers/ColorPicker\";\r\nimport RangeInput from \"../inputs/rangeInputs/RangeInput\";\r\nimport Checkbox3 from \"../inputs/checkboxInputs/Checkbox3\";\r\nimport ToggleSwitch2 from \"../inputs/toggleSwitches/ToggleSwitch2\";\r\nimport RadioButtons2 from \"../inputs/radioInputs/RadioButtons2\";\r\n\r\n// Import button components\r\nimport SubmitButton from \"../inputs/formButtons/SubmitButton\";\r\nimport ResetButton from \"../inputs/formButtons/ResetButton\";\r\n\r\n// Styled containers for layout\r\nconst FormContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr); /* Two-column layout */\r\n  gap: 16px;\r\n  padding: 24px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  max-width: 800px; /* Increased width for better layout */\r\n  margin: 0 auto;\r\n  background-color: #fff;\r\n\r\n  @media (max-width: 600px) {\r\n    grid-template-columns: 1fr; /* Single-column layout on small screens */\r\n  }\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  grid-column: 1 / -1; /* Span all columns */\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 8px;\r\n  margin-top: 16px;\r\n\r\n  @media (max-width: 600px) {\r\n    flex-direction: column; /* Stack buttons vertically on small screens */\r\n  }\r\n`;\r\n\r\n\r\n/** Define Custom Validation Logic */\r\nconst validatePreferences = (formData) => {\r\n  const errors = {};\r\n  if (formData.rating < 3) {\r\n    errors.rating = \"Rating must be at least 3.\";\r\n  }\r\n  if (formData.color === \"#000000\") {\r\n    errors.color = \"Color cannot be black.\";\r\n  }\r\n  return errors;\r\n};\r\n\r\n/** Define Pages */\r\nconst getPages = () => [\r\n  {\r\n    customValidate: null,\r\n    content: (\r\n      <FormContainer>\r\n        <h2>Page 1: Personal Info</h2>\r\n        <TextInput label=\"Name\" type=\"text\" name=\"name\" id=\"name\" required gridSpan='span 2'/>\r\n        <TextInput label=\"Email\" type=\"email\" name=\"email\" id=\"email\" required />\r\n\r\n        {/* Wrap the Message input to span two columns */}\r\n        <TextInput\r\n          label=\"Message\"\r\n          type=\"textarea\"\r\n          name=\"message\"\r\n          id=\"message\"\r\n          required\r\n          gridSpan=\"span 2\"\r\n        />\r\n      </FormContainer>\r\n    ),\r\n  },\r\n  {\r\n    customValidate: validatePreferences,\r\n    content: (\r\n      <FormContainer>\r\n        <h2>Page 2: Preferences</h2>\r\n        <ColorPicker label=\"Favorite Color\" name=\"color\" id=\"color\" required />\r\n        <RangeInput\r\n          label=\"Rating\"\r\n          name=\"rating\"\r\n          id=\"rating\"\r\n          min={1}\r\n          max={5}\r\n          required\r\n        />\r\n        <Checkbox3 name=\"checkbox\" id=\"checkbox\" label=\"Accept Terms\" required />\r\n        <ToggleSwitch2 name=\"toggle\" id=\"toggle\" label=\"Enable Feature\" />\r\n\r\n        {/* Wrap the RadioButtons to span two columns */}\r\n        <RadioButtons2\r\n          label=\"Role\"\r\n          name=\"role\"\r\n          options={[\r\n            { id: \"designer\", value: \"designer\", label: \"Designer\", defaultChecked: true },\r\n            { id: \"student\", value: \"student\", label: \"Student\" },\r\n            { id: \"teacher\", value: \"teacher\", label: \"Teacher\" },\r\n          ]}\r\n          required\r\n          gridColumn=\"1 / -1\"\r\n        />\r\n      </FormContainer>\r\n    ),\r\n  },\r\n  {\r\n    customValidate: null,\r\n    content: (\r\n      <FormContainer>\r\n        <h2>Page 3: Review & Submit</h2>\r\n      </FormContainer>\r\n    ),\r\n  },\r\n];\r\n\r\n/** Render Navigation Buttons */\r\nconst renderButtonLayout = ({ currentPageIndex, isLastPage, handlePrevious }) => (\r\n  <ButtonContainer>\r\n    {/* Previous Button */}\r\n    {currentPageIndex > 0 && (\r\n      <ResetButton type=\"button\" onClick={handlePrevious}>\r\n        Previous\r\n      </ResetButton>\r\n    )}\r\n\r\n    {/* Next or Submit Button */}\r\n    <SubmitButton type=\"submit\">{isLastPage ? \"Submit\" : \"Next\"}</SubmitButton>\r\n  </ButtonContainer>\r\n);\r\n\r\n/** MultiPageForm Component */\r\nexport default function MultiPageForm({ initialData = {}, handleFormSubmit }) {\r\n  const pages = getPages();\r\n\r\n  return (\r\n    <FormLogic\r\n      pages={pages}\r\n      initialData={initialData}\r\n      onSubmit={handleFormSubmit}\r\n    >\r\n      {({ currentPageIndex, isLastPage, handlePrevious, formData }) => (\r\n        <>\r\n          {renderButtonLayout({ currentPageIndex, isLastPage, handlePrevious })}\r\n        </>\r\n      )}\r\n    </FormLogic>\r\n  );\r\n}\r\n","// TextInput.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ArrowRightIcon } from '../../../Branding/icons/Icons'\r\n\r\n// Styled Components\r\nconst InputWrapper = styled.div`\r\n    grid-column: ${(props) => props.gridSpan || 'auto'};\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: #f7f7f8;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px;\r\n  padding: 8px;\r\n  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  flex: 1;\r\n  border: none;\r\n  background: transparent;\r\n  padding: 12px 16px;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  color: #333;\r\n\r\n  &::placeholder {\r\n    color: #aaa;\r\n  }\r\n`;\r\n\r\nconst SubmitButton = styled.button`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: black;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 40px;\r\n  height: 40px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease-in-out;\r\n\r\n  &:hover {\r\n    background-color: #333;\r\n  }\r\n\r\n  &:active {\r\n    background-color: #222;\r\n  }\r\n`;\r\n\r\nconst ArrowIcon = styled(ArrowRightIcon)`\r\n  width: 20px;\r\n  height: 20px;\r\n  fill: currentColor;\r\n`;\r\n\r\n// TextInput Component\r\nconst TextInput4 = ({ onSubmit, ...props }) => {\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter' && onSubmit) {\r\n      onSubmit(event);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <InputWrapper gridSpan={props.gridSpan}>\r\n      <StyledInput {...props} onKeyDown={handleKeyDown} />\r\n      <SubmitButton onClick={onSubmit}>\r\n        <ArrowIcon />\r\n      </SubmitButton>\r\n    </InputWrapper>\r\n  );\r\n};\r\n\r\nexport default TextInput4;\r\n","import React from \"react\";\r\nimport FormLogic from \"./FormLogic\"; // Ensure the correct import path\r\nimport styled from \"styled-components\";\r\nimport TextInput from \"../inputs/textInputs/TextInput\";\r\nimport SubmitButton from \"../inputs/formButtons/SubmitButton\";\r\nimport RangeInput from \"../inputs/rangeInputs/RangeInput\";\r\nimport ColorPicker from \"../inputs/colorPickers/ColorPicker\";\r\nimport Checkbox3 from \"../inputs/checkboxInputs/Checkbox3\";\r\nimport ToggleSwitch2 from \"../inputs/toggleSwitches/ToggleSwitch2\";\r\nimport RadioButtons2 from \"../inputs/radioInputs/RadioButtons2\";\r\nimport RangeInput2 from \"../inputs/rangeInputs/RangeInput2\";\r\nimport ResetButton from \"../inputs/formButtons/ResetButton\";\r\nimport TextInput4 from \"../inputs/textInputs/TextInput4\";\r\n\r\n// Styled Components\r\nconst FormContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr); /* Always two columns */\r\n  gap: 16px;\r\n  padding: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  background-color: #f9f9f9;\r\n\r\n  @media (max-width: 600px) {\r\n    grid-template-columns: 1fr; /* Single column on smaller screens */\r\n  }\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  grid-column: span 2; /* Ensure buttons span both columns */\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 8px;\r\n  margin-top: 16px;\r\n\r\n  @media (max-width: 600px) {\r\n    grid-column: span 1; /* Single column on smaller screens */\r\n  }\r\n`;\r\n\r\nexport default function SinglePageForm({\r\n  initialFormData = {},\r\n  handleFormSubmit,\r\n}) {\r\n  const defaultData = {\r\n    name: \"\",\r\n    email: \"\",\r\n    message: \"\",\r\n    color: \"#000000\",\r\n    rating: 3,\r\n    checkbox: false,\r\n    toggle: false,\r\n    role: \"designer\",\r\n    volume: 3,\r\n  };\r\n\r\n  // Merge defaultData with whatever was passed in\r\n  const mergedData = { ...defaultData, ...initialFormData };\r\n\r\n  return (\r\n    <div>\r\n      <FormLogic onSubmit={handleFormSubmit} initialData={mergedData}>\r\n        <FormContainer>\r\n          <TextInput label=\"Name\" type=\"text\" name=\"name\" id=\"name\" required />\r\n          <TextInput\r\n            label=\"Email\"\r\n            type=\"email\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            required\r\n          />\r\n          <TextInput\r\n            label=\"Message\"\r\n            name=\"message\"\r\n            id=\"message\"\r\n            rows={5}\r\n            required\r\n            gridSpan=\"span 2\"\r\n            as=\"textarea\"\r\n          />\r\n          <ColorPicker label=\"Color\" name=\"color\" id=\"color\" required />\r\n          <RangeInput\r\n            label=\"Rating\"\r\n            name=\"rating\"\r\n            id=\"rating\"\r\n            min={1}\r\n            max={5}\r\n            required\r\n          />\r\n          <Checkbox3 name=\"checkbox\" id=\"checkbox\" />\r\n          <ToggleSwitch2 name=\"toggle\" id=\"toggle\" gridSpan=\"span 2\" />\r\n          <RadioButtons2\r\n            name=\"role\"\r\n            options={[\r\n              {\r\n                id: \"designer\",\r\n                value: \"designer\",\r\n                label: \"Designer\",\r\n                defaultChecked: true,\r\n              },\r\n              { id: \"student\", value: \"student\", label: \"Student\" },\r\n              { id: \"teacher\", value: \"teacher\", label: \"Teacher\" },\r\n            ]}\r\n            gridSpan=\"span 2\"\r\n          />\r\n          <RangeInput2\r\n            label=\"Volume\"\r\n            name=\"volume\"\r\n            id=\"volume\"\r\n            min={1}\r\n            max={5}\r\n            required\r\n          />\r\n          <TextInput4 gridSpan='span 2'/>\r\n          <ButtonContainer>\r\n            <ResetButton>Reset</ResetButton>\r\n            <SubmitButton>Submit</SubmitButton>\r\n          </ButtonContainer>\r\n        </FormContainer>\r\n      </FormLogic>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst RangeInput2 = ({...props}) => {\r\n  return (\r\n    <StyledWrapper gridSpan={props.gridSpan}>\r\n      <label className=\"slider\">\r\n        <input type=\"range\"  className=\"level\" {...props} />\r\n        <svg className=\"volume\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" width={512} height={512} x={0} y={0} viewBox=\"0 0 24 24\" style={{enableBackground: 'new 0 0 512 512'}} xmlSpace=\"preserve\">\r\n          <g>\r\n            <path d=\"M18.36 19.36a1 1 0 0 1-.705-1.71C19.167 16.148 20 14.142 20 12s-.833-4.148-2.345-5.65a1 1 0 1 1 1.41-1.419C20.958 6.812 22 9.322 22 12s-1.042 5.188-2.935 7.069a.997.997 0 0 1-.705.291z\" fill=\"currentColor\" data-original=\"#000000\" />\r\n            <path d=\"M15.53 16.53a.999.999 0 0 1-.703-1.711C15.572 14.082 16 13.054 16 12s-.428-2.082-1.173-2.819a1 1 0 1 1 1.406-1.422A6 6 0 0 1 18 12a6 6 0 0 1-1.767 4.241.996.996 0 0 1-.703.289zM12 22a1 1 0 0 1-.707-.293L6.586 17H4c-1.103 0-2-.897-2-2V9c0-1.103.897-2 2-2h2.586l4.707-4.707A.998.998 0 0 1 13 3v18a1 1 0 0 1-1 1z\" fill=\"currentColor\" data-original=\"#000000\" />\r\n          </g>\r\n        </svg>\r\n      </label>\r\n    </StyledWrapper>\r\n  );\r\n}\r\n\r\nconst StyledWrapper = styled.div`\r\n      grid-column: ${(props) => props.gridSpan || 'auto'};\r\n\r\n  /* level settings 👇 */\r\n\r\n  .slider {\r\n    /* slider */\r\n    --slider-width: 100%;\r\n    --slider-height: 6px;\r\n    --slider-bg: rgb(82, 82, 82);\r\n    --slider-border-radius: 999px;\r\n    /* level */\r\n    --level-color: #fff;\r\n    --level-transition-duration: .1s;\r\n    /* icon */\r\n    --icon-margin: 15px;\r\n    --icon-color: var(--slider-bg);\r\n    --icon-size: 25px;\r\n  }\r\n\r\n  .slider {\r\n    cursor: pointer;\r\n    display: -webkit-inline-box;\r\n    display: -ms-inline-flexbox;\r\n    display: inline-flex;\r\n    -webkit-box-orient: horizontal;\r\n    -webkit-box-direction: reverse;\r\n    -ms-flex-direction: row-reverse;\r\n    flex-direction: row-reverse;\r\n    -webkit-box-align: center;\r\n    -ms-flex-align: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .slider .volume {\r\n    display: inline-block;\r\n    vertical-align: top;\r\n    margin-right: var(--icon-margin);\r\n    color: var(--icon-color);\r\n    width: var(--icon-size);\r\n    height: auto;\r\n  }\r\n\r\n  .slider .level {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    appearance: none;\r\n    width: var(--slider-width);\r\n    height: var(--slider-height);\r\n    background: var(--slider-bg);\r\n    overflow: hidden;\r\n    border-radius: var(--slider-border-radius);\r\n    -webkit-transition: height var(--level-transition-duration);\r\n    -o-transition: height var(--level-transition-duration);\r\n    transition: height var(--level-transition-duration);\r\n    cursor: inherit;\r\n  }\r\n\r\n  .slider .level::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    width: 0;\r\n    height: 0;\r\n    -webkit-box-shadow: -200px 0 0 200px var(--level-color);\r\n    box-shadow: -200px 0 0 200px var(--level-color);\r\n  }\r\n\r\n  .slider:hover .level {\r\n    height: calc(var(--slider-height) * 2);\r\n  }`;\r\n\r\nexport default RangeInput2;\r\n"],"names":[],"sourceRoot":""}