{"version":3,"file":"stories-form-inputs-selectInput-stories.3a4d4939.iframe.bundle.js","mappings":";AAMA;;;;AAIA;;;;AAMA;;;;;;;;;;;;;;;;;AAsBA;ACjCA;;;;;;AAMA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;ACxCA;;;;;;;;;;AAYA;AAGA;AACA;AACA;AACA;;;;;;AAQA;;;AAGA;;;AAIA;;;;;;;AASA;AACA","sources":["webpack://storybook/./src/components/form/inputs/selectInputs/SelectInput2.jsx","webpack://storybook/./src/components/form/inputs/selectInputs/SelectInput3.jsx","webpack://storybook/./src/components/form/inputs/selectInputs/SelectInput.jsx"],"sourcesContent":["// SelectInput2.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// Styled Components\r\nconst SelectWrapper = styled.div`\r\n      grid-column: ${(props) => props.gridSpan || 'auto'};\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  margin-bottom: 0.5rem;\r\n  font-size: 1rem;\r\n  color: #333;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n  padding: 0.75rem 1rem;\r\n  border: 2px solid #ddd;\r\n  border-radius: 8px;\r\n  font-size: 1rem;\r\n  background-color: #fff;\r\n  transition: border-color 0.3s ease;\r\n\r\n  &:focus {\r\n    border-color: #6200ee;\r\n    outline: none;\r\n  }\r\n\r\n  &:disabled {\r\n    background-color: #f5f5f5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\n// SelectInput2 Component\r\nconst SelectInput2 = ({ label, options, ...props }) => {\r\n  return (\r\n    <SelectWrapper gridSpan={props.gridSpan}>\r\n      {label && <StyledLabel htmlFor={props.id}>{label}</StyledLabel>}\r\n      <StyledSelect {...props}>\r\n        {options && options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </StyledSelect>\r\n    </SelectWrapper>\r\n  );\r\n};\r\n\r\nexport default SelectInput2;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// Styled Components\r\nconst SelectWrapper = styled.div`\r\n      grid-column: ${(props) => props.gridSpan || 'auto'};\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 1rem;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  margin-bottom: 0.5rem;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  color: #4a4a4a;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n  padding: 0.75rem 1rem;\r\n  border: 2px solid #e0e0e0;\r\n  border-radius: 12px;\r\n  font-size: 1rem;\r\n  background-color: #fff;\r\n  color: #333;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    border-color: #6200ee;\r\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  &:focus {\r\n    border-color: #6200ee;\r\n    outline: none;\r\n    box-shadow: 0 0 0 3px rgba(98, 0, 238, 0.2);\r\n  }\r\n\r\n  &:disabled {\r\n    background-color: #f9f9f9;\r\n    color: #bdbdbd;\r\n    border-color: #e0e0e0;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst SelectInput3 = ({ label, options, ...props }) => {\r\n  return (\r\n    <SelectWrapper gridSpan={props.gridSpan}>\r\n      {label && <StyledLabel htmlFor={props.id}>{label}</StyledLabel>}\r\n      <StyledSelect {...props}>\r\n        {options && options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </StyledSelect>\r\n    </SelectWrapper>\r\n  );\r\n};\r\n\r\nexport default SelectInput3;\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { ChevronDownIcon } from '../../../Branding/icons/Icons';\r\n\r\nconst SelectContainer = styled.div`\r\n  position: relative;\r\n  font-family: sans-serif;\r\n`;\r\n\r\nconst sharedSelectStyles = css`\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  border: 2px solid;\r\n  background: transparent;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  appearance: none;\r\n  transition: border-color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n  ${sharedSelectStyles}\r\n  border-color: ${({ isFocused, color }) => (isFocused ? color : '#D1D5DB')};\r\n  color: ${({ value }) => (value ? '#000' : '#6B7280')}; /* Default placeholder style */\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  position: absolute;\r\n  left: 0;\r\n  margin: 0.25rem;\r\n  padding: 0.25rem;\r\n  background: white;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n  font-size: 1rem;\r\n  pointer-events: none;\r\n  transform: ${({ hasValue, isFocused }) =>\r\n    hasValue || isFocused ? 'translate(1.25rem, -70%) scale(0.9)' : 'translate(0.625rem, 0)'};\r\n  transform-origin: left top;\r\n  transition: transform 0.3s ease-in-out, color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledArrow = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 0.75rem;\r\n  transform: translateY(-50%);\r\n  pointer-events: none;\r\n  font-size: 1rem;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n`;\r\n\r\nconst SelectInput = ({ name, value, onChange, color = '#000', label, options = [] }) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const handleFocus = () => setIsFocused(true);\r\n  const handleBlur = () => setIsFocused(false);\r\n\r\n  return (\r\n    <SelectContainer>\r\n      <StyledSelect\r\n        name={name}\r\n        id={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        isFocused={isFocused}\r\n        color={color}\r\n        required\r\n      >\r\n        <option value=\"\" disabled>\r\n        </option>\r\n        {options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </StyledSelect>\r\n      <StyledLabel\r\n        htmlFor={name}\r\n        isFocused={isFocused}\r\n        color={color}\r\n        hasValue={Boolean(value)}\r\n      >\r\n        {label}\r\n      </StyledLabel>\r\n      <StyledArrow isFocused={isFocused} color={color}>\r\n        <ChevronDownIcon className='w-4 h-4'/>\r\n      </StyledArrow>\r\n    </SelectContainer>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n"],"names":[],"sourceRoot":""}