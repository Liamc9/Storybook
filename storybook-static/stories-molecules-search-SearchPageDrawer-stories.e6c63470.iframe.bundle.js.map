{"version":3,"file":"stories-molecules-search-SearchPageDrawer-stories.e6c63470.iframe.bundle.js","mappings":";;;;;AAYA;;;;AAMA;;;;;;;AASA;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;;;;;;;AASA;;;;;;;;;;;;;;;ACjBA;;;;;;;;;;;;;;;;AAmBA;;AAKA;;;;;AAQA;;;AAGA;;;;;;AC1CA;;;AAkKA;;;;;;;ACrKA;AACA;AACA;AACA;;;;AAMA;AACA;AACA;;AAIA;AACA;;AAEA;;AAIA;;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;AAQA;AACA;;AAIA;AACA;;;;ACpDA;;;;;AAOA;;;;;;AAQA;;;;;;;;;;AAYA;;;;;;;;;;AA2CA;;;;ACvEA;;;;;AAOA;;;AAKA;;;;AAMA;;;;;;;;;;;;;AAaA;;;AAGA;;;;;;;;;ACvBA;;;;;;;;;;;AAcA;;;;;;;;;;;AAWA;;;;ACjCA;;;;;;;;AAUA;;AAqDA","sources":["webpack://storybook/./src/components/molecules/search/FilterDrawer.jsx","webpack://storybook/./src/components/molecules/search/SearchButton.jsx","webpack://storybook/./src/components/molecules/search/FilterButton.jsx","webpack://storybook/./src/components/molecules/search/SearchResultItem.jsx","webpack://storybook/./src/components/molecules/search/SearchPageDrawer.jsx","webpack://storybook/./src/components/atoms/Drawers/BottomDrawer.jsx","webpack://storybook/./src/components/atoms/menuitem/SelectField.jsx","webpack://storybook/./src/components/atoms/menuitem/ToggleField.jsx","webpack://storybook/./src/components/molecules/search/SearchBar2.jsx","webpack://storybook/./src/components/molecules/search/SearchDrawer.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport SelectField from \"../../atoms/menuitem/SelectField\"\r\nimport ToggleField from \"../../atoms/menuitem/ToggleField\";\r\n\r\n// Styled components\r\nconst Wrapper = styled.div`\r\n  padding: 16px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%; /* Full height for proper scrolling */\r\n`;\r\n\r\nconst FiltersContainer = styled.div`\r\n  flex: 1; /* Allow this to take up the remaining space */\r\n  overflow-y: auto; /* Enable scrolling if the content overflows */\r\n  padding-bottom: 80px; /* Space to avoid overlapping with the floating button */\r\n`;\r\n\r\nconst FloatingButtonContainer = styled.div`\r\n  position: sticky; /* Stick to the bottom of the drawer */\r\n  bottom: 0;\r\n  background-color: white; /* Ensure it stands out over content */\r\n  padding: 16px 0 0;\r\n  border-top: 1px solid #e0e0e0; /* Add a separator line */\r\n  z-index: 10; /* Ensure it stays above scrolling content */\r\n`;\r\n\r\nconst ApplyButton = styled.button`\r\n  width: 100%; /* Full width for better visibility */\r\n  padding: 12px 16px;\r\n  background-color: #000000; /* Bootstrap primary color */\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  transition: background-color 0.3s ease;\r\n\r\n`;\r\n\r\nconst FilterDrawer = ({\r\n  filters,\r\n  selectedFilters,\r\n  onFilterChange,\r\n  closeDrawer,\r\n  sortOptions,\r\n  selectedSortOption,\r\n  onSortChange,\r\n}) => {\r\n  const [localSelectedFilters, setLocalSelectedFilters] = useState(selectedFilters);\r\n  const [localSelectedSortOption, setLocalSelectedSortOption] = useState(selectedSortOption);\r\n\r\n  // Update local state when selectedFilters prop changes\r\n  useEffect(() => {\r\n    setLocalSelectedFilters(selectedFilters);\r\n  }, [selectedFilters]);\r\n\r\n  // Update local state when selectedSortOption prop changes\r\n  useEffect(() => {\r\n    setLocalSelectedSortOption(selectedSortOption);\r\n  }, [selectedSortOption]);\r\n\r\n  const handleFilterChange = (key, value) => {\r\n    setLocalSelectedFilters((prevFilters) => ({\r\n      ...prevFilters,\r\n      [key]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSortOptionChange = (value) => {\r\n    setLocalSelectedSortOption(value);\r\n  };\r\n\r\n  const handleApplyFilters = () => {\r\n    onFilterChange(localSelectedFilters);\r\n    onSortChange(localSelectedSortOption);\r\n    closeDrawer();\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <FiltersContainer>\r\n        {/* Sort Field */}\r\n        {sortOptions && sortOptions.length > 0 && (\r\n          <SelectField\r\n            name=\"Sort By\"\r\n            value={localSelectedSortOption}\r\n            options={sortOptions}\r\n            onChange={handleSortOptionChange}\r\n            placeholder=\"Select sort order\"\r\n          />\r\n        )}\r\n        {/* Filters */}\r\n        {filters.map((filter) => {\r\n          switch (filter.type) {\r\n            case \"select\":\r\n              return (\r\n                <SelectField\r\n                  key={filter.key}\r\n                  name={filter.name}\r\n                  value={localSelectedFilters[filter.key] || \"\"}\r\n                  options={filter.options}\r\n                  onChange={(value) => handleFilterChange(filter.key, value)}\r\n                  placeholder={`Select ${filter.name}`}\r\n                />\r\n              );\r\n            case \"toggle\":\r\n              return (\r\n                <ToggleField\r\n                  key={filter.key}\r\n                  name={filter.name}\r\n                  value={localSelectedFilters[filter.key] || false}\r\n                  onChange={(value) => handleFilterChange(filter.key, value)}\r\n                />\r\n              );\r\n            // Add cases for other filter types if needed\r\n            default:\r\n              return null;\r\n          }\r\n        })}\r\n      </FiltersContainer>\r\n      <FloatingButtonContainer>\r\n        <ApplyButton onClick={handleApplyFilters}>Apply Filters</ApplyButton>\r\n      </FloatingButtonContainer>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nFilterDrawer.propTypes = {\r\n  filters: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      key: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      type: PropTypes.string.isRequired,\r\n      options: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([PropTypes.string, PropTypes.object])\r\n      ),\r\n    })\r\n  ).isRequired,\r\n  selectedFilters: PropTypes.object.isRequired,\r\n  onFilterChange: PropTypes.func.isRequired,\r\n  closeDrawer: PropTypes.func.isRequired,\r\n  sortOptions: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      value: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  selectedSortOption: PropTypes.string,\r\n  onSortChange: PropTypes.func.isRequired,\r\n};\r\n\r\nFilterDrawer.defaultProps = {\r\n  sortOptions: [],\r\n  selectedSortOption: \"\",\r\n};\r\n\r\nexport default FilterDrawer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { SearchIcon2 } from \"../../Branding/icons/Icons\";\r\n// Styled container for the search button\r\nconst StyledButton = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  padding: 12px 16px;\r\n  background-color: #f5f5f5;\r\n  border: 1px solid #dcdcdc;\r\n  border-radius: 25px;\r\n  font-size: 16px;\r\n  color: #aaa;\r\n  cursor: pointer;\r\n  box-sizing: border-box;\r\n\r\n  &:hover {\r\n    background-color: #eaeaea;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  span {\r\n    flex: 1;\r\n    text-align: left;\r\n    color: #aaa;\r\n  }\r\n`;\r\n\r\nconst SearchIconContainer = styled.div`\r\n  margin-right: 8px;\r\n\r\n  svg {\r\n    width: 20px;\r\n    height: 20px;\r\n    color: #333;\r\n  }\r\n`;\r\n\r\nconst SearchButton = ({ onClick }) => (\r\n  <StyledButton onClick={onClick}>\r\n    <SearchIconContainer>\r\n      <SearchIcon2/>\r\n    </SearchIconContainer>\r\n    <span>Search...</span>\r\n  </StyledButton>\r\n);\r\n\r\nSearchButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchButton;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { FilterIcon } from \"../../Branding/icons/Icons\"; // Replace with your actual icon\r\n\r\nconst Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  background-color: #ffffff;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  margin-left: 12px;\r\n  padding: 0 12px;\r\n\r\n  &:hover {\r\n    background-color: #f5f5f5;\r\n    border-color: #dcdcdc;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n    border-color: #007bff; /* Highlight color */\r\n    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25); /* Accessibility focus ring */\r\n  }\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n  color: #333;\r\n\r\n  svg {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n`;\r\n\r\nconst FilterButton = ({ onClick }) => {\r\n  return (\r\n    <Button onClick={onClick} aria-label=\"Open filter drawer\">\r\n      <IconWrapper>\r\n        <FilterIcon /> {/* Replace with your actual icon */}\r\n      </IconWrapper>\r\n    </Button>\r\n  );\r\n};\r\n\r\nFilterButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FilterButton;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\n// Styled container for each search result item\r\nconst ItemContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 12px;\r\n  background-color: #f9f9f9;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  margin-bottom: 8px;\r\n  transition: background-color 0.3s, box-shadow 0.3s;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: #eaeaea;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  }\r\n`;\r\n\r\n// Styled container for any thumbnail or icon\r\nconst Thumbnail = styled.div`\r\n  width: 40px;\r\n  height: 40px;\r\n  background-color: #dcdcdc;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 12px;\r\n\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n    border-radius: 50%;\r\n  }\r\n`;\r\n\r\n// Styled text container\r\nconst TextContainer = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\n// Styled title\r\nconst Title = styled.div`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #333;\r\n  margin-bottom: 4px;\r\n`;\r\n\r\n// Styled description\r\nconst Description = styled.div`\r\n  font-size: 14px;\r\n  color: #666;\r\n`;\r\n\r\nconst SearchResultItem = ({ data }) => {\r\n  const { title, description, thumbnail } = data;\r\n\r\n  return (\r\n    <ItemContainer>\r\n      {thumbnail && (\r\n        <Thumbnail>\r\n          <img src={thumbnail} alt={`${title} thumbnail`} />\r\n        </Thumbnail>\r\n      )}\r\n      <TextContainer>\r\n        {title && <Title>{title}</Title>}\r\n        {description && <Description>{description}</Description>}\r\n      </TextContainer>\r\n    </ItemContainer>\r\n  );\r\n};\r\n\r\nSearchResultItem.propTypes = {\r\n  data: PropTypes.shape({\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    thumbnail: PropTypes.string, // URL to a thumbnail image\r\n  }).isRequired,\r\n};\r\n\r\nexport default SearchResultItem;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport BottomDrawer from \"../../atoms/Drawers/BottomDrawer\";\r\nimport SearchDrawer from \"./SearchDrawer\";\r\nimport FilterDrawer from \"./FilterDrawer\";\r\nimport SearchButton from \"./SearchButton\";\r\nimport FilterButton from \"./FilterButton\";\r\nimport SearchResultItem from \"./SearchResultItem\";\r\n\r\n// Styled components...\r\nconst ResultsWrapper = styled.div`\r\n  margin-top: 16px;\r\n  padding: 16px;\r\n  background-color: #f9f9f9;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst ButtonsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst SearchPageDrawer = ({\r\n  trendingItems,\r\n  searchResults,\r\n  filters,       // Now passed as a prop\r\n  sortOptions,   // Now passed as a prop\r\n}) => {\r\n  const [isSearchDrawerOpen, setSearchDrawerOpen] = useState(false);\r\n  const [isFilterDrawerOpen, setFilterDrawerOpen] = useState(false);\r\n\r\n  // Separate states for the search input and the search term used for filtering\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const [selectedFilters, setSelectedFilters] = useState({});\r\n  const [selectedSortOption, setSelectedSortOption] = useState(\"\");\r\n\r\n  // Handlers for opening and closing drawers\r\n  const handleSearchDrawerOpen = () => setSearchDrawerOpen(true);\r\n  const handleSearchDrawerClose = () => setSearchDrawerOpen(false);\r\n\r\n  const handleFilterDrawerOpen = () => setFilterDrawerOpen(true);\r\n  const handleFilterDrawerClose = () => setFilterDrawerOpen(false);\r\n\r\n  // Handler for search input change in the drawer\r\n  const handleQueryChange = (newQuery) => {\r\n    setSearchInput(newQuery);\r\n  };\r\n\r\n  // Handler for submitting the search\r\n  const handleSearchSubmit = () => {\r\n    setSearchTerm(searchInput); // Update the search term for filtering main results\r\n    setSearchInput(\"\"); // Clear the search input in the drawer\r\n    setSelectedFilters({}); // Reset filters when a new search is submitted\r\n    setSelectedSortOption(\"\"); // Reset sort option if desired\r\n    setSearchDrawerOpen(false); // Close search drawer\r\n  };\r\n\r\n  const handleFilterChange = (filters) => {\r\n    setSelectedFilters(filters);\r\n    setFilterDrawerOpen(false); // Close filter drawer\r\n  };\r\n\r\n  const handleSortChange = (newSortOption) => {\r\n    setSelectedSortOption(newSortOption);\r\n  };\r\n\r\n  // Compute filtered results based on searchTerm and selected filters\r\n  const filteredResults = searchResults.filter((result) => {\r\n    // Apply searchTerm filtering\r\n    const matchesQuery =\r\n      searchTerm === \"\" ||\r\n      result.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n\r\n    if (!matchesQuery) {\r\n      return false;\r\n    }\r\n\r\n    // Apply filters\r\n    let matchesFilters = true;\r\n    for (const [filterKey, filterValue] of Object.entries(selectedFilters)) {\r\n      if (\r\n        filterValue !== undefined &&\r\n        filterValue !== null &&\r\n        filterValue !== \"\"\r\n      ) {\r\n        if (typeof filterValue === \"boolean\") {\r\n          // Handle toggle filters\r\n          if (result[filterKey] !== filterValue) {\r\n            matchesFilters = false;\r\n            break;\r\n          }\r\n        } else {\r\n          // Handle other filters\r\n          if (result[filterKey] !== filterValue) {\r\n            matchesFilters = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return matchesFilters;\r\n  });\r\n\r\n  // Apply sorting to the filtered results\r\n  const sortedResults = [...filteredResults]; // Create a copy to avoid mutating the original array\r\n\r\n  if (selectedSortOption) {\r\n    sortedResults.sort((a, b) => {\r\n      switch (selectedSortOption) {\r\n        case \"title_asc\":\r\n          return a.title.localeCompare(b.title);\r\n        case \"title_desc\":\r\n          return b.title.localeCompare(a.title);\r\n        case \"date_newest\":\r\n          return new Date(b.date) - new Date(a.date);\r\n        case \"date_oldest\":\r\n          return new Date(a.date) - new Date(b.date);\r\n        default:\r\n          return 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Custom renderer for search results\r\n  const renderSearchResult = (result, index) => (\r\n    <SearchResultItem key={index} data={result} />\r\n  );\r\n\r\n  // Custom renderer for trending items\r\n  const renderTrendingItem = (item, index) => (\r\n    <SearchResultItem\r\n      key={index}\r\n      data={{\r\n        title: item,\r\n        description: \"Trending topic\",\r\n        thumbnail: null,\r\n      }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <ButtonsContainer>\r\n        <SearchButton onClick={handleSearchDrawerOpen} />\r\n        <FilterButton onClick={handleFilterDrawerOpen} />\r\n      </ButtonsContainer>\r\n      {sortedResults.length > 0 ? (\r\n        <ResultsWrapper>\r\n          <h3>Search Results</h3>\r\n          {sortedResults.map((result, index) =>\r\n            renderSearchResult(result, index)\r\n          )}\r\n        </ResultsWrapper>\r\n      ) : (\r\n        <ResultsWrapper>\r\n          <h3>No Results Found</h3>\r\n        </ResultsWrapper>\r\n      )}\r\n      {/* Search Drawer */}\r\n      <BottomDrawer\r\n        isOpen={isSearchDrawerOpen}\r\n        onClose={handleSearchDrawerClose}\r\n        transitionDuration={100}\r\n        height=\"100vh\"\r\n      >\r\n        <SearchDrawer\r\n          trendingItems={trendingItems}\r\n          query={searchInput} // Use searchInput for the input field\r\n          onQueryChange={handleQueryChange}\r\n          searchResults={searchResults} // Pass full search results\r\n          closeDrawer={handleSearchDrawerClose}\r\n          onSearchSubmit={handleSearchSubmit}\r\n          renderSearchResult={renderSearchResult}\r\n          renderTrendingItem={renderTrendingItem}\r\n          isOpen={isSearchDrawerOpen} // Pass isOpen prop to SearchDrawer\r\n        />\r\n      </BottomDrawer>\r\n      {/* Filter Drawer */}\r\n      <BottomDrawer\r\n        isOpen={isFilterDrawerOpen}\r\n        onClose={handleFilterDrawerClose}\r\n        transitionDuration={300}\r\n        height=\"60vh\"\r\n      >\r\n        <FilterDrawer\r\n          filters={filters}\r\n          selectedFilters={selectedFilters}\r\n          onFilterChange={handleFilterChange}\r\n          closeDrawer={handleFilterDrawerClose}\r\n          sortOptions={sortOptions}\r\n          selectedSortOption={selectedSortOption}\r\n          onSortChange={handleSortChange}\r\n        />\r\n      </BottomDrawer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPageDrawer;\r\n","// src/components/Drawers/BottomDrawer.jsx\r\n\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst DrawerContainer = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  z-index: 50;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  pointer-events: ${({ isOpen }) => (isOpen ? \"auto\" : \"none\")};\r\n`;\r\n\r\nconst BackgroundOverlay = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n`;\r\n\r\nconst Drawer = styled.div`\r\n  width: 100%;\r\n  max-width: ${({ maxWidth }) => maxWidth};\r\n  height: ${({ autoHeight, height }) => (autoHeight ? \"auto\" : height)};\r\n  background-color: white;\r\n  ${({ noRoundedCorners }) =>\r\n    noRoundedCorners\r\n      ? css`\r\n          border-radius: 0;\r\n        `\r\n      : css`\r\n          border-radius: 16px 16px 0 0;\r\n        `}\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  transform: ${({ isOpen }) => (isOpen ? \"translateY(0)\" : \"translateY(100%)\")};\r\n  transition: transform ${({ transitionDuration }) => transitionDuration}ms ease-in-out,\r\n    opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  width: 48px;\r\n  height: 4px;\r\n  background-color: #d1d5db;\r\n  border-radius: 9999px;\r\n  margin: 8px auto;\r\n  display: ${({ hideHandle }) => (hideHandle ? \"none\" : \"block\")};\r\n`;\r\n\r\nconst DrawerContent = styled.div`\r\n  flex: 1;\r\n  overflow-y: ${({ autoHeight }) => (autoHeight ? \"visible\" : \"auto\")};\r\n`;\r\n\r\nexport default function BottomDrawer({\r\n  isOpen,\r\n  onClose,\r\n  children,\r\n  transitionDuration = 300,\r\n  height = \"80vh\",\r\n  autoHeight = false,\r\n  maxWidth = \"600px\",\r\n  hideHandle = false, // New prop to hide handle\r\n  noRoundedCorners = false, // New prop to remove rounded corners\r\n}) {\r\n  const drawerRef = useRef();\r\n\r\n  // Close the drawer when clicking outside of it\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (drawerRef.current && !drawerRef.current.contains(event.target)) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"hidden\"; // Prevent background scrolling\r\n    } else {\r\n      document.body.style.overflow = \"auto\";\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"auto\";\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  return createPortal(\r\n    <DrawerContainer isOpen={isOpen} transitionDuration={transitionDuration}>\r\n      {/* Background overlay */}\r\n      <BackgroundOverlay isOpen={isOpen} onClick={onClose} transitionDuration={transitionDuration} />\r\n\r\n      {/* Drawer content */}\r\n      <Drawer\r\n        ref={drawerRef}\r\n        isOpen={isOpen}\r\n        transitionDuration={transitionDuration}\r\n        height={height}\r\n        autoHeight={autoHeight}\r\n        maxWidth={maxWidth}\r\n        noRoundedCorners={noRoundedCorners} // Pass the new prop\r\n      >\r\n        {/* Drawer handle */}\r\n        <Handle hideHandle={hideHandle} /> {/* Pass the new prop */}\r\n        {/* Scrollable or auto-adjusted content area */}\r\n        <DrawerContent autoHeight={autoHeight}>{children}</DrawerContent>\r\n      </Drawer>\r\n    </DrawerContainer>,\r\n    document.body\r\n  );\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ChevronUpDownIcon } from '../../Branding/icons/Icons';\r\n\r\nconst FieldContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\n\r\nconst FieldName = styled.div`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #111827;\r\n  margin-right: auto;\r\n`;\r\n\r\nconst FieldValue = styled.div`\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #6b7280;\r\n  cursor: pointer;\r\n  margin-right: 12px;\r\n`;\r\n\r\nconst Dropdown = styled.select`\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #111827;\r\n  border: 1px solid #d1d5db; /* Equivalent to border-gray-300 */\r\n  border-radius: 4px;\r\n  padding: 4px 8px;\r\n  width: auto;\r\n  background: white;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ChevronWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  color: #6b7280;\r\n  transition: color 0.3s;\r\n\r\n  &:hover {\r\n    color: #4b5563;\r\n  }\r\n`;\r\n\r\nconst SelectField = ({ name, value, options, onChange, placeholder = 'Select value...' }) => {\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n  const dropdownRef = useRef(null);\r\n\r\n  const toggleDropdown = () => {\r\n    setIsDropdownOpen(true);\r\n  };\r\n\r\n  const handleSelectChange = (e) => {\r\n    const newValue = e.target.value;\r\n    setIsDropdownOpen(false);\r\n    onChange(newValue);\r\n  };\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setIsDropdownOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  // Find the label for the current value\r\n  const getLabelForValue = (val) => {\r\n    const option = options.find((opt) =>\r\n      typeof opt === 'object' ? opt.value === val : opt === val\r\n    );\r\n    return typeof option === 'object' ? option.label : option;\r\n  };\r\n\r\n  return (\r\n    <FieldContainer ref={dropdownRef}>\r\n      <FieldName>{name}</FieldName>\r\n      {isDropdownOpen ? (\r\n        <Dropdown\r\n          value={value}\r\n          onChange={handleSelectChange}\r\n          autoFocus\r\n          onBlur={() => setIsDropdownOpen(false)}\r\n        >\r\n          <option value=\"\" disabled>\r\n            {placeholder}\r\n          </option>\r\n          {options.map((option) =>\r\n            typeof option === 'object' ? (\r\n              <option key={option.value} value={option.value}>\r\n                {option.label}\r\n              </option>\r\n            ) : (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            )\r\n          )}\r\n        </Dropdown>\r\n      ) : (\r\n        <FieldValue onClick={toggleDropdown}>\r\n          {value ? getLabelForValue(value) : placeholder}\r\n        </FieldValue>\r\n      )}\r\n      <ChevronWrapper onClick={toggleDropdown}>\r\n        <ChevronUpDownIcon className=\"w-6 h-6\" />\r\n      </ChevronWrapper>\r\n    </FieldContainer>\r\n  );\r\n};\r\n\r\nexport default SelectField;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FieldContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n`;\r\n\r\nconst FieldName = styled.div`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #111827;\r\n  margin-right: auto;\r\n`;\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst ToggleButton = styled.div`\r\n  width: 40px;\r\n  height: 20px;\r\n  border-radius: 12px;\r\n  background-color: ${(props) => (props.checked ? \"#3b82f6\" : \"#d1d5db\")};\r\n  position: relative;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n\r\n  &:before {\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 16px;\r\n    height: 16px;\r\n    background-color: white;\r\n    border-radius: 50%;\r\n    top: 2px;\r\n    left: ${(props) => (props.checked ? \"20px\" : \"2px\")};\r\n    transition: left 0.3s;\r\n  }\r\n`;\r\n\r\nconst ToggleField = ({ name, value, onChange }) => {\r\n  const handleToggleChange = () => {\r\n    onChange(!value);\r\n  };\r\n\r\n  return (\r\n    <FieldContainer>\r\n      <FieldName>{name}</FieldName>\r\n      <ToggleWrapper>\r\n        {/* Rename isChecked to checked when passing to the styled component */}\r\n        <ToggleButton checked={value} onClick={handleToggleChange} />\r\n      </ToggleWrapper>\r\n    </FieldContainer>\r\n  );\r\n};\r\nexport default ToggleField;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { SearchIcon2 } from \"../../Branding/icons/Icons\"; // Assuming you have an icon component\r\n\r\n// Container for the input and icon\r\nconst SearchBarContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  background-color: #f5f5f5;\r\n  border: 1px solid #dcdcdc;\r\n  border-radius: 25px;\r\n  padding: 8px 16px;\r\n  transition: border-color 0.3s, box-shadow 0.3s;\r\n`;\r\n\r\n// Style for the input field\r\nconst StyledInput = styled.input`\r\n  flex: 1;\r\n  border: none;\r\n  background: transparent;\r\n  font-size: 16px;\r\n  color: #333;\r\n  outline: none;\r\n\r\n  &::placeholder {\r\n    color: #aaa;\r\n  }\r\n`;\r\n\r\n// Style for the icon\r\nconst StyledIcon = styled.div`\r\n  margin-right: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #333;\r\n\r\n  svg {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n`;\r\n\r\nconst SearchBar2 = ({ value, onChange, placeholder, onKeyDown, inputRef }) => {\r\n  return (\r\n    <SearchBarContainer>\r\n      <StyledIcon>\r\n        <SearchIcon2 /> {/* Replace with your actual icon component */}\r\n      </StyledIcon>\r\n\r\n      <StyledInput\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        onKeyDown={onKeyDown} // Pass the onKeyDown handler\r\n        ref={inputRef} // Assign the ref to the input element\r\n      />\r\n    </SearchBarContainer>\r\n  );\r\n};\r\n\r\nSearchBar2.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  placeholder: PropTypes.string,\r\n  onKeyDown: PropTypes.func, // Ensure onKeyDown is optional\r\n  inputRef: PropTypes.object, // Prop type for the ref\r\n};\r\n\r\nSearchBar2.defaultProps = {\r\n  placeholder: \"Search...\",\r\n  onKeyDown: null,\r\n  inputRef: null,\r\n};\r\n\r\nexport default SearchBar2;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport SearchBar2 from \"./SearchBar2\";\r\n\r\n// Styled components...\r\nconst SearchBarContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n`;\r\n\r\nconst CancelButton = styled.button`\r\n  background: none;\r\n  border: none;\r\n  color: black;\r\n  font-size: 16px;\r\n  margin-left: 8px;\r\n  cursor: pointer;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 16px;\r\n`;\r\n\r\nconst SearchDrawer = ({\r\n  trendingItems,\r\n  query,\r\n  onQueryChange,\r\n  searchResults,\r\n  closeDrawer,\r\n  onSearchSubmit,\r\n  renderSearchResult,\r\n  renderTrendingItem,\r\n  isOpen, // Accept isOpen prop\r\n}) => {\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (isOpen && inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isOpen]); // Dependency array includes isOpen\r\n\r\n  const handleInputChange = (e) => {\r\n    onQueryChange(e.target.value);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\" && query.trim() !== \"\") {\r\n      onSearchSubmit(); // No need to pass the query, it's managed by the parent\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    onQueryChange(\"\"); // Clear the input when closing\r\n    closeDrawer();\r\n  };\r\n\r\n  // Filter searchResults based on query\r\n  const filteredResults = searchResults.filter((result) =>\r\n    result.title.toLowerCase().includes(query.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <Wrapper>\r\n      <SearchBarContainer>\r\n        <SearchBar2\r\n          value={query}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Search for...\"\r\n          onKeyDown={handleKeyDown}\r\n          inputRef={inputRef} // Pass the ref to SearchBar2\r\n        />\r\n        <CancelButton onClick={handleClose}>Cancel</CancelButton>\r\n      </SearchBarContainer>\r\n      <div>\r\n        {query === \"\" ? (\r\n          <div>\r\n            <h3>Trending</h3>\r\n            {trendingItems.map((item, index) => renderTrendingItem(item, index))}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h3>Search Results</h3>\r\n            {filteredResults.length > 0 ? (\r\n              filteredResults.map((result, index) =>\r\n                renderSearchResult(result, index)\r\n              )\r\n            ) : (\r\n              <p>No results found.</p>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nSearchDrawer.propTypes = {\r\n  trendingItems: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  query: PropTypes.string.isRequired,\r\n  onQueryChange: PropTypes.func.isRequired,\r\n  searchResults: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      description: PropTypes.string,\r\n      thumbnail: PropTypes.string,\r\n    })\r\n  ).isRequired,\r\n  closeDrawer: PropTypes.func.isRequired,\r\n  onSearchSubmit: PropTypes.func.isRequired,\r\n  renderSearchResult: PropTypes.func.isRequired,\r\n  renderTrendingItem: PropTypes.func.isRequired,\r\n  isOpen: PropTypes.bool.isRequired, // Add prop type for isOpen\r\n};\r\n\r\nexport default SearchDrawer;\r\n"],"names":[],"sourceRoot":""}