{"version":3,"file":"stories-pages-search-Filter-stories.1ca3cedf.iframe.bundle.js","mappings":";;;;;AASA;;;;AAMA;;;;;AAOA;;AAQA;;;;;ACpBA;;;AAKA;AACA;AACA;;;;;;;;AAQA;;;;;;;ACZA;AACA;AACA;AACA;;;;AAMA;AACA;AACA;;AAIA;AACA;;AAEA;;AAIA;;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;AAQA;AACA;;AAIA;AACA;;;;;;;;;;;;;;;;;;;;AC9BA;;;;AAMA;;;AAKA;;AAOA;;;;;;;;;;;;;;;;;;;ACpBA;;;;;AAOA;;;AAKA;;AAOA;;AC1BA;;;;;;;ACPA;;;;;;;AAYA;;;;;;;;;;;AAWA;AAGA;;AAEA;;AAIA;;AAEA;AAEA;AAEA;AAEA;;AAGA;AAGA;;AAEA;;;;;;;;;;;;;AAeA;;;;AAQA;;;AAQA;;;;;ACrFA;;;;AAMA;;;;AAMA;;;;;;;;;;;;AAcA;AACA;;;;;;AAMA;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;;AC7FA;;;;;;;;;;AAYA;AAGA;AACA;AACA;AACA;;;;;;AAQA;;;AAGA;;;AAIA;;;;;;;AASA;AACA;;;ACxCA;;;AAKA;;AAOA","sources":["webpack://storybook/./src/components/search/filter/Filter2.jsx","webpack://storybook/./src/components/search/filter/FilterHorizontal.jsx","webpack://storybook/./src/components/atoms/overlays/drawers/BottomDrawer.jsx","webpack://storybook/./src/components/search/filter/FilterDrawer.jsx","webpack://storybook/./src/components/search/filter/FilterModal.jsx","webpack://storybook/./src/stories/pages/search/Filter.stories.js","webpack://storybook/./src/components/atoms/overlays/modals/Modal.jsx","webpack://storybook/./src/components/form/inputs/rangeInputs/RangeSlider.jsx","webpack://storybook/./src/components/form/inputs/selectInputs/SelectInput.jsx","webpack://storybook/./src/components/search/filter/Filter.jsx"],"sourcesContent":["// Filter2.js\r\nimport React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Filter2Container = styled.div`\r\n  margin-bottom: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n`;\r\n\r\nconst FilterGroup = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n`;\r\n\r\nconst FilterLabel = styled.label`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst GroupTitle = styled.h4`\r\n  margin: 0;\r\n`;\r\n\r\nconst Filter2 = ({ filters, onChange }) => {\r\n  // Initialize state: an object where each key is a filter category and value is an array of selected options for that category\r\n  const initialState = filters.reduce((acc, group) => {\r\n    acc[group.category] = group.options.filter(opt => opt.initial).map(opt => opt.value);\r\n    return acc;\r\n  }, {});\r\n\r\n  const [selectedFilters, setSelectedFilters] = useState(initialState);\r\n\r\n  const handleToggle = (category, value) => {\r\n    const current = selectedFilters[category] || [];\r\n    const newSelected = current.includes(value)\r\n      ? current.filter(v => v !== value)\r\n      : [...current, value];\r\n\r\n    const newState = {\r\n      ...selectedFilters,\r\n      [category]: newSelected,\r\n    };\r\n\r\n    setSelectedFilters(newState);\r\n    if (onChange) {\r\n      onChange(newState);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Filter2Container>\r\n      {filters.map(group => (\r\n        <div key={group.category}>\r\n          <GroupTitle>{group.label || group.category}</GroupTitle>\r\n          <FilterGroup>\r\n            {group.options.map(opt => (\r\n              <FilterLabel key={`${group.category}-${opt.value}`}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={(selectedFilters[group.category] || []).includes(opt.value)}\r\n                  onChange={() => handleToggle(group.category, opt.value)}\r\n                />\r\n                {opt.label}\r\n              </FilterLabel>\r\n            ))}\r\n          </FilterGroup>\r\n        </div>\r\n      ))}\r\n    </Filter2Container>\r\n  );\r\n};\r\n\r\nexport default Filter2;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport FilterLogic from './FilterLogic';\r\n\r\n// Styled components for horizontal layout\r\nconst HorizontalFilterContainer = styled.div`\r\n  display: flex;\r\n  gap: 1rem;\r\n  overflow-x: auto;\r\n  padding: 1rem 0;\r\n`;\r\n\r\nconst FilterButton = styled.button`\r\n  flex: 0 0 auto;\r\n  padding: 0.5rem 1rem;\r\n  border: 1px solid ${props => (props.active ? '#007bff' : '#ccc')};\r\n  background-color: ${props => (props.active ? '#007bff' : '#fff')};\r\n  color: ${props => (props.active ? '#fff' : '#000')};\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  white-space: nowrap;\r\n  \r\n  &:hover {\r\n    opacity: 0.9;\r\n  }\r\n`;\r\n\r\nconst filtersConfig = {\r\n  status: {\r\n    category: 'status',\r\n    label: 'Status',\r\n    type: 'buttons', \r\n    options: [\r\n      { value: 'completed', label: 'Completed', initial: false },\r\n      { value: 'pending', label: 'Pending', initial: false },\r\n      { value: 'inProgress', label: 'In Progress', initial: false },\r\n    ],\r\n  },\r\n  priority: {\r\n    category: 'priority',\r\n    label: 'Priority',\r\n    type: 'buttons', \r\n    options: [\r\n      { value: 'high', label: 'High', initial: false },\r\n      { value: 'medium', label: 'Medium', initial: false },\r\n      { value: 'low', label: 'Low', initial: false },\r\n    ],\r\n  },\r\n};\r\n\r\nconst FilterHorizontal = ({ onChange }) => (\r\n  <FilterLogic\r\n    filters={Object.values(filtersConfig)}\r\n    onChange={selectedFilters => {\r\n      if (onChange) {\r\n        onChange(selectedFilters);\r\n      }\r\n    }}\r\n  >\r\n    {({ selectedFilters, setSelection }) => {\r\n      // Render horizontal rows for each filter category\r\n      return (\r\n        <div>\r\n          {Object.values(filtersConfig).map(filterConfig => {\r\n            // Get current active selection for this category\r\n            const currentSelection = selectedFilters[filterConfig.category] || [];\r\n            // Sort options: active ones first\r\n            const sortedOptions = [...filterConfig.options].sort((a, b) => {\r\n              const aActive = currentSelection.includes(a.value);\r\n              const bActive = currentSelection.includes(b.value);\r\n              return aActive === bActive ? 0 : aActive ? -1 : 1;\r\n            });\r\n\r\n            return (\r\n              <div key={filterConfig.category}>\r\n                <h5>{filterConfig.label}</h5>\r\n                <HorizontalFilterContainer>\r\n                  {sortedOptions.map(option => {\r\n                    const isActive = currentSelection.includes(option.value);\r\n                    return (\r\n                      <FilterButton\r\n                        key={option.value}\r\n                        active={isActive}\r\n                        onClick={() => {\r\n                          // Toggle selection on click\r\n                          if (isActive) {\r\n                            // Deactivate by setting selection to empty array\r\n                            setSelection(filterConfig.category, '');\r\n                          } else {\r\n                            // Activate selection with this value\r\n                            setSelection(filterConfig.category, option.value);\r\n                          }\r\n                        }}\r\n                      >\r\n                        {option.label}\r\n                      </FilterButton>\r\n                    );\r\n                  })}\r\n                </HorizontalFilterContainer>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }}\r\n  </FilterLogic>\r\n);\r\n\r\nexport default FilterHorizontal;\r\n","// src/components/Drawers/BottomDrawer.jsx\r\n\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst DrawerContainer = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  z-index: 50;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  pointer-events: ${({ isOpen }) => (isOpen ? \"auto\" : \"none\")};\r\n`;\r\n\r\nconst BackgroundOverlay = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n`;\r\n\r\nconst Drawer = styled.div`\r\n  width: 100%;\r\n  max-width: ${({ maxWidth }) => maxWidth};\r\n  height: ${({ autoHeight, height }) => (autoHeight ? \"auto\" : height)};\r\n  background-color: white;\r\n  ${({ noRoundedCorners }) =>\r\n    noRoundedCorners\r\n      ? css`\r\n          border-radius: 0;\r\n        `\r\n      : css`\r\n          border-radius: 16px 16px 0 0;\r\n        `}\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  transform: ${({ isOpen }) => (isOpen ? \"translateY(0)\" : \"translateY(100%)\")};\r\n  transition: transform ${({ transitionDuration }) => transitionDuration}ms ease-in-out,\r\n    opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  width: 48px;\r\n  height: 4px;\r\n  background-color: #d1d5db;\r\n  border-radius: 9999px;\r\n  margin: 8px auto;\r\n  display: ${({ hideHandle }) => (hideHandle ? \"none\" : \"block\")};\r\n`;\r\n\r\nconst DrawerContent = styled.div`\r\n  flex: 1;\r\n  overflow-y: ${({ autoHeight }) => (autoHeight ? \"visible\" : \"auto\")};\r\n`;\r\n\r\nexport default function BottomDrawer({\r\n  isOpen,\r\n  onClose,\r\n  children,\r\n  transitionDuration = 300,\r\n  height = \"80vh\",\r\n  autoHeight = false,\r\n  maxWidth = \"600px\",\r\n  hideHandle = false, // New prop to hide handle\r\n  noRoundedCorners = false, // New prop to remove rounded corners\r\n}) {\r\n  const drawerRef = useRef();\r\n\r\n  // Close the drawer when clicking outside of it\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (drawerRef.current && !drawerRef.current.contains(event.target)) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"hidden\"; // Prevent background scrolling\r\n    } else {\r\n      document.body.style.overflow = \"auto\";\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"auto\";\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  return createPortal(\r\n    <DrawerContainer isOpen={isOpen} transitionDuration={transitionDuration}>\r\n      {/* Background overlay */}\r\n      <BackgroundOverlay isOpen={isOpen} onClick={onClose} transitionDuration={transitionDuration} />\r\n\r\n      {/* Drawer content */}\r\n      <Drawer\r\n        ref={drawerRef}\r\n        isOpen={isOpen}\r\n        transitionDuration={transitionDuration}\r\n        height={height}\r\n        autoHeight={autoHeight}\r\n        maxWidth={maxWidth}\r\n        noRoundedCorners={noRoundedCorners} // Pass the new prop\r\n      >\r\n        {/* Drawer handle */}\r\n        <Handle hideHandle={hideHandle} /> {/* Pass the new prop */}\r\n        {/* Scrollable or auto-adjusted content area */}\r\n        <DrawerContent autoHeight={autoHeight}>{children}</DrawerContent>\r\n      </Drawer>\r\n    </DrawerContainer>,\r\n    document.body\r\n  );\r\n}\r\n","// src/components/FilterDrawer.jsx\r\nimport React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport BottomDrawer from '../../atoms/overlays/drawers/BottomDrawer'; // Adjust the import path as necessary\r\nimport FilterLogic from './FilterLogic';\r\nimport RangeSlider from '../../form/inputs/rangeInputs/RangeSlider';  // Adjust import paths as needed\r\nimport SelectInput from '../../form/inputs/selectInputs/SelectInput';\r\nimport { FilterIcon } from '../../Branding/icons/Icons';\r\n\r\n// Styled components for button and filter layout\r\nconst Button = styled.button`\r\n  display: flex;\r\n  flex-direction: row;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1.2rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease-in-out;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n\r\n  .svg {\r\n    margin-right: 0.5rem;\r\n    width: 24px;\r\n    height: 24px;\r\n    align-self: center;\r\n  }\r\n\r\n`;\r\n\r\nconst FilterContainer = styled.div`\r\n  display: grid;\r\n  gap: 2rem;\r\n  padding: 1rem;\r\n`;\r\n\r\nconst GroupContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst GroupLabel = styled.h5`\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\n// Define filter configurations explicitly\r\nconst filtersConfig = {\r\n  status: {\r\n    category: 'status',\r\n    label: 'Status',\r\n    type: 'dropdown',\r\n    options: [\r\n      { value: 'completed', label: 'Completed', initial: false },\r\n      { value: 'pending', label: 'Pending', initial: false },\r\n      { value: 'inProgress', label: 'In Progress', initial: false },\r\n    ],\r\n  },\r\n  priority: {\r\n    category: 'priority',\r\n    label: 'Priority',\r\n    type: 'range',\r\n    options: [\r\n      { value: 'high', label: 'High', initial: false },\r\n      { value: 'medium', label: 'Medium', initial: false },\r\n      { value: 'low', label: 'Low', initial: false },\r\n    ],\r\n  },\r\n};\r\n\r\nconst FilterDrawer = ({ onChange }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleOpenDrawer = () => setIsOpen(true);\r\n  const handleCloseDrawer = () => setIsOpen(false);\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={handleOpenDrawer}><FilterIcon className='svg'/> Filters</Button>\r\n      <BottomDrawer isOpen={isOpen} onClose={handleCloseDrawer}>\r\n        <FilterLogic\r\n          filters={Object.values(filtersConfig)}\r\n          onChange={selectedFilters => {\r\n            if (onChange) {\r\n              onChange(selectedFilters);\r\n            }\r\n          }}\r\n        >\r\n          {({ selectedFilters, setSelection }) => {\r\n            const statusFilter = filtersConfig.status;\r\n            const priorityFilter = filtersConfig.priority;\r\n\r\n            return (\r\n              <FilterContainer>\r\n                {/* Status Dropdown */}\r\n                <GroupContainer>\r\n                  <GroupLabel>{statusFilter.label}</GroupLabel>\r\n                  <SelectInput\r\n                    name={statusFilter.category}\r\n                    label={`Select ${statusFilter.label}`}\r\n                    value={\r\n                      selectedFilters[statusFilter.category] &&\r\n                      selectedFilters[statusFilter.category][0]\r\n                        ? selectedFilters[statusFilter.category][0]\r\n                        : ''\r\n                    }\r\n                    onChange={(e) =>\r\n                      setSelection(statusFilter.category, e.target.value)\r\n                    }\r\n                    options={statusFilter.options}\r\n                    color=\"#000\"\r\n                  />\r\n                </GroupContainer>\r\n\r\n                {/* Priority Range Slider */}\r\n                <GroupContainer>\r\n                  <GroupLabel>{priorityFilter.label}</GroupLabel>\r\n                  <RangeSlider\r\n                    min={0}\r\n                    max={priorityFilter.options.length - 1}\r\n                    label={priorityFilter.label}\r\n                    onChange={(index) => {\r\n                      const value = priorityFilter.options[index]?.value;\r\n                      if (value) setSelection(priorityFilter.category, value);\r\n                    }}\r\n                  />\r\n                </GroupContainer>\r\n              </FilterContainer>\r\n            );\r\n          }}\r\n        </FilterLogic>\r\n      </BottomDrawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterDrawer;\r\n","// src/components/FilterModal.jsx\r\nimport React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Modal from '../../atoms/overlays/modals/Modal'; // Adjust the import path as necessary\r\nimport FilterLogic from './FilterLogic';\r\nimport RangeSlider from '../../form/inputs/rangeInputs/RangeSlider';\r\nimport SelectInput from '../../form/inputs/selectInputs/SelectInput';\r\n\r\n// Styled components for button and filter layout\r\nconst Button = styled.button`\r\n  padding: 10px 20px;\r\n  background-color: #2563eb;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease-in-out;\r\n  margin: 1rem;\r\n\r\n  &:hover {\r\n    background-color: #1d4ed8;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.5);\r\n  }\r\n`;\r\n\r\nconst FilterContainer = styled.div`\r\n  display: grid;\r\n  gap: 2rem;\r\n  padding: 1rem;\r\n  width: 500px;\r\n`;\r\n\r\nconst GroupContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst GroupLabel = styled.h5`\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\n// Define filter configurations explicitly\r\nconst filtersConfig = {\r\n  status: {\r\n    category: 'status',\r\n    label: 'Status',\r\n    type: 'dropdown',\r\n    options: [\r\n      { value: 'completed', label: 'Completed', initial: false },\r\n      { value: 'pending', label: 'Pending', initial: false },\r\n      { value: 'inProgress', label: 'In Progress', initial: false },\r\n    ],\r\n  },\r\n  priority: {\r\n    category: 'priority',\r\n    label: 'Priority',\r\n    type: 'range',\r\n    options: [\r\n      { value: 'high', label: 'High', initial: false },\r\n      { value: 'medium', label: 'Medium', initial: false },\r\n      { value: 'low', label: 'Low', initial: false },\r\n    ],\r\n  },\r\n};\r\n\r\nconst FilterModal = ({ onChange }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleOpenModal = () => setIsOpen(true);\r\n  const handleCloseModal = () => setIsOpen(false);\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={handleOpenModal}>Open Filters</Button>\r\n    \r\n      <Modal isModalOpen={isOpen} closeModal={handleCloseModal} title=\"Filters\" animate>\r\n        <FilterLogic\r\n          filters={Object.values(filtersConfig)}\r\n          onChange={selectedFilters => {\r\n            if (onChange) {\r\n              onChange(selectedFilters);\r\n            }\r\n          }}\r\n        >\r\n          {({ selectedFilters, setSelection }) => {\r\n            const statusFilter = filtersConfig.status;\r\n            const priorityFilter = filtersConfig.priority;\r\n\r\n            return (\r\n              <FilterContainer>\r\n                {/* Status Dropdown */}\r\n                <GroupContainer>\r\n                  <GroupLabel>{statusFilter.label}</GroupLabel>\r\n                  <SelectInput\r\n                    name={statusFilter.category}\r\n                    label={`Select ${statusFilter.label}`}\r\n                    value={\r\n                      selectedFilters[statusFilter.category] &&\r\n                      selectedFilters[statusFilter.category][0]\r\n                        ? selectedFilters[statusFilter.category][0]\r\n                        : ''\r\n                    }\r\n                    onChange={(e) =>\r\n                      setSelection(statusFilter.category, e.target.value)\r\n                    }\r\n                    options={statusFilter.options}\r\n                    color=\"#000\"\r\n                  />\r\n                </GroupContainer>\r\n\r\n                {/* Priority Range Slider */}\r\n                <GroupContainer>\r\n                  <GroupLabel>{priorityFilter.label}</GroupLabel>\r\n                  <RangeSlider\r\n                    min={0}\r\n                    max={priorityFilter.options.length - 1}\r\n                    label={priorityFilter.label}\r\n                    onChange={(index) => {\r\n                      const value = priorityFilter.options[index]?.value;\r\n                      if (value) setSelection(priorityFilter.category, value);\r\n                    }}\r\n                  />\r\n                </GroupContainer>\r\n              </FilterContainer>\r\n            );\r\n          }}\r\n        </FilterLogic>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterModal;\r\n","// AllFilters.stories.jsx\r\nimport React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Filter from '../../../components/search/filter/Filter';\r\nimport Filter2 from '../../../components/search/filter/Filter2';\r\nimport FilterHorizontal from '../../../components/search/filter/FilterHorizontal';\r\nimport FilterDrawer from '../../../components/search/filter/FilterDrawer';\r\nimport FilterModal from '../../../components/search/filter/FilterModal';\r\n\r\n// Default export for Storybook categorization and documentation\r\nexport default {\r\n  title: 'Pages/Search/Filters',\r\n\r\n};\r\n\r\n// Styled container for consistent layout in stories\r\nconst StoryContainer = styled.div`\r\n  padding: 2rem;\r\n`;\r\n\r\n// Mock onChange handler\r\nconst mockOnChange = (selected) => {\r\n  console.log('Selected filters:', selected);\r\n};\r\n\r\nexport const DefaultFilter = () => (\r\n  <StoryContainer>\r\n    <h3>Filter Component (Dropdown & Range Slider)</h3>\r\n    <Filter onChange={mockOnChange} />\r\n  </StoryContainer>\r\n);\r\n\r\nexport const MultiGroupFilter = () => {\r\n  const [selectedFilters, setSelectedFilters] = useState({});\r\n  const filters = [\r\n    {\r\n      category: 'status',\r\n      label: 'Status',\r\n      options: [\r\n        { value: 'completed', label: 'Completed', initial: true },\r\n        { value: 'pending', label: 'Pending' },\r\n        { value: 'inProgress', label: 'In Progress' },\r\n      ],\r\n    },\r\n    {\r\n      category: 'priority',\r\n      label: 'Priority',\r\n      options: [\r\n        { value: 'high', label: 'High' },\r\n        { value: 'medium', label: 'Medium', initial: true },\r\n        { value: 'low', label: 'Low' },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const handleFilterChange = (filters) => {\r\n    setSelectedFilters(filters);\r\n    console.log('Selected filters:', filters);\r\n  };\r\n\r\n  return (\r\n    <StoryContainer>\r\n      <h3>Filter2 Component (Multi-Group)</h3>\r\n      <Filter2 filters={filters} onChange={handleFilterChange} />\r\n    </StoryContainer>\r\n  );\r\n};\r\n\r\nexport const HorizontalButtonFilter = () => (\r\n  <StoryContainer>\r\n    <h3>FilterHorizontal Component (Scrollable Buttons)</h3>\r\n    <FilterHorizontal onChange={mockOnChange} />\r\n  </StoryContainer>\r\n);\r\n\r\nexport const BottomDrawerFilter = () => (\r\n  <StoryContainer>\r\n    <h3>FilterDrawer Component</h3>\r\n    <FilterDrawer onChange={mockOnChange} />\r\n  </StoryContainer>\r\n);\r\n\r\n\r\nexport const ModalFilter = () => (\r\n  <StoryContainer>\r\n    <h3>FilterModal Component</h3>\r\n    <FilterModal onChange={mockOnChange} />\r\n  </StoryContainer>\r\n);\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport styled, { keyframes, css } from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MdClose } from \"react-icons/md\";\r\n\r\n// Animations\r\nconst fadeIn = keyframes`\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst slideIn = keyframes`\r\n  from {\r\n    transform: translateY(-20px);\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\n// Styled Components\r\nconst Overlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n  ${(props) =>\r\n    props.animate &&\r\n    css`\r\n      animation: ${fadeIn} 0.3s ease-out forwards;\r\n    `}\r\n`;\r\n\r\nconst ModalContainer = styled.div`\r\n  background-color: white;\r\n  border-radius: ${(props) => (props.rounded ? \"12px\" : \"0\")};\r\n  position: relative;\r\n  width: ${(props) =>\r\n    props.fullScreen ? \"100vw\" : props.width ? props.width : \"auto\"};\r\n  height: ${(props) =>\r\n    props.fullScreen ? \"100vh\" : props.height ? props.height : \"auto\"};\r\n  max-width: ${(props) =>\r\n    props.maxWidth ? props.maxWidth : props.fullScreen ? \"100%\" : \"90%\"};\r\n  max-height: ${(props) =>\r\n    props.maxHeight ? props.maxHeight : props.fullScreen ? \"100%\" : \"90%\"};\r\n  overflow-y: auto;\r\n  ${(props) =>\r\n    props.animate &&\r\n    css`\r\n      animation: ${slideIn} 0.3s ease-out forwards;\r\n    `}\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  position: absolute;\r\n  top: 16px;\r\n  right: 16px;\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.25rem;\r\n  color: #333;\r\n\r\n  &:hover {\r\n    color: #555;\r\n  }\r\n`;\r\n\r\nconst ModalContent = styled.div``;\r\n\r\nconst ModalTitle = styled.h2`\r\n  font-size: 1.5rem;\r\n  margin-bottom: 8px;\r\n  color: #333;\r\n`;\r\n\r\nconst ModalBody = styled.div`\r\n  font-size: 1rem;\r\n  color: #555;\r\n`;\r\n\r\n// Modal Component\r\nconst Modal = ({\r\n  isModalOpen,\r\n  closeModal,\r\n  title,\r\n  children,\r\n  animate = true,\r\n  rounded = true,\r\n  fullScreen = false,\r\n  width,\r\n  height,\r\n  maxWidth,\r\n  maxHeight,\r\n  showCloseButton = true,\r\n}) => {\r\n  useEffect(() => {\r\n    if (isModalOpen) {\r\n      document.body.style.overflow = \"hidden\";\r\n    } else {\r\n      document.body.style.overflow = \"\";\r\n    }\r\n    return () => {\r\n      document.body.style.overflow = \"\";\r\n    };\r\n  }, [isModalOpen]);\r\n\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.key === \"Escape\" && isModalOpen) {\r\n        closeModal();\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", handleEsc);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleEsc);\r\n    };\r\n  }, [isModalOpen, closeModal]);\r\n\r\n  if (!isModalOpen) return null;\r\n\r\n  return ReactDOM.createPortal(\r\n    <Overlay animate={animate} onClick={closeModal}>\r\n      <ModalContainer\r\n        animate={animate}\r\n        rounded={rounded}\r\n        fullScreen={fullScreen}\r\n        width={width}\r\n        height={height}\r\n        maxWidth={maxWidth}\r\n        maxHeight={maxHeight}\r\n        onClick={(e) => e.stopPropagation()}\r\n        aria-modal=\"true\"\r\n        role=\"dialog\"\r\n        aria-labelledby=\"modal-title\"\r\n      >\r\n        {showCloseButton && (\r\n          <CloseButton onClick={closeModal} aria-label=\"Close Modal\">\r\n            <MdClose />\r\n          </CloseButton>\r\n        )}\r\n        <ModalContent>\r\n          {title && <ModalTitle id=\"modal-title\">{title}</ModalTitle>}\r\n          <ModalBody>{children}</ModalBody>\r\n        </ModalContent>\r\n      </ModalContainer>\r\n    </Overlay>,\r\n    document.getElementById(\"modal-root\")\r\n  );\r\n};\r\n\r\nModal.propTypes = {\r\n  isModalOpen: PropTypes.bool.isRequired,\r\n  closeModal: PropTypes.func.isRequired,\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n  animate: PropTypes.bool,\r\n  rounded: PropTypes.bool,\r\n  fullScreen: PropTypes.bool,\r\n  width: PropTypes.string,\r\n  height: PropTypes.string,\r\n  maxWidth: PropTypes.string,\r\n  maxHeight: PropTypes.string,\r\n  showCloseButton: PropTypes.bool,\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SliderContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 16px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #333;\r\n`;\r\n\r\nconst RangeInputContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 50px;\r\n`;\r\n\r\nconst Track = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  height: 8px;\r\n  background: #e0e0e0;\r\n  border-radius: 5px;\r\n  width: 100%;\r\n\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    left: ${(props) => props.left}%;\r\n    right: ${(props) => 100 - props.right}%;\r\n    height: 100%;\r\n    background: #A855F7;\r\n    border-radius: 5px;\r\n    z-index: 1;\r\n  }\r\n`;\r\n\r\nconst ThumbValue = styled.div`\r\n  position: absolute;\r\n  top: -10px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #A855F7;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst Slider = styled.input`\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  width: 100%;\r\n  height: 8px;\r\n  background: transparent;\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  z-index: 3;\r\n  pointer-events: none;\r\n\r\n  &::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    width: 16px;\r\n    height: 16px;\r\n    background: #A855F7;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    pointer-events: auto;\r\n  }\r\n\r\n  &::-moz-range-thumb {\r\n    width: 14px;\r\n    height: 14px;\r\n    background: #007bff;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    pointer-events: auto;\r\n  }\r\n`;\r\n\r\n\r\nconst RangeSlider = ({\r\n  min = 0,\r\n  max = 100,\r\n  step = 1,\r\n  minimumGap = 1,\r\n  label = \"Range\",\r\n  valuePrefix = \"\",\r\n  valueSuffix = \"\",\r\n  value,   // receive value as prop\r\n  onChange,\r\n}) => {\r\n  const [range, setRange] = useState(value || [min, max]);\r\n\r\n  // Update internal state when `value` prop changes\r\n  useEffect(() => {\r\n    if (value && Array.isArray(value) && value.length === 2) {\r\n      setRange(value);\r\n    }\r\n  }, [value]);\r\n\r\n  const handleMinChange = (e) => {\r\n    const newMin = Math.min(Number(e.target.value), range[1] - minimumGap);\r\n    const newRange = [newMin, range[1]];\r\n    setRange(newRange);\r\n    if (onChange) onChange(newRange);\r\n  };\r\n\r\n  const handleMaxChange = (e) => {\r\n    const newMax = Math.max(Number(e.target.value), range[0] + minimumGap);\r\n    const newRange = [range[0], newMax];\r\n    setRange(newRange);\r\n    if (onChange) onChange(newRange);\r\n  };\r\n\r\n  const calculatePercentage = (value) => ((value - min) / (max - min)) * 100;\r\n\r\n  return (\r\n    <SliderContainer>\r\n      <Label>{label}</Label>\r\n      <RangeInputContainer>\r\n        <ThumbValue\r\n          style={{\r\n            left: `calc(${calculatePercentage(range[0])}% - 14px)`,\r\n          }}\r\n        >\r\n          {valuePrefix}\r\n          {range[0]}\r\n          {valueSuffix}\r\n        </ThumbValue>\r\n        <ThumbValue\r\n          style={{\r\n            left: `calc(${calculatePercentage(range[1])}% - 14px)`,\r\n          }}\r\n        >\r\n          {valuePrefix}\r\n          {range[1]}\r\n          {valueSuffix}\r\n        </ThumbValue>\r\n        <Track\r\n          left={calculatePercentage(range[0])}\r\n          right={calculatePercentage(range[1])}\r\n        />\r\n        <Slider\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          step={step}\r\n          value={range[0]}\r\n          onChange={handleMinChange}\r\n        />\r\n        <Slider\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          step={step}\r\n          value={range[1]}\r\n          onChange={handleMaxChange}\r\n        />\r\n      </RangeInputContainer>\r\n    </SliderContainer>\r\n  );\r\n};\r\n\r\nexport default RangeSlider;\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { ChevronDownIcon } from '../../../Branding/icons/Icons';\r\n\r\nconst SelectContainer = styled.div`\r\n  position: relative;\r\n  font-family: sans-serif;\r\n`;\r\n\r\nconst sharedSelectStyles = css`\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  border: 2px solid;\r\n  background: transparent;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  appearance: none;\r\n  transition: border-color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n  ${sharedSelectStyles}\r\n  border-color: ${({ isFocused, color }) => (isFocused ? color : '#D1D5DB')};\r\n  color: ${({ value }) => (value ? '#000' : '#6B7280')}; /* Default placeholder style */\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  position: absolute;\r\n  left: 0;\r\n  margin: 0.25rem;\r\n  padding: 0.25rem;\r\n  background: white;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n  font-size: 1rem;\r\n  pointer-events: none;\r\n  transform: ${({ hasValue, isFocused }) =>\r\n    hasValue || isFocused ? 'translate(1.25rem, -70%) scale(0.9)' : 'translate(0.625rem, 0)'};\r\n  transform-origin: left top;\r\n  transition: transform 0.3s ease-in-out, color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledArrow = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 0.75rem;\r\n  transform: translateY(-50%);\r\n  pointer-events: none;\r\n  font-size: 1rem;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n`;\r\n\r\nconst SelectInput = ({ name, value, onChange, color = '#000', label, options = [] }) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const handleFocus = () => setIsFocused(true);\r\n  const handleBlur = () => setIsFocused(false);\r\n\r\n  return (\r\n    <SelectContainer>\r\n      <StyledSelect\r\n        name={name}\r\n        id={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        isFocused={isFocused}\r\n        color={color}\r\n        required\r\n      >\r\n        <option value=\"\" disabled>\r\n        </option>\r\n        {options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </StyledSelect>\r\n      <StyledLabel\r\n        htmlFor={name}\r\n        isFocused={isFocused}\r\n        color={color}\r\n        hasValue={Boolean(value)}\r\n      >\r\n        {label}\r\n      </StyledLabel>\r\n      <StyledArrow isFocused={isFocused} color={color}>\r\n        <ChevronDownIcon className='w-4 h-4'/>\r\n      </StyledArrow>\r\n    </SelectContainer>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","// Filter.jsx\r\nimport React from 'react';\r\nimport FilterLogic from './FilterLogic';\r\nimport RangeSlider from '../../form/inputs/rangeInputs/RangeSlider';\r\nimport styled from 'styled-components';\r\nimport SelectInput from '../../form/inputs/selectInputs/SelectInput';\r\n\r\nexport const FilterContainer = styled.div`\r\n  display: grid;\r\n  gap: 2rem;\r\n`;\r\n\r\nexport const GroupContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const GroupLabel = styled.h5`\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\n// Define filter configurations explicitly\r\nconst filtersConfig = {\r\n  status: {\r\n    category: 'status',\r\n    label: 'Status',\r\n    type: 'dropdown',\r\n    options: [\r\n      { value: 'completed', label: 'Completed', initial: false },\r\n      { value: 'pending', label: 'Pending', initial: false },\r\n      { value: 'inProgress', label: 'In Progress', initial: false },\r\n    ],\r\n  },\r\n  priority: {\r\n    category: 'priority',\r\n    label: 'Priority',\r\n    type: 'range',\r\n    options: [\r\n      { value: 'high', label: 'High', initial: false },\r\n      { value: 'medium', label: 'Medium', initial: false },\r\n      { value: 'low', label: 'Low', initial: false },\r\n    ],\r\n  },\r\n};\r\n\r\nconst Filter = ({ onChange }) => (\r\n  <FilterLogic\r\n    filters={Object.values(filtersConfig)}\r\n    onChange={selectedFilters => {\r\n      if (onChange) {\r\n        onChange(selectedFilters); // Pass the selectedFilters up to the parent\r\n      }\r\n    }}\r\n  >\r\n    {({ selectedFilters, setSelection }) => {\r\n      const statusFilter = filtersConfig.status;\r\n      const priorityFilter = filtersConfig.priority;\r\n\r\n      return (\r\n        <FilterContainer>\r\n          {/* Status Dropdown */}\r\n          <GroupContainer>\r\n            <GroupLabel>{statusFilter.label}</GroupLabel>\r\n            <SelectInput\r\n              name={statusFilter.category}\r\n              label={`Select ${statusFilter.label}`}\r\n              value={\r\n                selectedFilters[statusFilter.category] &&\r\n                selectedFilters[statusFilter.category][0]\r\n                  ? selectedFilters[statusFilter.category][0]\r\n                  : ''\r\n              }\r\n              onChange={(e) =>\r\n                setSelection(statusFilter.category, e.target.value)\r\n              }\r\n              options={statusFilter.options}\r\n              color=\"#000\"\r\n            />\r\n          </GroupContainer>\r\n\r\n          {/* Priority Range Slider */}\r\n          <GroupContainer>\r\n            <GroupLabel>{priorityFilter.label}</GroupLabel>\r\n            <RangeSlider\r\n              min={0}\r\n              max={priorityFilter.options.length - 1}\r\n              label={priorityFilter.label}\r\n              onChange={(index) => {\r\n                const value = priorityFilter.options[index]?.value;\r\n                if (value) setSelection(priorityFilter.category, value);\r\n              }}\r\n            />\r\n          </GroupContainer>\r\n        </FilterContainer>\r\n      );\r\n    }}\r\n  </FilterLogic>\r\n);\r\n\r\nexport default Filter;\r\n"],"names":[],"sourceRoot":""}