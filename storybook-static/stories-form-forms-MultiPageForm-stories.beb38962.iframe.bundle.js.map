{"version":3,"file":"stories-form-forms-MultiPageForm-stories.beb38962.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAgCA;;;;;;;;;;AAYA","sources":["webpack://storybook/./src/components/form/forms/MultiPageForm.jsx"],"sourcesContent":["// MultiPageForm.jsx\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport FormLogic from \"./FormLogic\";\r\n\r\n// Import input components\r\nimport TextInput from \"../inputs/textInputs/TextInput\";\r\nimport ColorPicker from \"../inputs/colorPickers/ColorPicker\";\r\nimport RangeInput from \"../inputs/rangeInputs/RangeInput\";\r\nimport Checkbox3 from \"../inputs/checkboxInputs/Checkbox3\";\r\nimport ToggleSwitch2 from \"../inputs/toggleSwitches/ToggleSwitch2\";\r\nimport RadioButtons2 from \"../inputs/radioInputs/RadioButtons2\";\r\n\r\n// Import button components\r\nimport SubmitButton from \"../inputs/formButtons/SubmitButton\";\r\nimport ResetButton from \"../inputs/formButtons/ResetButton\";\r\n\r\n// Styled containers for layout\r\nconst FormContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr); /* Two-column layout */\r\n  gap: 16px;\r\n  padding: 24px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  max-width: 800px; /* Increased width for better layout */\r\n  margin: 0 auto;\r\n  background-color: #fff;\r\n\r\n  @media (max-width: 600px) {\r\n    grid-template-columns: 1fr; /* Single-column layout on small screens */\r\n  }\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  grid-column: 1 / -1; /* Span all columns */\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 8px;\r\n  margin-top: 16px;\r\n\r\n  @media (max-width: 600px) {\r\n    flex-direction: column; /* Stack buttons vertically on small screens */\r\n  }\r\n`;\r\n\r\n\r\n/** Define Custom Validation Logic */\r\nconst validatePreferences = (formData) => {\r\n  const errors = {};\r\n  if (formData.rating < 3) {\r\n    errors.rating = \"Rating must be at least 3.\";\r\n  }\r\n  if (formData.color === \"#000000\") {\r\n    errors.color = \"Color cannot be black.\";\r\n  }\r\n  return errors;\r\n};\r\n\r\n/** Define Pages */\r\nconst getPages = () => [\r\n  {\r\n    customValidate: null,\r\n    content: (\r\n      <FormContainer>\r\n        <h2>Page 1: Personal Info</h2>\r\n        <TextInput label=\"Name\" type=\"text\" name=\"name\" id=\"name\" required gridSpan='span 2'/>\r\n        <TextInput label=\"Email\" type=\"email\" name=\"email\" id=\"email\" required />\r\n\r\n        {/* Wrap the Message input to span two columns */}\r\n        <TextInput\r\n          label=\"Message\"\r\n          type=\"textarea\"\r\n          name=\"message\"\r\n          id=\"message\"\r\n          required\r\n          gridSpan=\"span 2\"\r\n        />\r\n      </FormContainer>\r\n    ),\r\n  },\r\n  {\r\n    customValidate: validatePreferences,\r\n    content: (\r\n      <FormContainer>\r\n        <h2>Page 2: Preferences</h2>\r\n        <ColorPicker label=\"Favorite Color\" name=\"color\" id=\"color\" required />\r\n        <RangeInput\r\n          label=\"Rating\"\r\n          name=\"rating\"\r\n          id=\"rating\"\r\n          min={1}\r\n          max={5}\r\n          required\r\n        />\r\n        <Checkbox3 name=\"checkbox\" id=\"checkbox\" label=\"Accept Terms\" required />\r\n        <ToggleSwitch2 name=\"toggle\" id=\"toggle\" label=\"Enable Feature\" />\r\n\r\n        {/* Wrap the RadioButtons to span two columns */}\r\n        <RadioButtons2\r\n          label=\"Role\"\r\n          name=\"role\"\r\n          options={[\r\n            { id: \"designer\", value: \"designer\", label: \"Designer\", defaultChecked: true },\r\n            { id: \"student\", value: \"student\", label: \"Student\" },\r\n            { id: \"teacher\", value: \"teacher\", label: \"Teacher\" },\r\n          ]}\r\n          required\r\n          gridColumn=\"1 / -1\"\r\n        />\r\n      </FormContainer>\r\n    ),\r\n  },\r\n  {\r\n    customValidate: null,\r\n    content: (\r\n      <FormContainer>\r\n        <h2>Page 3: Review & Submit</h2>\r\n      </FormContainer>\r\n    ),\r\n  },\r\n];\r\n\r\n/** Render Navigation Buttons */\r\nconst renderButtonLayout = ({ currentPageIndex, isLastPage, handlePrevious }) => (\r\n  <ButtonContainer>\r\n    {/* Previous Button */}\r\n    {currentPageIndex > 0 && (\r\n      <ResetButton type=\"button\" onClick={handlePrevious}>\r\n        Previous\r\n      </ResetButton>\r\n    )}\r\n\r\n    {/* Next or Submit Button */}\r\n    <SubmitButton type=\"submit\">{isLastPage ? \"Submit\" : \"Next\"}</SubmitButton>\r\n  </ButtonContainer>\r\n);\r\n\r\n/** MultiPageForm Component */\r\nexport default function MultiPageForm({ initialData = {}, handleFormSubmit }) {\r\n  const pages = getPages();\r\n\r\n  return (\r\n    <FormLogic\r\n      pages={pages}\r\n      initialData={initialData}\r\n      onSubmit={handleFormSubmit}\r\n    >\r\n      {({ currentPageIndex, isLastPage, handlePrevious, formData }) => (\r\n        <>\r\n          {renderButtonLayout({ currentPageIndex, isLastPage, handlePrevious })}\r\n        </>\r\n      )}\r\n    </FormLogic>\r\n  );\r\n}\r\n"],"names":[],"sourceRoot":""}