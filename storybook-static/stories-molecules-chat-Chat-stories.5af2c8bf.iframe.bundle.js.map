{"version":3,"file":"stories-molecules-chat-Chat-stories.5af2c8bf.iframe.bundle.js","mappings":";;;;;;;AAWA;;;;;;;AASA;;;;;;AAQA;;;;AAMA;AACA;;;AAKA;AAKA;AACA;AACA;;;;AAIA;;;AAGA;;AAIA;AAGA;;AAEA;;;;AAMA;AACA;;;;;;AAQA;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;AAiBA;AAKA;AACA;;;AAmEA","sources":["webpack://storybook/./src/components/molecules/chat/Chat.jsx"],"sourcesContent":["// src/components/Chat.js\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ChatContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%; /* Full viewport height */\r\n  overflow: hidden;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst LoadingMessage = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  font-size: 1.2rem;\r\n  color: #555;\r\n`;\r\n\r\nconst ChatMessages = styled.div`\r\n  flex: 1;\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst MessageContainer = styled.div`\r\n  display: flex;\r\n  align-items: flex-end;\r\n  margin-bottom: 15px;\r\n  justify-content: ${props => (props.sent ? 'flex-end' : 'flex-start')};\r\n`;\r\n\r\nconst MessageContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: ${props => (props.sent ? 'flex-end' : 'flex-start')};\r\n`;\r\n\r\n// Updated MessageBubble: for sent messages, the background uses sentBubbleColor (default '#A855F7'),\r\n// and for received messages a light gray (#f0f0f0) is used.\r\nconst MessageBubble = styled.div`\r\n  background-color: ${props => props.sent ? (props.sentBubbleColor || '#A855F7') : '#f0f0f0'};\r\n  color: ${props => (props.sent ? '#ffffff' : '#000000')};\r\n  padding: 10px 16px;\r\n  border-radius: 20px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  margin: ${props => (props.sent ? '0 0 5px 40px' : '0 40px 5px 0')};\r\n  max-width: 70%;\r\n  overflow-wrap: break-word;\r\n`;\r\n\r\nconst MessageText = styled.span`\r\n  font-size: 1em;\r\n`;\r\n\r\nconst Avatar = styled.div`\r\n  margin: ${props => (props.sent ? '0 0 25px 5px' : '0 5px 25px 0')};\r\n  flex-shrink: 0;\r\n`;\r\n\r\nconst MessageTimestamp = styled.span`\r\n  font-size: 0.7em;\r\n  color: #757575;\r\n  display: block;\r\n  text-align: ${props => (props.sent ? 'right' : 'left')};\r\n`;\r\n\r\nconst ChatInputContainer = styled.div`\r\n  border-top: 1px solid #e0e0e0;\r\n  background-color: #ffffff;\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst ChatInput = styled.input`\r\n  flex: 1;\r\n  padding: 12px 18px;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 30px;\r\n  outline: none;\r\n  font-size: 1em;\r\n  transition: border-color 0.3s;\r\n  \r\n  &:focus {\r\n    border-color: #000;\r\n  }\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n  margin-left: 15px;\r\n  padding: 10px 20px;\r\n  background-color: #000;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 30px;\r\n  cursor: pointer;\r\n  font-size: 1em;\r\n  transition: background-color 0.3s;\r\n  \r\n  &:disabled {\r\n    background-color: #e0e0e0;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst defaultAvatarURL = 'https://upload.wikimedia.org/wikipedia/commons/a/ac/Default_pfp.jpg';\r\n\r\nconst ProfilePic = styled.img`\r\n  width: ${props => props.size || '30px'};\r\n  height: ${props => props.size || '30px'};\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n`;\r\n\r\nconst Chat = ({\r\n  initialConversation,\r\n  currentUser,\r\n  participantsData,  // Detailed mapping of user IDs to profiles.\r\n  onSendMessage,     // External callback to update messages in the DB.\r\n  newMessage,        // External newMessage state.\r\n  setNewMessage,     // External setNewMessage function.\r\n  messagesEndRef,    // Ref for scrolling.\r\n  sentBubbleColor    // New prop to customize the sent bubble color.\r\n}) => {\r\n  // Local conversation state, initialized with data from Firestore.\r\n  const [conversation, setConversation] = useState(\r\n    initialConversation || { participants: [], messages: [] }\r\n  );\r\n\r\n  // Update local conversation state when initialConversation changes.\r\n  useEffect(() => {\r\n    if (initialConversation) {\r\n      setConversation(initialConversation);\r\n    }\r\n  }, [initialConversation]);\r\n\r\n  // Build a participant map from the provided participantsData for fast lookups.\r\n  const participantMap = useMemo(() => {\r\n    return participantsData || {};\r\n  }, [participantsData]);\r\n\r\n  // Scroll to the bottom when new messages arrive.\r\n  useEffect(() => {\r\n    messagesEndRef?.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [conversation.messages?.length, messagesEndRef]);\r\n\r\n  // Handler for sending a message.\r\n  const handleSendMessageInternal = () => {\r\n    if (!newMessage.trim()) return;\r\n\r\n    // Construct a new message using currentUser.uid.\r\n    const message = {\r\n      localTimestamp: Date.now().toString(),\r\n      sender: currentUser.uid,\r\n      text: newMessage,\r\n    };\r\n\r\n    if (typeof onSendMessage === 'function') {\r\n      onSendMessage(message);\r\n    } else {\r\n      setConversation(prev => ({\r\n        ...prev,\r\n        messages: [...(prev.messages || []), message],\r\n      }));\r\n    }\r\n    setNewMessage('');\r\n  };\r\n\r\n  if (!conversation) {\r\n    return <LoadingMessage>Loading conversation...</LoadingMessage>;\r\n  }\r\n\r\n  // Render a single message.\r\n  const renderMessage = (message) => {\r\n    const isSent = message.sender === currentUser.uid;\r\n    // Use the participantMap to obtain the sender's profile data.\r\n    const sender = participantMap[message.sender];\r\n    const formattedTime = new Date(parseInt(message.localTimestamp, 10)).toLocaleTimeString([], {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    });\r\n    return (\r\n      <MessageContainer key={message.localTimestamp + message.sender} sent={isSent}>\r\n        {/* Display avatar for received messages */}\r\n        {!isSent && sender && (\r\n          <Avatar sent={isSent}>\r\n            <ProfilePic\r\n              src={sender.photoURL || defaultAvatarURL}\r\n              alt={sender.displayName || 'Sender'}\r\n              size=\"30px\"\r\n            />\r\n          </Avatar>\r\n        )}\r\n        <MessageContent sent={isSent}>\r\n          <MessageBubble sent={isSent} sentBubbleColor={sentBubbleColor}>\r\n            <MessageText>{message.text}</MessageText>\r\n          </MessageBubble>\r\n          <MessageTimestamp sent={isSent}>{formattedTime}</MessageTimestamp>\r\n        </MessageContent>\r\n        {/* Display avatar for sent messages */}\r\n        {isSent && (\r\n          <Avatar sent={isSent}>\r\n            <ProfilePic\r\n              src={(participantMap[currentUser.uid] &&\r\n                      participantMap[currentUser.uid].photoURL) || defaultAvatarURL}\r\n              alt={(participantMap[currentUser.uid] &&\r\n                      participantMap[currentUser.uid].displayName) || 'You'}\r\n              size=\"30px\"\r\n            />\r\n          </Avatar>\r\n        )}\r\n      </MessageContainer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ChatContainer>\r\n      <ChatMessages>\r\n        {(conversation.messages || []).map(renderMessage)}\r\n        <div ref={messagesEndRef} />\r\n      </ChatMessages>\r\n      <ChatInputContainer>\r\n        <ChatInput\r\n          type=\"text\"\r\n          placeholder=\"Type a message...\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n        />\r\n        <SendButton onClick={handleSendMessageInternal} disabled={!newMessage.trim()}>\r\n          Send\r\n        </SendButton>\r\n      </ChatInputContainer>\r\n    </ChatContainer>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"names":[],"sourceRoot":""}