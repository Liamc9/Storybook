{"version":3,"file":"stories-search-Search2-stories.53786e97.iframe.bundle.js","mappings":";;;;;;;AAaA;AACA;AACA;AACA;;;;AAMA;AACA;AACA;;AAIA;AACA;;AAEA;;AAIA;;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;AAQA;AACA;;AAIA;AACA;;;AClDA;;;;;AAOA;;;AAKA;AACA;;;;;AAKA;;AAEA;;;;;;;;;;;;AA+CA;;;;;ACrEA;;AAIA;;AAIA;;;;ACRA;;ACEA;;;AAKA;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;AAgBA;;;;AAMA;;;;;;;;AAUA;;;;AAMA;;;;;;;;;;;;;;;;;;AAoBA;AAIA;AACA;;AAIA","sources":["webpack://storybook/./src/components/atoms/Drawers/BottomDrawer.jsx","webpack://storybook/./src/components/search/Feed.jsx","webpack://storybook/./src/components/search/FeedItem.jsx","webpack://storybook/./src/components/search/FeedItem2.jsx","webpack://storybook/./src/components/search/Search2.jsx"],"sourcesContent":["// src/components/Drawers/BottomDrawer.jsx\r\n\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst DrawerContainer = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  z-index: 50;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  pointer-events: ${({ isOpen }) => (isOpen ? \"auto\" : \"none\")};\r\n`;\r\n\r\nconst BackgroundOverlay = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n`;\r\n\r\nconst Drawer = styled.div`\r\n  width: 100%;\r\n  max-width: ${({ maxWidth }) => maxWidth};\r\n  height: ${({ autoHeight, height }) => (autoHeight ? \"auto\" : height)};\r\n  background-color: white;\r\n  ${({ noRoundedCorners }) =>\r\n    noRoundedCorners\r\n      ? css`\r\n          border-radius: 0;\r\n        `\r\n      : css`\r\n          border-radius: 16px 16px 0 0;\r\n        `}\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  transform: ${({ isOpen }) => (isOpen ? \"translateY(0)\" : \"translateY(100%)\")};\r\n  transition: transform ${({ transitionDuration }) => transitionDuration}ms ease-in-out,\r\n    opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  width: 48px;\r\n  height: 4px;\r\n  background-color: #d1d5db;\r\n  border-radius: 9999px;\r\n  margin: 8px auto;\r\n  display: ${({ hideHandle }) => (hideHandle ? \"none\" : \"block\")};\r\n`;\r\n\r\nconst DrawerContent = styled.div`\r\n  flex: 1;\r\n  overflow-y: ${({ autoHeight }) => (autoHeight ? \"visible\" : \"auto\")};\r\n`;\r\n\r\nexport default function BottomDrawer({\r\n  isOpen,\r\n  onClose,\r\n  children,\r\n  transitionDuration = 300,\r\n  height = \"80vh\",\r\n  autoHeight = false,\r\n  maxWidth = \"600px\",\r\n  hideHandle = false, // New prop to hide handle\r\n  noRoundedCorners = false, // New prop to remove rounded corners\r\n}) {\r\n  const drawerRef = useRef();\r\n\r\n  // Close the drawer when clicking outside of it\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (drawerRef.current && !drawerRef.current.contains(event.target)) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"hidden\"; // Prevent background scrolling\r\n    } else {\r\n      document.body.style.overflow = \"auto\";\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"auto\";\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  return createPortal(\r\n    <DrawerContainer isOpen={isOpen} transitionDuration={transitionDuration}>\r\n      {/* Background overlay */}\r\n      <BackgroundOverlay isOpen={isOpen} onClick={onClose} transitionDuration={transitionDuration} />\r\n\r\n      {/* Drawer content */}\r\n      <Drawer\r\n        ref={drawerRef}\r\n        isOpen={isOpen}\r\n        transitionDuration={transitionDuration}\r\n        height={height}\r\n        autoHeight={autoHeight}\r\n        maxWidth={maxWidth}\r\n        noRoundedCorners={noRoundedCorners} // Pass the new prop\r\n      >\r\n        {/* Drawer handle */}\r\n        <Handle hideHandle={hideHandle} /> {/* Pass the new prop */}\r\n        {/* Scrollable or auto-adjusted content area */}\r\n        <DrawerContent autoHeight={autoHeight}>{children}</DrawerContent>\r\n      </Drawer>\r\n    </DrawerContainer>,\r\n    document.body\r\n  );\r\n}\r\n","// ../../components/search/Feed.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport FeedItem from './FeedItem';\r\nimport FeedLogic from './FeedLogic'; // <--- newly created\r\n\r\n// ---------------------- Styled Components ----------------------\r\nconst FeedContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst PaginationContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n  gap: 8px;\r\n`;\r\n\r\nconst PageButton = styled.button`\r\n  padding: 8px 12px;\r\n  border: none;\r\n  background-color: ${({ active }) => (active ? '#007bff' : '#e0e0e0')};\r\n  color: ${({ active }) => (active ? '#fff' : '#000')};\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  \r\n  &:hover {\r\n    background-color: ${({ active }) => (active ? '#0056b3' : '#ccc')};\r\n  }\r\n`;\r\n\r\nconst LoadMoreButton = styled.button`\r\n  margin: 20px auto;\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    background-color: #0056b3;\r\n  }\r\n`;\r\n\r\n// ---------------------- Feed Component ----------------------\r\nconst Feed = ({\r\n  items = [],\r\n  sortBy,\r\n  selectedFilters = {},\r\n  ItemComponent = FeedItem,\r\n  pagination,         // optional number of items per page\r\n  loadMore,           // optional number of items to load per click\r\n  infiniteScroll,     // optional number of items to load on bottom scroll\r\n  scrollContainerRef  // optional container ref for infinite scrolling\r\n}) => {\r\n\r\n  // -- 1) Retrieve all the logic from FeedLogic\r\n  const {\r\n    itemsToRender,\r\n    pages,\r\n    currentPage,\r\n    setCurrentPage,\r\n    hasMoreItems,\r\n    handleLoadMore\r\n  } = FeedLogic({\r\n    items,\r\n    sortBy,\r\n    selectedFilters,\r\n    pagination,\r\n    loadMore,\r\n    infiniteScroll,\r\n    scrollContainerRef\r\n  });\r\n\r\n  // -- 2) Render\r\n  return (\r\n    <FeedContainer>\r\n      {itemsToRender.map((item, index) => (\r\n        <ItemComponent key={index} data={item} />\r\n      ))}\r\n\r\n      {/* Pagination controls (if pagination is used) */}\r\n      {pages?.length > 1 && (\r\n        <PaginationContainer>\r\n          {pages.map((page) => (\r\n            <PageButton\r\n              key={page}\r\n              active={page === currentPage}\r\n              onClick={() => setCurrentPage(page)}\r\n            >\r\n              {page}\r\n            </PageButton>\r\n          ))}\r\n        </PaginationContainer>\r\n      )}\r\n\r\n      {/* Load-more button (if loadMore is used) */}\r\n      {loadMore && hasMoreItems && (\r\n        <LoadMoreButton onClick={handleLoadMore}>\r\n          Load More\r\n        </LoadMoreButton>\r\n      )}\r\n    </FeedContainer>\r\n  );\r\n};\r\n\r\nexport default Feed;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FeedItemContainer = styled.div`\r\n  border: 1px solid #ccc;\r\n  padding: 1rem;\r\n  border-radius: 4px;\r\n  background: #fff;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  margin: 0 0 0.5rem 0;\r\n`;\r\n\r\nconst Description = styled.p`\r\n  margin: 0;\r\n`;\r\n\r\nconst FeedItem = ({ data }) => {\r\n  return (\r\n    <FeedItemContainer>\r\n      <Title>{data.title}</Title>\r\n      <Description>{data.description}</Description>\r\n    </FeedItemContainer>\r\n  );\r\n};\r\n\r\nexport default FeedItem;\r\n","// ../../components/search/FeedItem2.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ItemContainer = styled.div`\r\n  padding: 1rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst FeedItem2 = ({ data }) => {\r\n  return (\r\n    <ItemContainer>\r\n      <h3>{data.title} (FeedItem2)</h3>\r\n      <p>{data.description}</p>\r\n      <p>Status: {data.status}</p>\r\n      <p>Priority: {data.priority}</p>\r\n      <p>Date: {data.date}</p>\r\n    </ItemContainer>\r\n  );\r\n};\r\n\r\nexport default FeedItem2;\r\n","// src/components/search/Search2.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport BottomDrawer from '../atoms/Drawers/BottomDrawer'; // adjust path as needed\r\nimport { SearchLogic } from './SearchLogic'; // adjust path as needed\r\n\r\n\r\n// Styled components for Search2 UI\r\nconst Container = styled.div`\r\n  padding: 16px;\r\n`;\r\n\r\nconst SearchInputContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\n  width: 100%;\r\n  padding: 12px 40px 12px 12px; /* Add padding-right for the 'X' button */\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n\r\n  &:focus {\r\n    border-color: #007bff;\r\n    box-shadow: 0 0 4px rgba(0,123,255,0.3);\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  position: absolute;\r\n  right: 12px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  color: #888;\r\n\r\n  &:hover {\r\n    color: #555;\r\n  }\r\n`;\r\n\r\nconst SuggestionsList = styled.ul`\r\n  list-style: none;\r\n  margin: 12px 0 0 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst SuggestionItem = styled.li`\r\n  padding: 10px;\r\n  border-bottom: 1px solid #eee;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: #f7f7f7;\r\n  }\r\n`;\r\n\r\nconst SectionTitle = styled.h4`\r\n  margin: 16px 0 8px;\r\n  font-size: 14px;\r\n  color: #555;\r\n`;\r\n\r\nconst SearchButton = styled.button`\r\n  width: 100%;\r\n  max-width: 300px;\r\n  padding: 10px 12px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 25px;\r\n  background-color: white;\r\n  box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);\r\n  text-align: left;\r\n  cursor: pointer;\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &:hover {\r\n    border-color: #007bff;\r\n  }\r\n`;\r\n\r\n\r\nconst SearchText = styled.span`\r\n  color: ${props => (props.hasQuery ? '#000' : '#888')};\r\n`;\r\n\r\nconst OpenButton = styled(SearchButton)`\r\n  margin: 20px;\r\n`;\r\nconst Search2 = ({ items, onSearch, historyItems = [] }) => {\r\n  const {\r\n    isOpen,\r\n    open,\r\n    close,\r\n    query,\r\n    suggestions,\r\n    lastQuery,\r\n    handleInputChange,\r\n    handleSuggestionClick,\r\n    handleSearchForClick,\r\n  } = SearchLogic({ items, onSearch, historyItems }, { keys: ['title'] });\r\n\r\n  return (\r\n    <>\r\n      <OpenButton onClick={open}>\r\n        <SearchText hasQuery={lastQuery}>{lastQuery || 'Search...'}</SearchText>\r\n      </OpenButton>\r\n      <BottomDrawer isOpen={isOpen} onClose={close}>\r\n        <Container>\r\n          <SearchInputContainer>\r\n            <SearchInput\r\n              type=\"text\"\r\n              value={query}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Search tasks...\"\r\n            />\r\n            {query && (\r\n              <CloseButton onClick={close} aria-label=\"Close Search\">\r\n                &times;\r\n              </CloseButton>\r\n            )}\r\n          </SearchInputContainer>\r\n\r\n          {/* Display historyItems when there's no query */}\r\n          {!query && historyItems.length > 0 && (\r\n            <>\r\n              <SectionTitle>Recent Searches</SectionTitle>\r\n              <SuggestionsList>\r\n                {historyItems.map((item, index) => (\r\n                  <SuggestionItem\r\n                    key={index}\r\n                    onClick={() => handleSuggestionClick(item)}\r\n                  >\r\n                    {item.title}\r\n                  </SuggestionItem>\r\n                ))}\r\n              </SuggestionsList>\r\n            </>\r\n          )}\r\n\r\n          {/* Display suggestions when user types */}\r\n          {query && suggestions.length > 0 && (\r\n            <SuggestionsList>\r\n              {query && (\r\n                <SuggestionItem onClick={handleSearchForClick}>\r\n                  Search For \"{query}\"\r\n                </SuggestionItem>\r\n              )}\r\n              {suggestions.map((item, index) => (\r\n                <SuggestionItem\r\n                  key={index}\r\n                  onClick={() => handleSuggestionClick(item)}\r\n                >\r\n                  {item.title}\r\n                </SuggestionItem>\r\n              ))}\r\n            </SuggestionsList>\r\n          )}\r\n        </Container>\r\n      </BottomDrawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search2;\r\n"],"names":[],"sourceRoot":""}