{"version":3,"file":"stories-search-Modal-stories.828f836f.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AA4BA;;;;;AAOA;;;AAKA;;AAOA;;;;;ACvCA;;;;AAMA;;;;AAMA;;;;;;;;;;;;AAcA;AACA;;;;;;AAMA;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;AC5EA;;;;;;;;;;AAYA;AAGA;AACA;AACA;AACA;;;;;;AAQA;;;AAGA;;;AAIA;;;;;;;AASA;AACA;;;;;;;ACpCA;;;;;;;AAYA;;;;;;;;;;;AAWA;AAGA;;AAEA;;;;;;;;AAUA;AAGA;;AAEA;;;;;;;;;;;;;AAeA;;AAIA;;;;AAMA;;;AAQA","sources":["webpack://storybook/./src/components/search/FilterModal.jsx","webpack://storybook/./src/components/atoms/inputs/RangeSlider.jsx","webpack://storybook/./src/components/atoms/inputs/SelectInput.jsx","webpack://storybook/./src/components/atoms/modals/Modal.jsx"],"sourcesContent":["// src/components/FilterModal.jsx\r\nimport React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Modal from '../atoms/modals/Modal'; // Adjust the import path as necessary\r\nimport FilterLogic from './FilterLogic';\r\nimport RangeSlider from '../atoms/inputs/RangeSlider';  // Adjust import paths as needed\r\nimport SelectInput from '../atoms/inputs/SelectInput';\r\n\r\n// Styled components for button and filter layout\r\nconst Button = styled.button`\r\n  padding: 10px 20px;\r\n  background-color: #2563eb;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease-in-out;\r\n  margin: 1rem;\r\n\r\n  &:hover {\r\n    background-color: #1d4ed8;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.5);\r\n  }\r\n`;\r\n\r\nconst FilterContainer = styled.div`\r\n  display: grid;\r\n  gap: 2rem;\r\n  padding: 1rem;\r\n  width: 500px;\r\n`;\r\n\r\nconst GroupContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst GroupLabel = styled.h5`\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\n// Define filter configurations explicitly\r\nconst filtersConfig = {\r\n  status: {\r\n    category: 'status',\r\n    label: 'Status',\r\n    type: 'dropdown',\r\n    options: [\r\n      { value: 'completed', label: 'Completed', initial: false },\r\n      { value: 'pending', label: 'Pending', initial: false },\r\n      { value: 'inProgress', label: 'In Progress', initial: false },\r\n    ],\r\n  },\r\n  priority: {\r\n    category: 'priority',\r\n    label: 'Priority',\r\n    type: 'range',\r\n    options: [\r\n      { value: 'high', label: 'High', initial: false },\r\n      { value: 'medium', label: 'Medium', initial: false },\r\n      { value: 'low', label: 'Low', initial: false },\r\n    ],\r\n  },\r\n};\r\n\r\nconst FilterModal = ({ onChange }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleOpenModal = () => setIsOpen(true);\r\n  const handleCloseModal = () => setIsOpen(false);\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={handleOpenModal}>Open Filters</Button>\r\n    \r\n      <Modal isModalOpen={isOpen} closeModal={handleCloseModal} title=\"Filters\" animate>\r\n        <FilterLogic\r\n          filters={Object.values(filtersConfig)}\r\n          onChange={selectedFilters => {\r\n            if (onChange) {\r\n              onChange(selectedFilters);\r\n            }\r\n          }}\r\n        >\r\n          {({ selectedFilters, setSelection }) => {\r\n            const statusFilter = filtersConfig.status;\r\n            const priorityFilter = filtersConfig.priority;\r\n\r\n            return (\r\n              <FilterContainer>\r\n                {/* Status Dropdown */}\r\n                <GroupContainer>\r\n                  <GroupLabel>{statusFilter.label}</GroupLabel>\r\n                  <SelectInput\r\n                    name={statusFilter.category}\r\n                    label={`Select ${statusFilter.label}`}\r\n                    value={\r\n                      selectedFilters[statusFilter.category] &&\r\n                      selectedFilters[statusFilter.category][0]\r\n                        ? selectedFilters[statusFilter.category][0]\r\n                        : ''\r\n                    }\r\n                    onChange={(e) =>\r\n                      setSelection(statusFilter.category, e.target.value)\r\n                    }\r\n                    options={statusFilter.options}\r\n                    color=\"#000\"\r\n                  />\r\n                </GroupContainer>\r\n\r\n                {/* Priority Range Slider */}\r\n                <GroupContainer>\r\n                  <GroupLabel>{priorityFilter.label}</GroupLabel>\r\n                  <RangeSlider\r\n                    min={0}\r\n                    max={priorityFilter.options.length - 1}\r\n                    label={priorityFilter.label}\r\n                    onChange={(index) => {\r\n                      const value = priorityFilter.options[index]?.value;\r\n                      if (value) setSelection(priorityFilter.category, value);\r\n                    }}\r\n                  />\r\n                </GroupContainer>\r\n              </FilterContainer>\r\n            );\r\n          }}\r\n        </FilterLogic>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterModal;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SliderContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 16px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #333;\r\n`;\r\n\r\nconst RangeInputContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 50px;\r\n`;\r\n\r\nconst Track = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  height: 8px;\r\n  background: #e0e0e0;\r\n  border-radius: 5px;\r\n  width: 100%;\r\n\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    left: ${(props) => props.left}%;\r\n    right: ${(props) => 100 - props.right}%;\r\n    height: 100%;\r\n    background: #A855F7;\r\n    border-radius: 5px;\r\n    z-index: 1;\r\n  }\r\n`;\r\n\r\nconst ThumbValue = styled.div`\r\n  position: absolute;\r\n  top: -10px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #A855F7;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst Slider = styled.input`\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  width: 100%;\r\n  height: 8px;\r\n  background: transparent;\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  z-index: 3;\r\n  pointer-events: none;\r\n\r\n  &::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    width: 16px;\r\n    height: 16px;\r\n    background: #A855F7;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    pointer-events: auto;\r\n  }\r\n\r\n  &::-moz-range-thumb {\r\n    width: 14px;\r\n    height: 14px;\r\n    background: #007bff;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    pointer-events: auto;\r\n  }\r\n`;\r\n\r\nconst RangeSlider = ({\r\n  min = 0,\r\n  max = 100,\r\n  step = 1,\r\n  minimumGap = 1,\r\n  label = \"Range\",\r\n  valuePrefix = \"\",\r\n  valueSuffix = \"\",\r\n  onChange,\r\n}) => {\r\n  const [range, setRange] = useState([min, max]);\r\n\r\n  const handleMinChange = (e) => {\r\n    const newMin = Math.min(Number(e.target.value), range[1] - minimumGap);\r\n    const newRange = [newMin, range[1]];\r\n    setRange(newRange);\r\n    if (onChange) onChange(newRange);\r\n  };\r\n\r\n  const handleMaxChange = (e) => {\r\n    const newMax = Math.max(Number(e.target.value), range[0] + minimumGap);\r\n    const newRange = [range[0], newMax];\r\n    setRange(newRange);\r\n    if (onChange) onChange(newRange);\r\n  };\r\n\r\n  const calculatePercentage = (value) => ((value - min) / (max - min)) * 100;\r\n\r\n  return (\r\n    <SliderContainer>\r\n      <Label>{label}</Label>\r\n      <RangeInputContainer>\r\n        <ThumbValue\r\n          style={{\r\n            left: `calc(${calculatePercentage(range[0])}% - 14px)`,\r\n          }}\r\n        >\r\n          {valuePrefix}\r\n          {range[0]}\r\n          {valueSuffix}\r\n        </ThumbValue>\r\n        <ThumbValue\r\n          style={{\r\n            left: `calc(${calculatePercentage(range[1])}% - 14px)`,\r\n          }}\r\n        >\r\n          {valuePrefix}\r\n          {range[1]}\r\n          {valueSuffix}\r\n        </ThumbValue>\r\n        <Track\r\n          left={calculatePercentage(range[0])}\r\n          right={calculatePercentage(range[1])}\r\n        />\r\n        <Slider\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          step={step}\r\n          value={range[0]}\r\n          onChange={handleMinChange}\r\n        />\r\n        <Slider\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          step={step}\r\n          value={range[1]}\r\n          onChange={handleMaxChange}\r\n        />\r\n      </RangeInputContainer>\r\n    </SliderContainer>\r\n  );\r\n};\r\n\r\nexport default RangeSlider;\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { ChevronDownIcon } from '../../Branding/icons/Icons';\r\n\r\nconst SelectContainer = styled.div`\r\n  position: relative;\r\n  font-family: sans-serif;\r\n`;\r\n\r\nconst sharedSelectStyles = css`\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  border: 2px solid;\r\n  background: transparent;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  appearance: none;\r\n  transition: border-color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n  ${sharedSelectStyles}\r\n  border-color: ${({ isFocused, color }) => (isFocused ? color : '#D1D5DB')};\r\n  color: ${({ value }) => (value ? '#000' : '#6B7280')}; /* Default placeholder style */\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  position: absolute;\r\n  left: 0;\r\n  margin: 0.25rem;\r\n  padding: 0.25rem;\r\n  background: white;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n  font-size: 1rem;\r\n  pointer-events: none;\r\n  transform: ${({ hasValue, isFocused }) =>\r\n    hasValue || isFocused ? 'translate(1.25rem, -70%) scale(0.9)' : 'translate(0.625rem, 0)'};\r\n  transform-origin: left top;\r\n  transition: transform 0.3s ease-in-out, color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledArrow = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 0.75rem;\r\n  transform: translateY(-50%);\r\n  pointer-events: none;\r\n  font-size: 1rem;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n`;\r\n\r\nconst SelectInput = ({ name, value, onChange, color = '#000', label, options = [] }) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const handleFocus = () => setIsFocused(true);\r\n  const handleBlur = () => setIsFocused(false);\r\n\r\n  return (\r\n    <SelectContainer>\r\n      <StyledSelect\r\n        name={name}\r\n        id={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        isFocused={isFocused}\r\n        color={color}\r\n      >\r\n        <option value=\"\" disabled>\r\n        </option>\r\n        {options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </StyledSelect>\r\n      <StyledLabel\r\n        htmlFor={name}\r\n        isFocused={isFocused}\r\n        color={color}\r\n        hasValue={Boolean(value)}\r\n      >\r\n        {label}\r\n      </StyledLabel>\r\n      <StyledArrow isFocused={isFocused} color={color}>\r\n        <ChevronDownIcon className='w-4 h-4'/>\r\n      </StyledArrow>\r\n    </SelectContainer>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport styled, { keyframes, css } from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { XIcon } from \"../../Branding/icons/Icons\";\r\n\r\n// Animations\r\nconst fadeIn = keyframes`\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst slideIn = keyframes`\r\n  from {\r\n    transform: translateY(-20px);\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\n// Styled Components\r\nconst Overlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n  ${(props) =>\r\n    props.animate &&\r\n    css`\r\n      animation: ${fadeIn} 0.3s ease-out forwards;\r\n    `}\r\n`;\r\n\r\nconst ModalContainer = styled.div`\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  position: relative;\r\n  max-width: 90%;\r\n  max-height: 90%;\r\n  overflow-y: auto;\r\n  ${(props) =>\r\n    props.animate &&\r\n    css`\r\n      animation: ${slideIn} 0.3s ease-out forwards;\r\n    `}\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  position: absolute;\r\n  top: 16px;\r\n  right: 16px;\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.25rem;\r\n  color: #333;\r\n\r\n  &:hover {\r\n    color: #555;\r\n  }\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n  padding: 16px;\r\n`;\r\n\r\nconst ModalTitle = styled.h2`\r\n  font-size: 1.5rem;\r\n  margin-bottom: 8px;\r\n  color: #333;\r\n`;\r\n\r\nconst ModalBody = styled.div`\r\n  font-size: 1rem;\r\n  color: #555;\r\n`;\r\n\r\n// Modal Component\r\nconst Modal = ({\r\n  isModalOpen,\r\n  closeModal,\r\n  title,\r\n  children,\r\n  animate = true,\r\n}) => {\r\n  useEffect(() => {\r\n    if (isModalOpen) {\r\n      document.body.style.overflow = \"hidden\";\r\n    } else {\r\n      document.body.style.overflow = \"\";\r\n    }\r\n    return () => {\r\n      document.body.style.overflow = \"\";\r\n    };\r\n  }, [isModalOpen]);\r\n\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.key === \"Escape\" && isModalOpen) {\r\n        closeModal();\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", handleEsc);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleEsc);\r\n    };\r\n  }, [isModalOpen, closeModal]);\r\n\r\n  if (!isModalOpen) return null;\r\n\r\n  return ReactDOM.createPortal(\r\n    <Overlay animate={animate} onClick={closeModal}>\r\n      <ModalContainer\r\n        animate={animate}\r\n        onClick={(e) => e.stopPropagation()}\r\n        aria-modal=\"true\"\r\n        role=\"dialog\"\r\n        aria-labelledby=\"modal-title\"\r\n      >\r\n        <CloseButton onClick={closeModal} aria-label=\"Close Modal\">\r\n          <XIcon />\r\n        </CloseButton>\r\n        <ModalContent>\r\n          {title && <ModalTitle id=\"modal-title\">{title}</ModalTitle>}\r\n          <ModalBody>{children}</ModalBody>\r\n        </ModalContent>\r\n      </ModalContainer>\r\n    </Overlay>,\r\n    document.getElementById(\"modal-root\")\r\n  );\r\n};\r\n\r\nModal.propTypes = {\r\n  isModalOpen: PropTypes.bool.isRequired,\r\n  closeModal: PropTypes.func.isRequired,\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n  animate: PropTypes.bool, // Enable or disable animations\r\n};\r\n\r\nexport default Modal;\r\n"],"names":[],"sourceRoot":""}