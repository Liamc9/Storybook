{"version":3,"file":"3866.3827d272.iframe.bundle.js","mappings":";;;;;AAWA;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;ACvDA;;;AAIA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;;;;;;;AAUA;;;;;;;AAYA;;;;;AAKA;;;AAQA;;;;;;;;;;;;AAYA;;;;AAMA;;;;AAMA;;;;AAMA;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;AAiGA;;;;;;;ACzPA;AACA;AACA;AACA;;;;AAMA;AACA;AACA;;AAIA;AACA;;AAEA;;AAIA;;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;AAQA;AACA;;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;;;AAKA","sources":["webpack://storybook/./src/components/Lettz/components/MessageForm.jsx","webpack://storybook/./src/components/Lettz/views/RoomsView.jsx","webpack://storybook/./src/components/atoms/Drawers/BottomDrawer.jsx","webpack://storybook/./src/components/atoms/carousels/ImageCarousel2.jsx"],"sourcesContent":["// src/components/MessageForm.jsx\r\n\r\nimport React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { toast } from \"react-toastify\"; // Import toast\r\n\r\nconst FormContainer = styled.div`\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  flex: 1;\r\n  resize: none;\r\n  padding: 10px;\r\n  font-size: 1rem;\r\n  border: 2px solid #ddd;\r\n  border-radius: 4px;\r\n  margin-bottom: 20px;\r\n  outline: none;\r\n\r\n  &:focus {\r\n    border-color: #007bff;\r\n  }\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n  background-color: #28a745;\r\n  color: #fff;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.75rem 1.5rem;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  align-self: flex-end;\r\n\r\n  &:hover {\r\n    background-color: #218838;\r\n  }\r\n\r\n  &:disabled {\r\n    background-color: #6c757d;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst MessageForm = ({ onSend, onClose }) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [sending, setSending] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!message.trim()) {\r\n      toast.error(\"Please enter a message.\");\r\n      return;\r\n    }\r\n\r\n    setSending(true);\r\n\r\n    try {\r\n      // Call the onSend function passed from the parent\r\n      await onSend(message);\r\n\r\n      // Optionally, close the drawer after sending the message\r\n      onClose();\r\n\r\n      // Reset the form\r\n      setMessage(\"\");\r\n\r\n      // Show success toast\r\n      toast.success(\"Message sent successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n      toast.error(\"Failed to send the message. Please try again.\");\r\n    } finally {\r\n      setSending(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormContainer>\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        style={{ display: \"flex\", flexDirection: \"column\", height: \"100%\" }}\r\n      >\r\n        <TextArea\r\n          placeholder=\"Type your message here...\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          rows={5}\r\n        />\r\n        <SendButton type=\"submit\" disabled={sending}>\r\n          {sending ? \"Sending...\" : \"Send Message\"}\r\n        </SendButton>\r\n      </form>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default MessageForm;\r\n","// src/components/RoomsView.jsx\r\n\r\nimport React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ImageCarousel2 from \"../../atoms/carousels/ImageCarousel2\";\r\nimport { CalendarIcon, LocationIcon } from \"../../Branding/icons/Icons\";\r\nimport BottomDrawer from \"../../atoms/Drawers/BottomDrawer\";\r\nimport MessageForm from \"../components/MessageForm\";\r\nimport { useNavigate } from \"react-router-dom\"; \r\n\r\n\r\n\r\n// Styled Components (Moved from Rooms.jsx)\r\nconst RoomContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding-bottom: 100px; /* Space for the fixed bottom bar */\r\n`;\r\nconst ImageContainer = styled.div`\r\n  aspect-ratio: 5 / 4;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst RoomTitle = styled.h1`\r\n  font-size: 2rem;\r\n  color: #333;\r\n  font-weight: bold;\r\n  margin-left: 1rem;\r\n`;\r\n\r\nconst DatesContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 90%;\r\n  margin: 1rem auto 0;\r\n  padding: 0.5rem;\r\n  border: 2px solid #ddd;\r\n  border-radius: 8px;\r\n  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);\r\n\r\n  .icon-container {\r\n    flex: 0 0 20%; /* 20% of the container */\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    svg {\r\n      width: 30px;\r\n      height: 30px;\r\n    }\r\n  }\r\n\r\n  .dates {\r\n    display: flex;\r\n    flex: 1;\r\n    justify-content: space-between;\r\n\r\n    .date-item {\r\n      flex: 0 0 40%; /* Each section takes 40% of the container */\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: flex-start; /* Changed from 'left' to 'flex-start' */\r\n      margin-left: 2rem;\r\n\r\n      .date-label {\r\n        font-size: 1rem;\r\n        font-weight: 600; /* semi-bold */\r\n        color: #555;\r\n      }\r\n\r\n      .date-value {\r\n        font-size: 1.4rem;\r\n        font-weight: bold;\r\n        color: #333;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst SectionHeader = styled.h2`\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  color: #333;\r\n  margin-top: 2rem;\r\n  text-align: left;\r\n  width: 100%;\r\n  margin-left: 1rem;\r\n`;\r\n\r\nconst SectionContent = styled.div`\r\n  font-size: 1rem;\r\n  color: #666;\r\n  text-align: left;\r\n  width: 100%;\r\n  line-height: 1.5;\r\n  margin-left: 1rem;\r\n`;\r\n\r\n// New Styled Components for Location\r\nconst LocationContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px; /* Space between address and map */\r\n  width: 90%;\r\n`;\r\n\r\nconst AddressText = styled.span`\r\n  font-size: 1.1rem;\r\n  color: #666;\r\n`;\r\n\r\n// Styled components for the drawer and message form\r\nconst FixedBottomBar = styled.div`\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  background-color: #fff;\r\n  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem 1rem;\r\n  z-index: 20;\r\n`;\r\n\r\nconst RentContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst RentLabel = styled.div`\r\n  font-size: 0.8rem;\r\n  font-weight: 400;\r\n  color: #999;\r\n`;\r\n\r\nconst RentText = styled.div`\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  color: #333;\r\n`;\r\n\r\nconst SendMessageButton = styled.button`\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.5rem 1.5rem;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: #0056b3;\r\n  }\r\n\r\n  &:disabled {\r\n    background-color: #aaa;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst ErrorContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 80vh;\r\n  font-size: 1.5rem;\r\n  color: red;\r\n`;\r\n\r\n// Display Component\r\nconst RoomsView = ({\r\n  roomData,\r\n  handleSend,\r\n  currentUser,\r\n  id,\r\n}) => {\r\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  if (!roomData) {\r\n    return <ErrorContainer>Room not found.</ErrorContainer>;\r\n  }\r\n\r\n  const handleSendMessage = () => {\r\n    if (!currentUser) {\r\n      // Redirect to login if the user is not logged in\r\n      navigate(\"/login\", { state: { from: `/rooms/${id}` } });\r\n      return;\r\n    }\r\n\r\n    // Open the message form drawer\r\n    setIsDrawerOpen(true);\r\n  };\r\n\r\n  const closeDrawer = () => {\r\n    setIsDrawerOpen(false);\r\n  };\r\n\r\n  const images = roomData.images && Array.isArray(roomData.images) ? roomData.images : [];\r\n\r\n  return (\r\n    <>\r\n      <RoomContainer>\r\n        <ImageContainer>\r\n          {images.length > 0 ? (\r\n            <ImageCarousel2 images={images} />\r\n          ) : (\r\n            <p>No images available</p>\r\n          )}\r\n        </ImageContainer>\r\n        <RoomTitle>{roomData.title || \"Room Title\"}</RoomTitle>\r\n        <DatesContainer>\r\n          <div className=\"icon-container\">\r\n            <CalendarIcon />\r\n          </div>\r\n          <div className=\"dates\">\r\n            <div className=\"date-item\">\r\n              <span className=\"date-label\">From</span>\r\n              <span className=\"date-value\">{roomData.startDate || \"Anytime\"}</span>\r\n            </div>\r\n            <div className=\"date-item\">\r\n              <span className=\"date-label\">To</span>\r\n              <span className=\"date-value\">{roomData.endDate || \"Anytime\"}</span>\r\n            </div>\r\n          </div>\r\n        </DatesContainer>\r\n\r\n        <SectionHeader>Location</SectionHeader>\r\n        <SectionContent>\r\n          <LocationContainer>\r\n            <LocationIcon className=\"w-6 h-6\" />\r\n            <AddressText>\r\n              {roomData.streetAddress ? roomData.streetAddress : \"No address provided\"}, {roomData.city ? roomData.city : \"City\"}, {roomData.county ? roomData.county : \"County\"}, {roomData.eircode ? roomData.eircode : \"eirCode\"}\r\n            </AddressText>\r\n          </LocationContainer>\r\n        </SectionContent>\r\n\r\n        <SectionHeader>Description</SectionHeader>\r\n        <SectionContent>\r\n          {roomData.description ? roomData.description : \"No description provided\"}\r\n        </SectionContent>\r\n      </RoomContainer>\r\n      <FixedBottomBar>\r\n        <RentContainer>\r\n          <RentLabel>Monthly Rent</RentLabel>\r\n          <RentText>€{roomData.rent !== undefined ? roomData.rent : \"N/A\"}</RentText>\r\n        </RentContainer>\r\n        <SendMessageButton onClick={handleSendMessage} disabled={roomData.userId === currentUser?.uid}>\r\n          Send Message\r\n        </SendMessageButton>\r\n      </FixedBottomBar>\r\n      <BottomDrawer\r\n        isOpen={isDrawerOpen}\r\n        onClose={closeDrawer}\r\n        transitionDuration={300}\r\n        height=\"50%\" // Adjust height as needed\r\n        maxWidth=\"600px\"\r\n      >\r\n        <MessageForm onSend={handleSend} onClose={closeDrawer} />\r\n      </BottomDrawer>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default RoomsView;\r\n","// src/components/Drawers/BottomDrawer.jsx\r\n\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst DrawerContainer = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  z-index: 50;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  pointer-events: ${({ isOpen }) => (isOpen ? \"auto\" : \"none\")};\r\n`;\r\n\r\nconst BackgroundOverlay = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n`;\r\n\r\nconst Drawer = styled.div`\r\n  width: 100%;\r\n  max-width: ${({ maxWidth }) => maxWidth};\r\n  height: ${({ autoHeight, height }) => (autoHeight ? \"auto\" : height)};\r\n  background-color: white;\r\n  ${({ noRoundedCorners }) =>\r\n    noRoundedCorners\r\n      ? css`\r\n          border-radius: 0;\r\n        `\r\n      : css`\r\n          border-radius: 16px 16px 0 0;\r\n        `}\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  transform: ${({ isOpen }) => (isOpen ? \"translateY(0)\" : \"translateY(100%)\")};\r\n  transition: transform ${({ transitionDuration }) => transitionDuration}ms ease-in-out,\r\n    opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  width: 48px;\r\n  height: 4px;\r\n  background-color: #d1d5db;\r\n  border-radius: 9999px;\r\n  margin: 8px auto;\r\n  display: ${({ hideHandle }) => (hideHandle ? \"none\" : \"block\")};\r\n`;\r\n\r\nconst DrawerContent = styled.div`\r\n  flex: 1;\r\n  overflow-y: ${({ autoHeight }) => (autoHeight ? \"visible\" : \"auto\")};\r\n`;\r\n\r\nexport default function BottomDrawer({\r\n  isOpen,\r\n  onClose,\r\n  children,\r\n  transitionDuration = 300,\r\n  height = \"80vh\",\r\n  autoHeight = false,\r\n  maxWidth = \"600px\",\r\n  hideHandle = false, // New prop to hide handle\r\n  noRoundedCorners = false, // New prop to remove rounded corners\r\n}) {\r\n  const drawerRef = useRef();\r\n\r\n  // Close the drawer when clicking outside of it\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (drawerRef.current && !drawerRef.current.contains(event.target)) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"hidden\"; // Prevent background scrolling\r\n    } else {\r\n      document.body.style.overflow = \"auto\";\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"auto\";\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  return createPortal(\r\n    <DrawerContainer isOpen={isOpen} transitionDuration={transitionDuration}>\r\n      {/* Background overlay */}\r\n      <BackgroundOverlay isOpen={isOpen} onClick={onClose} transitionDuration={transitionDuration} />\r\n\r\n      {/* Drawer content */}\r\n      <Drawer\r\n        ref={drawerRef}\r\n        isOpen={isOpen}\r\n        transitionDuration={transitionDuration}\r\n        height={height}\r\n        autoHeight={autoHeight}\r\n        maxWidth={maxWidth}\r\n        noRoundedCorners={noRoundedCorners} // Pass the new prop\r\n      >\r\n        {/* Drawer handle */}\r\n        <Handle hideHandle={hideHandle} /> {/* Pass the new prop */}\r\n        {/* Scrollable or auto-adjusted content area */}\r\n        <DrawerContent autoHeight={autoHeight}>{children}</DrawerContent>\r\n      </Drawer>\r\n    </DrawerContainer>,\r\n    document.body\r\n  );\r\n}\r\n","// src/components/cards/ImageCarousel2.jsx\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport \"swiper/css\";\r\nimport \"swiper/css/pagination\";\r\nimport { Pagination, A11y } from \"swiper/modules\";\r\n\r\nconst ImageContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%; /* Ensure the container takes full height of its parent */\r\n  position: relative;\r\n  overflow: hidden;\r\n  margin: 0;\r\n\r\n  /* Swiper Pagination customization */\r\n  .swiper-pagination {\r\n    bottom: 10px;\r\n    left: 0;\r\n    right: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    /* Remove transform since flex handles centering */\r\n  }\r\n\r\n  .swiper-pagination-bullet {\r\n    background: rgba(255, 255, 255, 0.5);\r\n    width: 10px;\r\n    height: 10px;\r\n    opacity: 1;\r\n    margin: 0 5px;\r\n    border-radius: 50%;\r\n    transition: background 0.3s ease;\r\n  }\r\n\r\n  .swiper-pagination-bullet-active {\r\n    background: #ffffff;\r\n  }\r\n\r\n  .swiper-slide img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst SwiperWrapper = styled(Swiper)`\r\n  width: 100%;\r\n  height: 100%; /* Ensure Swiper takes full height */\r\n`;\r\n\r\nconst ImageCarousel2 = ({ images }) => {\r\n  return (\r\n    <ImageContainer>\r\n      <SwiperWrapper\r\n        modules={[Pagination, A11y]}\r\n        spaceBetween={0}\r\n        slidesPerView={1}\r\n        pagination={{ clickable: true }}\r\n        loop={images.length > 1}\r\n      >\r\n        {images.map((imgUrl, index) => (\r\n          <SwiperSlide key={index}>\r\n            <img src={imgUrl} alt={`Image ${index + 1}`} />\r\n          </SwiperSlide>\r\n        ))}\r\n      </SwiperWrapper>\r\n    </ImageContainer>\r\n  );\r\n};\r\n\r\nImageCarousel2.propTypes = {\r\n  images: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default ImageCarousel2;\r\n"],"names":[],"sourceRoot":""}