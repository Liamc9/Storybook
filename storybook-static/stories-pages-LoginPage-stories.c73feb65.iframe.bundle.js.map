{"version":3,"file":"stories-pages-LoginPage-stories.c73feb65.iframe.bundle.js","mappings":";;;;;;;;;;AAuJA;;;AAKA;;;AAKA;AACA;;;;;;AAQA;;;AAMA;;AAEA;;;;;AAOA;;;;;AAOA;;AAIA;AAGA;;;;;AAKA;;AAIA;;;;;AAOA;;;;;;;;;;AAUA;;;;;AAOA;;;AAKA;;;;;;;AAOA;;;;;;;;;;;AAaA;;;;AAMA;;;AAKA;;;AAKA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;AC3SA;;AAEA;AAGA","sources":["webpack://storybook/./src/components/pages/LoginPage.jsx","webpack://storybook/./src/stories/pages/LoginPage.stories.js"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Input } from \"liamc9npm\";\r\nimport { GoogleIcon, LettzIcon } from \"../Branding/icons/Icons\";\r\n\r\nconst LoginPage = ({\r\n  email,\r\n  setEmail,\r\n  password,\r\n  setPassword,\r\n  reenterPassword,\r\n  setReenterPassword,\r\n  error,\r\n  isSignupComplete,\r\n  setIsSignupComplete, // Add this prop to toggle the signup state\r\n  isLoading,\r\n  termsAccepted,\r\n  setTermsAccepted,\r\n  handleSignup,\r\n  handleLogin,\r\n  setShowSignUp,\r\n  isSignUp,\r\n  onForgotPassword,\r\n  resetEmailSent,\r\n  onGoogleSignIn,\r\n  themeColor = \"#A855F7\",\r\n}) => {\r\n  if (isSignupComplete) {\r\n    return (\r\n      <Container>\r\n        <Title>Signup Successful!</Title>\r\n        <p>\r\n          Please check your email <strong>{email}</strong> for a verification link to\r\n          activate your account.\r\n        </p>\r\n        <ButtonWrapper>\r\n          {/* Reset the signup state to show the login view */}\r\n          <Button\r\n            themeColor={themeColor}\r\n            onClick={() => {\r\n              setIsSignupComplete(false); // Reset the signup complete state\r\n              setShowSignUp(false); // Switch to login view\r\n            }}\r\n          >\r\n            Return to Login\r\n          </Button>\r\n        </ButtonWrapper>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Container>\r\n      <IconWrapper1>\r\n        <LettzIconStyled themeColor={themeColor} />\r\n      </IconWrapper1>\r\n      <Title>{isSignUp ? \"Sign up to Lettz to get started!\" : \"Sign in to Lettz\"}</Title>\r\n      {resetEmailSent && <Message>A password reset email has been sent to {email}.</Message>}\r\n      {error && <Message error>{error}</Message>}\r\n      <Form onSubmit={isSignUp ? handleSignup : handleLogin}>\r\n        <Input\r\n          name=\"email\"\r\n          id=\"email\"\r\n          type=\"email\"\r\n          label=\"Email\"\r\n          color={themeColor}\r\n          required\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <Input\r\n          name=\"password\"\r\n          id=\"password\"\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          color={themeColor}\r\n          required\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        {isSignUp && (\r\n          <Input\r\n            name=\"reenterpassword\"\r\n            id=\"reenterpassword\"\r\n            type=\"password\"\r\n            label=\"Re-enter Password\"\r\n            color={themeColor}\r\n            required\r\n            value={reenterPassword}\r\n            onChange={(e) => setReenterPassword(e.target.value)}\r\n          />\r\n        )}\r\n        {isSignUp && (\r\n          <CheckboxWrapper>\r\n            <Checkbox\r\n              type=\"checkbox\"\r\n              checked={termsAccepted}\r\n              onChange={(e) => setTermsAccepted(e.target.checked)}\r\n              required\r\n            />\r\n            <span>\r\n              I accept the <Link themeColor={themeColor} href=\"/terms\">Terms and Conditions</Link> and <Link themeColor={themeColor} href=\"/privacy\">Privacy Policy</Link>.\r\n            </span>\r\n          </CheckboxWrapper>\r\n        )}\r\n        {!isSignUp && (\r\n          <RememberMeContainer>\r\n            <ForgotPasswordButton themeColor={themeColor} type=\"button\" onClick={onForgotPassword}>\r\n              Forgot your password?\r\n            </ForgotPasswordButton>\r\n          </RememberMeContainer>\r\n        )}\r\n        <ButtonWrapper>\r\n          <Button themeColor={themeColor} type=\"submit\" disabled={isLoading}>\r\n            {isLoading ? (isSignUp ? \"Signing up...\" : \"Signing in...\") : isSignUp ? \"Sign Up\" : \"Sign In\"}\r\n          </Button>\r\n        </ButtonWrapper>\r\n      </Form>\r\n      <Divider>\r\n        <HorizontalLine />\r\n        <p>or</p>\r\n        <HorizontalLine />\r\n      </Divider>\r\n      <OAuthButton onClick={onGoogleSignIn}>\r\n        <IconWrapper>\r\n          <GoogleIcon />\r\n        </IconWrapper>\r\n        Sign in with Google\r\n      </OAuthButton>\r\n      <LoginWrapper>\r\n        <p>\r\n          {isSignUp ? \"Already have an account?\" : \"Don't have an account?\"} {\" \"}\r\n          <LoginLink themeColor={themeColor} onClick={() => setShowSignUp(!isSignUp)}>{isSignUp ? \"Login\" : \"Sign up\"}</LoginLink>\r\n        </p>\r\n      </LoginWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\n\r\nexport default LoginPage;\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  position: relative;\r\n  @media (max-width: 600px) {\r\n    max-width: 100%;\r\n    padding: 20px 10px;\r\n  }\r\n`;\r\n\r\nconst IconWrapper1 = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst LettzIconStyled = styled(LettzIcon)`\r\n  width: 50px;\r\n  height: 50px;\r\n  color: ${(props) => props.themeColor}; /* Apply themeColor to currentColor */\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  color: #1f2937;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\n\r\nconst Message = styled.p`\r\n  margin: 10px 0;\r\n  font-size: 0.875rem;\r\n  color: ${(props) => (props.error ? \"#e74c3c\" : \"#2ecc71\")};\r\n  text-align: center;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst CheckboxWrapper = styled.label`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst Checkbox = styled.input`\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Link = styled.a`\r\n  color: ${(props) => props.themeColor};\r\n  text-decoration: none;\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  margin-top: 24px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  border-radius: 8px;\r\n  background-color: ${(props) => props.themeColor};\r\n  color: white;\r\n  padding: 12px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n\r\n  &:disabled {\r\n    background-color: #d3d3d3;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst RememberMeContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: end;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst ForgotPasswordButton = styled.button`\r\n  background: none;\r\n  border: none;\r\n  color: ${(props) => props.themeColor};\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nconst Divider = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 20px 0;\r\n  gap: 16px;\r\n  p {\r\n    margin: 0;\r\n    font-size: 1rem;\r\n    color: #6b7280;\r\n  }\r\n`;\r\n\r\nconst HorizontalLine = styled.hr`\r\n  flex: 1;\r\n  border: none;\r\n  border-top: 1px solid #d1d5db;\r\n`;\r\n\r\nconst LoginWrapper = styled.div`\r\n  margin-top: 16px;\r\n  text-align: center;\r\n`;\r\n\r\nconst LoginLink = styled.button`\r\n  background: none;\r\n  border: none;\r\n  color: ${(props) => props.themeColor};\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nconst OAuthButton = styled.button`\r\n  padding: 12px;\r\n  border: none;\r\n  width: 100%;\r\n  border-radius: 30px;\r\n  border:  2px solid #ccc;\r\n  background-color:  #fff;\r\n  color:  #000;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  margin-top: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  &:hover {\r\n    background-color: #ccc;\r\n  }\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nconst IconWrapper = styled.span`\r\n  display: inline-flex;\r\n  align-items: center;\r\n  margin-right: 10px;\r\n\r\n  svg {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n`;\r\n\r\n","import React from 'react';\r\nimport LoginPage from '../../components/pages/LoginPage';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  padding: 2rem;\r\n  background-color: ${(props) => (props.isSignupComplete ? '#DFF0D8' : '#FFFFFF')};\r\n`;\r\n\r\nexport default {\r\n  title: 'Pages/Login',\r\n  component: LoginPage,\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\n# LoginPage Component\r\n\r\nThe **LoginPage** component handles user authentication processes, including sign-up, sign-in, and password recovery. It provides a seamless interface for users to create accounts, log in, and manage their credentials.\r\n\r\n## Features\r\n\r\n- **Sign Up Mode:** Allows new users to register by providing necessary details.\r\n- **Sign In Mode:** Enables existing users to log into their accounts.\r\n- **Signup Completion:** Displays a confirmation message upon successful registration.\r\n- **Loading State:** Indicates ongoing authentication processes.\r\n\r\n## Props\r\n\r\n- **email**: _string_ — User's email address.\r\n- **password**: _string_ — User's password.\r\n- **username**: _string_ — User's chosen username (required for sign-up).\r\n- **reenterPassword**: _string_ — Password confirmation (required for sign-up).\r\n- **error**: _string_ — Error message to display authentication failures.\r\n- **isSignupComplete**: _boolean_ — Indicates if the sign-up process is complete.\r\n- **isLoading**: _boolean_ — Shows a loading indicator during authentication.\r\n- **termsAccepted**: _boolean_ — Whether the user has accepted terms and conditions.\r\n- **isSignUp**: _boolean_ — Toggles between sign-up and sign-in modes.\r\n- **resetEmailSent**: _boolean_ — Indicates if a password reset email has been sent.\r\n\r\n## Actions\r\n\r\n- **setEmail**: _function_ — Handles email input changes.\r\n- **setPassword**: _function_ — Handles password input changes.\r\n- **setUsername**: _function_ — Handles username input changes.\r\n- **setReenterPassword**: _function_ — Handles password confirmation input changes.\r\n- **setTermsAccepted**: _function_ — Toggles terms and conditions acceptance.\r\n- **handleSignup**: _function_ — Initiates the sign-up process.\r\n- **handleLogin**: _function_ — Initiates the login process.\r\n- **setShowSignUp**: _function_ — Toggles between sign-up and sign-in views.\r\n- **onForgotPassword**: _function_ — Handles password recovery requests.\r\n- **onGoogleSignIn**: _function_ — Initiates Google OAuth sign-in.\r\n- **onAppleSignIn**: _function_ — Initiates Apple OAuth sign-in.\r\n\r\n## Usage Example\r\n\r\nBelow is an example showing how to integrate the **LoginPage** component into a React application:\r\n\r\n\\`\\`\\`jsx\r\nimport React, { useState } from 'react';\r\nimport LoginPage from './components/authentication/LoginPage';\r\n\r\nconst App = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [reenterPassword, setReenterPassword] = useState('');\r\n  const [termsAccepted, setTermsAccepted] = useState(false);\r\n  const [isSignUp, setIsSignUp] = useState(true);\r\n\r\n  const handleSignup = () => {\r\n    // Implement signup logic here\r\n    console.log('Signing up with:', { email, password, username, reenterPassword, termsAccepted });\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    // Implement login logic here\r\n    console.log('Logging in with:', { email, password });\r\n  };\r\n\r\n  return (\r\n    <LoginPage\r\n      email={email}\r\n      password={password}\r\n      username={username}\r\n      reenterPassword={reenterPassword}\r\n      termsAccepted={termsAccepted}\r\n      isSignUp={isSignUp}\r\n      setEmail={(newEmail) => setEmail(newEmail)}\r\n      setPassword={(newPassword) => setPassword(newPassword)}\r\n      setUsername={(newUsername) => setUsername(newUsername)}\r\n      setReenterPassword={(newReenterPassword) => setReenterPassword(newReenterPassword)}\r\n      setTermsAccepted={(accepted) => setTermsAccepted(accepted)}\r\n      handleSignup={handleSignup}\r\n      handleLogin={handleLogin}\r\n      setShowSignUp={(show) => setIsSignUp(show)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default App;\r\n\\`\\`\\`\r\n\r\n## Examples\r\n\r\n- **Sign Up Mode**\r\n- **Sign In Mode**\r\n- **Signup Complete**\r\n- **Loading State**\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    setEmail: { action: 'setEmail' },\r\n    setPassword: { action: 'setPassword' },\r\n    setUsername: { action: 'setUsername' },\r\n    setReenterPassword: { action: 'setReenterPassword' },\r\n    setTermsAccepted: { action: 'setTermsAccepted' },\r\n    handleSignup: { action: 'handleSignup' },\r\n    handleLogin: { action: 'handleLogin' },\r\n    setShowSignUp: { action: 'setShowSignUp' },\r\n    onForgotPassword: { action: 'onForgotPassword' },\r\n    onGoogleSignIn: { action: 'onGoogleSignIn' },\r\n    onAppleSignIn: { action: 'onAppleSignIn' },\r\n  },\r\n};\r\n\r\nconst Template = (args) => (\r\n  <Container isSignupComplete={args.isSignupComplete}>\r\n    <LoginPage {...args} />\r\n  </Container>\r\n);\r\n\r\nexport const SignUpMode = Template.bind({});\r\nSignUpMode.args = {\r\n  email: '',\r\n  password: '',\r\n  username: '',\r\n  reenterPassword: '',\r\n  error: '',\r\n  isSignupComplete: false,\r\n  isLoading: false,\r\n  termsAccepted: false,\r\n  isSignUp: true,\r\n  resetEmailSent: false,\r\n};\r\n\r\nexport const SignInMode = Template.bind({});\r\nSignInMode.args = {\r\n  email: '',\r\n  password: '',\r\n  error: '',\r\n  isSignupComplete: false,\r\n  isLoading: false,\r\n  isSignUp: false,\r\n  resetEmailSent: false,\r\n};\r\n\r\nexport const SignupComplete = Template.bind({});\r\nSignupComplete.args = {\r\n  email: 'user@example.com',\r\n  isSignupComplete: true,\r\n};\r\n\r\nexport const LoadingState = Template.bind({});\r\nLoadingState.args = {\r\n  isLoading: true,\r\n};\r\n"],"names":[],"sourceRoot":""}