{"version":3,"file":"9583.6560176b.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AAsYA;;;;;AAOA;;;AAQA;;;;;;AAMA;;;;;AAUA;;AAEA;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;AAsBA;;;;AAIA;;;;AAMA;;;;AASA;;;;AAIA;;;;;;;;;;AChhBA;;;;AAMA;;;;;;;AASA;;;;;;;;;;;AAaA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;;;;AASA;;AAEA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;AAgBA;;AAEA;;;;;;;;;;;;AAwBA;;;AChHA;;;;;;;;;AAWA;AAGA;AACA;AACA;AAGA;AACA;AACA;;;;;;AAQA;;;AAGA;;;AAIA;;;ACnCA;;;;;;;;;;AAYA;AAGA;AACA;AACA;AACA;;;;;;AAQA;;;AAGA;;;AAIA;;;;;;;AASA;AACA","sources":["webpack://storybook/./src/components/Lettz/components/ListingForm.jsx","webpack://storybook/./src/components/atoms/inputs/CheckedItem.jsx","webpack://storybook/./src/components/atoms/inputs/Input.jsx","webpack://storybook/./src/components/atoms/inputs/SelectInput.jsx"],"sourcesContent":["// src/components/molecules/ListingForm.jsx\r\n\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Input from \"../../atoms/inputs/Input\";\r\nimport CheckedItem from \"../../atoms/inputs/CheckedItem\";\r\nimport { ChevronLeftIcon, HomeIcon } from \"../../Branding/icons/Icons\";\r\nimport SelectInput from \"../../atoms/inputs/SelectInput\";\r\nimport ImageUploading from \"../../atoms/forms/ImageUploading\";\r\nimport { toast } from \"react-toastify\"; // Ensure only toast methods are imported\r\nimport { v4 as uuidv4 } from \"uuid\"; // Import UUID for unique IDs\r\n\r\n\r\nconst ListingForm = ({ onClose, onSubmit, initialData }) => {\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [formData, setFormData] = useState({\r\n    streetAddress: \"\",\r\n    city: \"\",\r\n    county: \"\",\r\n    eircode: \"\",\r\n    rent: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    type: \"\",\r\n    description: \"\",\r\n  });\r\n  const [uploadedImages, setUploadedImages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (initialData) {\r\n      setFormData({\r\n        streetAddress: initialData.streetAddress || \"\",\r\n        city: initialData.city || \"\",\r\n        county: initialData.county || \"\",\r\n        eircode: initialData.eircode || \"\",\r\n        rent: initialData.rent || \"\",\r\n        startDate: initialData.startDate || \"\",\r\n        endDate: initialData.endDate || \"\",\r\n        type: initialData.type || \"\",\r\n        description: initialData.description || \"\",\r\n      });\r\n\r\n      if (initialData.images?.length) {\r\n        setUploadedImages(\r\n          initialData.images.map((url) => ({\r\n            id: uuidv4(), // Assign a unique ID\r\n            file: null,\r\n            preview: url,\r\n            url,\r\n          }))\r\n        );\r\n      }\r\n    }\r\n  }, [initialData]);\r\n\r\n  const handleChange = useCallback((key, value) => {\r\n    setFormData((prev) => ({ ...prev, [key]: value }));\r\n  }, []);\r\n\r\n  const resetForm = useCallback(() => {\r\n    setCurrentPage(0);\r\n    setFormData({\r\n      streetAddress: \"\",\r\n      city: \"\",\r\n      county: \"\",\r\n      eircode: \"\",\r\n      rent: \"\",\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n      type: \"\",\r\n      description: \"\",\r\n    });\r\n    uploadedImages.forEach((image) => {\r\n      if (image.preview && image.file) {\r\n        URL.revokeObjectURL(image.preview);\r\n      }\r\n    });\r\n    setUploadedImages([]);\r\n    onClose();\r\n  }, [uploadedImages, onClose]);\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    const requiredFields = [\r\n      \"streetAddress\",\r\n      \"city\",\r\n      \"county\",\r\n      \"eircode\",\r\n      \"rent\",\r\n      \"startDate\",\r\n      \"endDate\",\r\n      \"type\",\r\n      \"description\",\r\n    ];\r\n\r\n    const missingFields = requiredFields.filter(\r\n      (field) => !formData[field]?.toString().trim()\r\n    );\r\n\r\n    if (missingFields.length) {\r\n      toast.error(\r\n        `Please fill in all required fields: ${missingFields.join(\", \")}`,\r\n        { position: \"top-center\", autoClose: 5000 }\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (uploadedImages.length === 0) {\r\n      toast.error(\"Please upload at least one image.\", {\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Separate existing image URLs and new image Files\r\n    const imageFiles = uploadedImages\r\n      .filter((image) => image.file)\r\n      .map((image) => image.file);\r\n    const imageUrls = uploadedImages\r\n      .filter((image) => image.url)\r\n      .map((image) => image.url);\r\n\r\n    // Combine existing URLs with new image Files\r\n    // Depending on backend requirements, you might need to handle these separately\r\n    const combinedImages = [...imageUrls, ...imageFiles];\r\n\r\n    const validImages = imageFiles.filter((file) => file instanceof File);\r\n    if (validImages.length !== imageFiles.length) {\r\n      toast.warn(\"Some images are invalid and will not be submitted.\", {\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n      });\r\n    }\r\n\r\n    onSubmit({ ...formData, images: combinedImages });\r\n    resetForm();\r\n  }, [formData, uploadedImages, onSubmit, resetForm]);\r\n\r\n  const pageHeadings = [\"Location\", \"Sublet Details & Images\"];\r\n  const pages = [\r\n    <PageOne key=\"page1\" formData={formData} handleChange={handleChange} />,\r\n    <PageTwo\r\n      key=\"page2\"\r\n      formData={formData}\r\n      handleChange={handleChange}\r\n      uploadedImages={uploadedImages}\r\n      setUploadedImages={setUploadedImages}\r\n    />,\r\n  ];\r\n\r\n  const progressPercentage = ((currentPage + 1) / pages.length) * 100;\r\n\r\n  const isFormValid = () => {\r\n    const requiredFields = [\r\n      \"streetAddress\",\r\n      \"city\",\r\n      \"county\",\r\n      \"eircode\",\r\n      \"rent\",\r\n      \"startDate\",\r\n      \"endDate\",\r\n      \"type\",\r\n      \"description\",\r\n    ];\r\n    return (\r\n      requiredFields.every((field) => formData[field]?.toString().trim()) &&\r\n      uploadedImages.length > 0\r\n    );\r\n  };\r\n\r\n  return (\r\n    <FormContainer>\r\n      {currentPage === 0 && (\r\n        <BackButton onClick={resetForm} aria-label=\"Close form\">\r\n          <ChevronLeftIcon className=\"w-8 h-8\" />\r\n        </BackButton>\r\n      )}\r\n      <Heading>{pageHeadings[currentPage]}</Heading>\r\n      <ProgressBar\r\n        role=\"progressbar\"\r\n        aria-valuenow={progressPercentage}\r\n        aria-valuemin=\"0\"\r\n        aria-valuemax=\"100\"\r\n      >\r\n        <ProgressFill style={{ width: `${progressPercentage}%` }} />\r\n      </ProgressBar>\r\n      <Content>{pages[currentPage]}</Content>\r\n      <NavButtons hasPrev={currentPage > 0}>\r\n        {currentPage > 0 && (\r\n          <PrevButton onClick={() => setCurrentPage((prev) => prev - 1)}>\r\n            Previous\r\n          </PrevButton>\r\n        )}\r\n        {currentPage < pages.length - 1 ? (\r\n          <NextButton onClick={() => setCurrentPage((prev) => prev + 1)}>\r\n            Next\r\n          </NextButton>\r\n        ) : (\r\n          <SubmitButton onClick={handleSubmit}>\r\n            {initialData ? \"Update\" : \"Submit\"}\r\n          </SubmitButton>\r\n        )}\r\n      </NavButtons>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\n// PageOne Component\r\nconst PageOne = ({ formData, handleChange }) => (\r\n  <FormSection>\r\n    <SectionHeader>Address</SectionHeader>\r\n    <Input\r\n      name=\"streetAddress\"\r\n      type=\"text\"\r\n      label=\"Street Address\"\r\n      color=\"#A855F7\"\r\n      value={formData.streetAddress}\r\n      onChange={(e) => handleChange(\"streetAddress\", e.target.value)}\r\n      required\r\n    />\r\n    <Input\r\n      name=\"city\"\r\n      type=\"text\"\r\n      label=\"Town/City\"\r\n      color=\"#A855F7\"\r\n      value={formData.city}\r\n      onChange={(e) => handleChange(\"city\", e.target.value)}\r\n      required\r\n    />\r\n    <SelectInput\r\n      name=\"county\"\r\n      label=\"County\"\r\n      value={formData.county}\r\n      onChange={(e) => handleChange(\"county\", e.target.value)}\r\n      color=\"#A855F7\"\r\n      options={countiesOptions}\r\n      required\r\n    />\r\n    <Input\r\n      name=\"eircode\"\r\n      type=\"text\"\r\n      label=\"Eircode\"\r\n      color=\"#A855F7\"\r\n      value={formData.eircode}\r\n      onChange={(e) => handleChange(\"eircode\", e.target.value)}\r\n      required\r\n    />\r\n\r\n    <SectionHeader>Property Type</SectionHeader>\r\n    <CheckboxGroup>\r\n      {[\"House\", \"Apartment\", \"Room\"].map((type) => (\r\n        <CheckedItem\r\n          key={type}\r\n          label={type}\r\n          height=\"5rem\"\r\n          width=\"5rem\"\r\n          color=\"#A855F7\"\r\n          checked={formData.type === type}\r\n          onChange={() => handleChange(\"type\", type)}\r\n          svg={<HomeIcon className=\"w-6 h-6\" />}\r\n          required\r\n        />\r\n      ))}\r\n    </CheckboxGroup>\r\n  </FormSection>\r\n);\r\n\r\n// PageTwo Component\r\nconst PageTwo = ({ formData, handleChange, uploadedImages, setUploadedImages }) => (\r\n  <FormSection>\r\n    <SectionHeader>Sublet Details</SectionHeader>\r\n    <Input\r\n      name=\"rent\"\r\n      type=\"number\"\r\n      label=\"Monthly Rent (â‚¬)\"\r\n      color=\"#A855F7\"\r\n      value={formData.rent}\r\n      onChange={(e) => handleChange(\"rent\", e.target.value)}\r\n      required\r\n    />\r\n    <DateSelectors>\r\n      {[\"startDate\", \"endDate\"].map((dateField) => (\r\n        <SelectInput\r\n          key={dateField}\r\n          name={dateField}\r\n          label={dateField === \"startDate\" ? \"Start Date\" : \"End Date\"}\r\n          color=\"#A855F7\"\r\n          value={formData[dateField]}\r\n          onChange={(e) => handleChange(dateField, e.target.value)}\r\n          options={monthsOptions}\r\n          required\r\n        />\r\n      ))}\r\n    </DateSelectors>\r\n    <Input\r\n      name=\"description\"\r\n      type=\"textarea\"\r\n      label=\"Description\"\r\n      color=\"#A855F7\"\r\n      value={formData.description}\r\n      onChange={(e) => handleChange(\"description\", e.target.value)}\r\n      required\r\n    />\r\n\r\n    <SectionHeader>Images</SectionHeader>\r\n    <ImageUploading\r\n      uploadedImages={uploadedImages}\r\n      setUploadedImages={setUploadedImages}\r\n      maxImages={6}\r\n      acceptedFormats={[\"image/jpeg\", \"image/png\", \"image/gif\"]}\r\n      customMessages={{\r\n        maxLimit: \"You can only upload up to {maxImages} images.\",\r\n        invalidFormat: \"Only JPG, PNG, and GIF formats are allowed.\",\r\n        success: \"You have successfully uploaded {count} images.\",\r\n        rearrange: \"You can rearrange the order of images by dragging them.\",\r\n      }}\r\n    />\r\n  </FormSection>\r\n);\r\n\r\n// Options for Counties and Months\r\nconst countiesOptions = [\r\n  \"Antrim\",\r\n  \"Armagh\",\r\n  \"Carlow\",\r\n  \"Cavan\",\r\n  \"Clare\",\r\n  \"Cork\",\r\n  \"Derry\",\r\n  \"Donegal\",\r\n  \"Down\",\r\n  \"Dublin\",\r\n  \"Fermanagh\",\r\n  \"Galway\",\r\n  \"Kerry\",\r\n  \"Kildare\",\r\n  \"Kilkenny\",\r\n  \"Laois\",\r\n  \"Leitrim\",\r\n  \"Limerick\",\r\n  \"Longford\",\r\n  \"Louth\",\r\n  \"Mayo\",\r\n  \"Meath\",\r\n  \"Monaghan\",\r\n  \"Offaly\",\r\n  \"Roscommon\",\r\n  \"Sligo\",\r\n  \"Tipperary\",\r\n  \"Tyrone\",\r\n  \"Waterford\",\r\n  \"Westmeath\",\r\n  \"Wexford\",\r\n  \"Wicklow\",\r\n].map((county) => ({ value: county, label: county }));\r\n\r\nconst monthsOptions = [\r\n  { value: \"\", label: \"Select Month...\" },\r\n  { value: \"Jan\", label: \"Jan\" },\r\n  { value: \"Feb\", label: \"Feb\" },\r\n  { value: \"Mar\", label: \"Mar\" },\r\n  { value: \"Apr\", label: \"Apr\" },\r\n  { value: \"May\", label: \"May\" },\r\n  { value: \"Jun\", label: \"Jun\" },\r\n  { value: \"Jul\", label: \"Jul\" },\r\n  { value: \"Aug\", label: \"Aug\" },\r\n  { value: \"Sept\", label: \"Sept\" },\r\n  { value: \"Oct\", label: \"Oct\" },\r\n  { value: \"Nov\", label: \"Nov\" },\r\n  { value: \"Dec\", label: \"Dec\" },\r\n];\r\n\r\n// Styled Components\r\n\r\nconst FormContainer = styled.div`\r\n  position: relative;\r\n  max-width: 600px;\r\n  margin: 0px auto 40px; /* Added top margin for spacing */\r\n  padding: 20px 30px;\r\n  background: #ffffff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 80vh; /* Adjusted height for better spacing */\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  border-radius: 8px;\r\n\r\n  @media (max-width: 640px) {\r\n    padding: 15px 20px;\r\n    min-height: auto;\r\n  }\r\n`;\r\n\r\nconst Heading = styled.h1`\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  font-size: 1.75rem;\r\n  color: #333333;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  flex: 1;\r\n  margin-bottom: 80px; /* Increased bottom margin for better spacing */\r\n`;\r\n\r\n// Progress Bar Styled Components\r\nconst ProgressBar = styled.div`\r\n  width: 100%;\r\n  background-color: #e5e7eb;\r\n  height: 8px;\r\n  border-radius: 4px;\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nconst ProgressFill = styled.div`\r\n  background-color: #a855f7;\r\n  height: 100%;\r\n  border-radius: 4px;\r\n  transition: width 0.3s ease-in-out;\r\n`;\r\n\r\n// Updated NavButtons with Top Border\r\nconst NavButtons = styled.div`\r\n  display: flex;\r\n  justify-content: ${({ hasPrev }) => (hasPrev ? \"space-between\" : \"flex-end\")};\r\n  padding: 10px 0;\r\n  background-color: #ffffff;\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  border-top: 1px solid #e0e0e0;\r\n  z-index: 1000;\r\n\r\n  @media (max-width: 640px) {\r\n    padding: 8px 10px;\r\n  }\r\n`;\r\n\r\n// Styled Components for Buttons\r\n\r\nconst PrevButton = styled.button`\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 4px;\r\n  background-color: #d1d5db; /* Gray background */\r\n  color: #fff;\r\n  transition: background-color 0.2s;\r\n\r\n  &:hover {\r\n    background-color: #a1a1aa; /* Darker gray on hover */\r\n  }\r\n\r\n  @media (max-width: 640px) {\r\n    padding: 8px 16px;\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nconst NextButton = styled.button`\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 4px;\r\n  background-color: #000000; /* Black background */\r\n  color: #fff;\r\n  transition: background-color 0.2s;\r\n\r\n  &:hover {\r\n    background-color: #333333; /* Darker black on hover */\r\n  }\r\n\r\n  @media (max-width: 640px) {\r\n    padding: 8px 16px;\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nconst SubmitButton = styled.button`\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 4px;\r\n  background-color: #a855f7; /* Tailwind's purple-500 */\r\n  color: #fff;\r\n  transition: background-color 0.2s;\r\n  /* Removed opacity and pointer-events to keep the button always enabled */\r\n\r\n  &:hover {\r\n    background-color: #9333ea; /* Tailwind's purple-600 */\r\n  }\r\n\r\n  @media (max-width: 640px) {\r\n    padding: 8px 16px;\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nconst BackButton = styled.button`\r\n  position: absolute;\r\n  top: 20px;\r\n  left: 20px;\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: color 0.2s;\r\n\r\n  &:hover {\r\n    color: #9333ea;\r\n  }\r\n\r\n  @media (max-width: 640px) {\r\n    top: 15px;\r\n    left: 15px;\r\n  }\r\n`;\r\n\r\n// Additional Styled Components for Layout\r\nconst FormSection = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n`;\r\n\r\nconst CheckboxGroup = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 1rem;\r\n`;\r\n\r\nconst DateSelectors = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 1rem;\r\n`;\r\n\r\n// Section Header Styled Component\r\nconst SectionHeader = styled.h2`\r\n  font-size: 1.25rem;\r\n  font-weight: bold;\r\n  color: #333;\r\n`;\r\n\r\nexport default ListingForm;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Styled Components\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 91.666667%; /* Equivalent to w-11/12 */\r\n  margin: 0 auto;\r\n  user-select: none;\r\n  gap: 1rem;\r\n  max-width: 500px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  color: #94a3b8; /* Equivalent to text-slate-400 */\r\n  position: relative;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst HiddenCheckbox = styled.input.attrs({ type: \"checkbox\" })`\r\n  height: 1px;\r\n  width: 1px;\r\n  opacity: 0;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  border: 3px solid #cbd5e1; /* Equivalent to border-slate-300 */\r\n  background-color: #ffffff; /* bg-white */\r\n  border-radius: 0.5rem; /* rounded-lg */\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* shadow-lg */\r\n  transition: all 0.2s ease-in-out;\r\n  width: ${({ width }) => width};\r\n  height: ${({ height }) => height};\r\n\r\n  /* Checked State */\r\n  ${HiddenCheckbox}:checked + & {\r\n    border-color: ${({ color }) => color || \"#3b82f6\"}; /* Default to blue-500 */\r\n    box-shadow: 0 4px 6px ${({ color }) => color}33; /* 10% opacity */\r\n    color: ${({ color }) => color || \"#3b82f6\"};\r\n\r\n    &::before {\r\n      content: 'âœ“';\r\n      position: absolute;\r\n      top: 0.25rem;\r\n      left: 0.25rem;\r\n      width: 1.25rem;\r\n      height: 1.25rem;\r\n      border: 3px solid ${({ color }) => color || \"#3b82f6\"};\r\n      border-radius: 50%;\r\n      background-color: ${({ color }) => color || \"#3b82f6\"};\r\n      opacity: 1;\r\n      transform: scale(1);\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      color: #ffffff;\r\n      font-size: 0.75rem;\r\n      transition: all 0.2s ease-in-out;\r\n    }\r\n  }\r\n\r\n  /* Hover State */\r\n  &:hover {\r\n    border-color: ${({ color }) => color || \"#3b82f6\"};\r\n\r\n    &::before {\r\n      transform: scale(1);\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  /* Pseudo-element before */\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 0.25rem;\r\n    left: 0.25rem;\r\n    width: 1.25rem;\r\n    height: 1.25rem;\r\n    border: 3px solid ${({ color }) => color || \"#3b82f6\"};\r\n    border-radius: 50%;\r\n    background-color: ${({ color }) => color || \"#3b82f6\"};\r\n    opacity: 0;\r\n    transform: scale(0);\r\n    transition: all 0.2s ease-in-out;\r\n  }\r\n\r\n  /* SVG and Label Text */\r\n  > span {\r\n    transition: all 0.2s ease-in-out;\r\n    text-align: center;\r\n    font-size: 0.875rem; /* Equivalent to text-sm */\r\n  }\r\n`;\r\n\r\n// Component\r\n\r\nconst CheckedItem = ({\r\n  label,\r\n  svg,\r\n  onChange,\r\n  checked,\r\n  height = \"7rem\",\r\n  width = \"7rem\",\r\n  color = \"#3b82f6\", // Default to blue-500\r\n}) => {\r\n  return (\r\n    <Container>\r\n      <Label>\r\n        <HiddenCheckbox onChange={onChange} checked={checked} />\r\n        <StyledSpan height={height} width={width} color={color}>\r\n          <span>{svg}</span>\r\n          <span>{label}</span>\r\n        </StyledSpan>\r\n      </Label>\r\n    </Container>\r\n  );\r\n};\r\n\r\n\r\nexport default CheckedItem;\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst InputContainer = styled.div`\r\n  position: relative;\r\n  font-family: sans-serif;\r\n`;\r\n\r\nconst sharedInputStyles = css`\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  border: 2px solid;\r\n  background: transparent;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  transition: border-color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  ${sharedInputStyles}\r\n  border-color: ${({ isFocused, color }) => (isFocused ? color : '#D1D5DB')};\r\n`;\r\n\r\nconst StyledTextarea = styled.textarea`\r\n  ${sharedInputStyles}\r\n  border-color: ${({ isFocused, color }) => (isFocused ? color : '#D1D5DB')};\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  position: absolute;\r\n  left: 0;\r\n  margin: 0.25rem;\r\n  padding: 0.25rem;\r\n  background: white;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n  font-size: 1rem;\r\n  pointer-events: none;\r\n  transform: ${({ hasValue, isFocused }) =>\r\n    hasValue || isFocused ? 'translate(1.25rem, -70%) scale(0.9)' : 'translate(0.625rem, 0)'};\r\n  transform-origin: left top;\r\n  transition: transform 0.3s ease-in-out, color 0.3s ease-in-out;\r\n`;\r\n\r\nconst Input = ({ name, type, value, onChange, color = '#000', label }) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const handleFocus = () => setIsFocused(true);\r\n  const handleBlur = () => setIsFocused(false);\r\n\r\n  const inputElement =\r\n    type === 'textarea' ? (\r\n      <StyledTextarea\r\n        name={name}\r\n        id={name}\r\n        required\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        isFocused={isFocused}\r\n        color={color}\r\n      />\r\n    ) : (\r\n      <StyledInput\r\n        name={name}\r\n        id={name}\r\n        type={type}\r\n        required\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        isFocused={isFocused}\r\n        color={color}\r\n      />\r\n    );\r\n\r\n  return (\r\n    <InputContainer>\r\n      {inputElement}\r\n      <StyledLabel\r\n        htmlFor={name}\r\n        isFocused={isFocused}\r\n        color={color}\r\n        hasValue={Boolean(value)}\r\n      >\r\n        {label}\r\n      </StyledLabel>\r\n    </InputContainer>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { ChevronDownIcon } from '../../Branding/icons/Icons';\r\n\r\nconst SelectContainer = styled.div`\r\n  position: relative;\r\n  font-family: sans-serif;\r\n`;\r\n\r\nconst sharedSelectStyles = css`\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  border: 2px solid;\r\n  background: transparent;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  appearance: none;\r\n  transition: border-color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n  ${sharedSelectStyles}\r\n  border-color: ${({ isFocused, color }) => (isFocused ? color : '#D1D5DB')};\r\n  color: ${({ value }) => (value ? '#000' : '#6B7280')}; /* Default placeholder style */\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  position: absolute;\r\n  left: 0;\r\n  margin: 0.25rem;\r\n  padding: 0.25rem;\r\n  background: white;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n  font-size: 1rem;\r\n  pointer-events: none;\r\n  transform: ${({ hasValue, isFocused }) =>\r\n    hasValue || isFocused ? 'translate(1.25rem, -70%) scale(0.9)' : 'translate(0.625rem, 0)'};\r\n  transform-origin: left top;\r\n  transition: transform 0.3s ease-in-out, color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledArrow = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 0.75rem;\r\n  transform: translateY(-50%);\r\n  pointer-events: none;\r\n  font-size: 1rem;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n`;\r\n\r\nconst SelectInput = ({ name, value, onChange, color = '#000', label, options = [] }) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const handleFocus = () => setIsFocused(true);\r\n  const handleBlur = () => setIsFocused(false);\r\n\r\n  return (\r\n    <SelectContainer>\r\n      <StyledSelect\r\n        name={name}\r\n        id={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        isFocused={isFocused}\r\n        color={color}\r\n      >\r\n        <option value=\"\" disabled>\r\n        </option>\r\n        {options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </StyledSelect>\r\n      <StyledLabel\r\n        htmlFor={name}\r\n        isFocused={isFocused}\r\n        color={color}\r\n        hasValue={Boolean(value)}\r\n      >\r\n        {label}\r\n      </StyledLabel>\r\n      <StyledArrow isFocused={isFocused} color={color}>\r\n        <ChevronDownIcon className='w-4 h-4'/>\r\n      </StyledArrow>\r\n    </SelectContainer>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n"],"names":[],"sourceRoot":""}