{"version":3,"file":"stories-atoms-menuitem-SelectField-stories.3b0c71d1.iframe.bundle.js","mappings":";;;;AAQA;;;;;AAOA;;;;;;AAQA;;;;;;;;;;AAYA;;;;;;;;;;AA2CA","sources":["webpack://storybook/./src/components/atoms/menuitem/SelectField.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ChevronUpDownIcon } from '../../Branding/icons/Icons';\r\n\r\nconst FieldContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\n\r\nconst FieldName = styled.div`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #111827;\r\n  margin-right: auto;\r\n`;\r\n\r\nconst FieldValue = styled.div`\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #6b7280;\r\n  cursor: pointer;\r\n  margin-right: 12px;\r\n`;\r\n\r\nconst Dropdown = styled.select`\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #111827;\r\n  border: 1px solid #d1d5db; /* Equivalent to border-gray-300 */\r\n  border-radius: 4px;\r\n  padding: 4px 8px;\r\n  width: auto;\r\n  background: white;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ChevronWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  color: #6b7280;\r\n  transition: color 0.3s;\r\n\r\n  &:hover {\r\n    color: #4b5563;\r\n  }\r\n`;\r\n\r\nconst SelectField = ({ name, value, options, onChange, placeholder = 'Select value...' }) => {\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n  const dropdownRef = useRef(null);\r\n\r\n  const toggleDropdown = () => {\r\n    setIsDropdownOpen(true);\r\n  };\r\n\r\n  const handleSelectChange = (e) => {\r\n    const newValue = e.target.value;\r\n    setIsDropdownOpen(false);\r\n    onChange(newValue);\r\n  };\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setIsDropdownOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  // Find the label for the current value\r\n  const getLabelForValue = (val) => {\r\n    const option = options.find((opt) =>\r\n      typeof opt === 'object' ? opt.value === val : opt === val\r\n    );\r\n    return typeof option === 'object' ? option.label : option;\r\n  };\r\n\r\n  return (\r\n    <FieldContainer ref={dropdownRef}>\r\n      <FieldName>{name}</FieldName>\r\n      {isDropdownOpen ? (\r\n        <Dropdown\r\n          value={value}\r\n          onChange={handleSelectChange}\r\n          autoFocus\r\n          onBlur={() => setIsDropdownOpen(false)}\r\n        >\r\n          <option value=\"\" disabled>\r\n            {placeholder}\r\n          </option>\r\n          {options.map((option) =>\r\n            typeof option === 'object' ? (\r\n              <option key={option.value} value={option.value}>\r\n                {option.label}\r\n              </option>\r\n            ) : (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            )\r\n          )}\r\n        </Dropdown>\r\n      ) : (\r\n        <FieldValue onClick={toggleDropdown}>\r\n          {value ? getLabelForValue(value) : placeholder}\r\n        </FieldValue>\r\n      )}\r\n      <ChevronWrapper onClick={toggleDropdown}>\r\n        <ChevronUpDownIcon className=\"w-6 h-6\" />\r\n      </ChevronWrapper>\r\n    </FieldContainer>\r\n  );\r\n};\r\n\r\nexport default SelectField;\r\n"],"names":[],"sourceRoot":""}