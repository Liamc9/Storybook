{"version":3,"file":"stories-Lettz-components-ConversationList-stories.78e91936.iframe.bundle.js","mappings":";;;;;;;;;;;AAkBA;;;;;AAOA;;;;;AAOA;;;;AAMA;;;AAKA;;;AAKA;;;;;;;;;AAmDA;AC5FA","sources":["webpack://storybook/./src/components/Lettz/components/ConversationItem.jsx","webpack://storybook/./src/components/Lettz/components/ConversationList.jsx"],"sourcesContent":["// src/components/ConversationItem.jsx\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Styled Components\r\nconst ItemWrapper = styled(Link)`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100px; /* Equivalent to h-20 */\r\n  padding: 1rem;\r\n  text-decoration: none;\r\n  color: inherit;\r\n  position: relative; /* To position the timestamp */\r\n  &:hover {\r\n    background-color: #f9fafb;\r\n  }\r\n`;\r\n\r\nconst Avatar = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 9999px; /* Equivalent to rounded-full */\r\n  margin-right: 1rem;\r\n`;\r\n\r\nconst Details = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  position: relative; /* To position the timestamp */\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst Name = styled.span`\r\n  font-size: 1.3rem; /* Equivalent to text-base */\r\n  font-weight: 600; /* Equivalent to font-semibold */\r\n`;\r\n\r\nconst Timestamp = styled.span`\r\n  font-size: 0.75rem; /* Smaller font size */\r\n  color: #9ca3af; /* Equivalent to text-gray-400 */\r\n`;\r\n\r\nconst LastMessage = styled.span`\r\n  font-size: 0.875rem; /* Equivalent to text-sm */\r\n  color: #6b7280; /* Equivalent to text-gray-500 */\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2; /* Limit to 2 lines */\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  width: 80%;\r\n`;\r\n\r\n// Helper Function to Format Timestamp\r\nconst formatTimestamp = (timestamp) => {\r\n  if (!timestamp) return '';\r\n\r\n  // Convert Firestore Timestamp to Date\r\n  const messageDate = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\r\n  const now = new Date();\r\n\r\n  // Calculate difference in days\r\n  const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n  const startOfMessageDay = new Date(\r\n    messageDate.getFullYear(),\r\n    messageDate.getMonth(),\r\n    messageDate.getDate()\r\n  );\r\n\r\n  const diffTime = startOfToday - startOfMessageDay;\r\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n  if (diffDays === 0) {\r\n    return 'Today';\r\n  } else if (diffDays === 1) {\r\n    return 'Yesterday';\r\n  } else {\r\n    return `${diffDays} days ago`;\r\n  }\r\n};\r\n\r\n// Component\r\nconst ConversationItem = ({ conversation, currentUser }) => {\r\n\r\n  // Find the other participant\r\n  const otherParticipant = conversation.participants.find(p => p.uid !== currentUser.uid);\r\n  if (!otherParticipant) {\r\n    return null;\r\n  }\r\n\r\n  // Format the timestamp\r\n  const formattedTimestamp = conversation.lastMessage?.timestamp\r\n    ? formatTimestamp(conversation.lastMessage.timestamp)\r\n    : '';\r\n\r\n  return (\r\n    <ItemWrapper to={`/conversation/${conversation.id}`}>\r\n      <Avatar src={otherParticipant.avatarUrl} alt={`${otherParticipant.name}'s avatar`} />\r\n      <Details>\r\n        <Header>\r\n          <Name>{otherParticipant.name}</Name>\r\n          <Timestamp>{formattedTimestamp}</Timestamp>\r\n        </Header>\r\n        <LastMessage>{conversation.lastMessage.text}</LastMessage>\r\n      </Details>\r\n    </ItemWrapper>\r\n  );\r\n};\r\n\r\nexport default ConversationItem;\r\n","// src/components/ConversationList.js\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport ConversationItem from './ConversationItem';\r\n\r\n// Styled Components\r\nconst ListWrapper = styled.div`\r\n`;\r\n\r\n\r\nconst ConversationList = ({ conversations, currentUser }) => {\r\n  return (\r\n    <ListWrapper>\r\n      {conversations.map((conversation) => (\r\n        <ConversationItem key={conversation.id} conversation={conversation} currentUser={currentUser}/>\r\n      ))}\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default ConversationList;\r\n"],"names":[],"sourceRoot":""}