{"version":3,"file":"stories-disdat-components-PollItem-stories.b28e1175.iframe.bundle.js","mappings":";;;;;;;;;AAmBA;;;;;;;AAUA;;;;;;;;;;AAaA;;;AAMA;;;;;;;;;;;;;;;AAkBA;;;;;;;;AAWA;;AAEA;AACA;;;;;;;AAUA;;;AAGA;;;;;AAQA;;;;;;;;AAoCA","sources":["webpack://storybook/./src/components/disdat/components/PollItem.jsx"],"sourcesContent":["// src/components/PollItem.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\n// Container for the entire component\r\nconst Container = styled.div`\r\nposition: relative;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  max-width: 600px;\r\n  width: 100%;\r\n  margin: 20px auto;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  font-family: Arial, sans-serif;\r\n`;\r\n\r\n// Header containing the question and category badge\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  font-size: 1.2rem;\r\n  font-weight: 500;\r\n`;\r\n\r\n// Category badge styling\r\nconst Badge = styled.span`\r\nposition: absolute;\r\n    top: 4px;\r\n    right: 4px;\r\n  background-color: #fff;\r\n  border: 1px solid #007bff;\r\n  color: #007bff;\r\n  border-radius: 12px;\r\n  padding: 5px 10px;\r\n  font-size: 12px;\r\n`;\r\n\r\n// Container for the option buttons\r\nconst ButtonsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\n// Option button styling\r\nconst OptionButton = styled.button`\r\n  width: 48%;\r\n  padding: 20px;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  border-radius: 5px;\r\n  background-color: #000;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease, color 0.3s ease;\r\n\r\n  &:hover {\r\n    background-color: #007bff;\r\n    color: white;\r\n  }\r\n`;\r\n\r\n// Percentage bar container\r\nconst BarContainer = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  width: 100%;\r\n  height: 60px; /* Increased height to accommodate percentage labels */\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  background-color: #f0f0f0;\r\n`;\r\n\r\n// Individual bar segment styling\r\nconst BarSegment = styled.div`\r\n  position: relative;\r\n  width: ${props => props.percentage}%;\r\n  background-color: ${props => props.color};\r\n  transition: width 2s ease, background-color 0.5s ease;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\n// Percentage label styling\r\nconst PercentageLabel = styled.span`\r\n  position: absolute;\r\n  top: 5px;\r\n  ${props => (props.align === 'left' ? 'left: 10px;' : 'right: 10px;')}\r\n  font-size: 0.8rem;\r\n  color: #fff;\r\n  border-radius: 4px;\r\n  font-weight: 600;\r\n`;\r\n\r\n// Option name styling within the bar\r\nconst OptionName = styled.span`\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  color: white;\r\n  white-space: nowrap;\r\n  overflow: visible; /* Allow overflow */\r\n  text-overflow: unset;\r\n  z-index: 1;\r\n`;\r\n\r\nconst PollItem = ({\r\n  question,\r\n  category,\r\n  opt1,\r\n  opt2,\r\n  percOpt1,\r\n  percOpt2,\r\n  chosenOpt: initialChosenOpt = null,\r\n}) => {\r\n  const [chosenOpt, setChosenOpt] = useState(initialChosenOpt);\r\n  const [showBar, setShowBar] = useState(!!initialChosenOpt);\r\n  const [displayedPercOpt1, setDisplayedPercOpt1] = useState(50);\r\n  const [displayedPercOpt2, setDisplayedPercOpt2] = useState(50);\r\n\r\n  useEffect(() => {\r\n    if (showBar) {\r\n      // Initialize to 50-50 split\r\n      setDisplayedPercOpt1(50);\r\n      setDisplayedPercOpt2(50);\r\n\r\n      // Trigger transition to actual percentages after a short delay\r\n      const timer = setTimeout(() => {\r\n        setDisplayedPercOpt1(percOpt1);\r\n        setDisplayedPercOpt2(percOpt2);\r\n      }, 100); // 100ms delay for smoother transition\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [showBar, percOpt1, percOpt2]);\r\n\r\n  const handleOptionClick = (option) => {\r\n    setChosenOpt(option);\r\n    setShowBar(true);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <h2 style={{ margin: 0 }}>{question}</h2>\r\n        <Badge>{category}</Badge>\r\n      </Header>\r\n      {!showBar ? (\r\n        <ButtonsContainer>\r\n          <OptionButton\r\n            aria-label={`Select ${opt1}`}\r\n            onClick={() => handleOptionClick(opt1)}\r\n          >\r\n            {opt1}\r\n          </OptionButton>\r\n          <OptionButton\r\n            aria-label={`Select ${opt2}`}\r\n            onClick={() => handleOptionClick(opt2)}\r\n          >\r\n            {opt2}\r\n          </OptionButton>\r\n        </ButtonsContainer>\r\n      ) : (\r\n        <BarContainer>\r\n          <BarSegment\r\n            percentage={displayedPercOpt1}\r\n            color={chosenOpt === opt1 ? '#007bff' : '#000'}\r\n          >\r\n            <PercentageLabel align=\"left\">{`${displayedPercOpt1}%`}</PercentageLabel>\r\n            <OptionName title={opt1}>{opt1}</OptionName>\r\n          </BarSegment>\r\n          <BarSegment\r\n            percentage={displayedPercOpt2}\r\n            color={chosenOpt === opt2 ? '#007bff' : '#000'}\r\n          >\r\n            <PercentageLabel align=\"right\">{`${displayedPercOpt2}%`}</PercentageLabel>\r\n            <OptionName title={opt2}>{opt2}</OptionName>\r\n          </BarSegment>\r\n        </BarContainer>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nPollItem.propTypes = {\r\n  question: PropTypes.string.isRequired,\r\n  category: PropTypes.string.isRequired,\r\n  opt1: PropTypes.string.isRequired,\r\n  opt2: PropTypes.string.isRequired,\r\n  percOpt1: PropTypes.number.isRequired,\r\n  percOpt2: PropTypes.number.isRequired,\r\n  chosenOpt: PropTypes.string,\r\n};\r\n\r\nexport default PollItem;\r\n"],"names":[],"sourceRoot":""}