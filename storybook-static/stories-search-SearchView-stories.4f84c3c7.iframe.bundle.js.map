{"version":3,"file":"stories-search-SearchView-stories.4f84c3c7.iframe.bundle.js","mappings":";;;;;;;AAaA;AACA;AACA;AACA;;;;AAMA;AACA;AACA;;AAIA;AACA;;AAEA;;AAIA;;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;AAQA;AACA;;AAIA;AACA;;;;;ACpDA;;;;AAMA;;;;AAMA;;;;;;;;;;;;AAcA;AACA;;;;;;AAMA;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;;AC7FA;;;;;;;;;;AAYA;AAGA;AACA;AACA;AACA;;;;;;AAQA;;;AAGA;;;AAIA;;;;;;;AASA;AACA;;;ACxCA;;;;;AAOA;;;AAKA;AACA;;;;;AAKA;;AAEA;;;;;;;;;;;;AA+CA;;;;;ACrEA;;AAIA;;AAIA;;;;ACRA;;;ACEA;;;AAKA;;AAOA;;ACZA;;;AAKA;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;AAgBA;;;;AAMA;;;;;;;;AAUA;;;;AAMA;;;;;;;;;;;;;;;;;;AAoBA;AAIA;AACA;;AAIA;AC3FA;;;;AASA","sources":["webpack://storybook/./src/components/atoms/Drawers/BottomDrawer.jsx","webpack://storybook/./src/components/atoms/inputs/RangeSlider.jsx","webpack://storybook/./src/components/atoms/inputs/SelectInput.jsx","webpack://storybook/./src/components/search/Feed.jsx","webpack://storybook/./src/components/search/FeedItem.jsx","webpack://storybook/./src/components/search/FeedItem2.jsx","webpack://storybook/./src/components/search/Filter.jsx","webpack://storybook/./src/components/search/Search2.jsx","webpack://storybook/./src/components/search/Sort.jsx"],"sourcesContent":["// src/components/Drawers/BottomDrawer.jsx\r\n\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst DrawerContainer = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  z-index: 50;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  pointer-events: ${({ isOpen }) => (isOpen ? \"auto\" : \"none\")};\r\n`;\r\n\r\nconst BackgroundOverlay = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n`;\r\n\r\nconst Drawer = styled.div`\r\n  width: 100%;\r\n  max-width: ${({ maxWidth }) => maxWidth};\r\n  height: ${({ autoHeight, height }) => (autoHeight ? \"auto\" : height)};\r\n  background-color: white;\r\n  ${({ noRoundedCorners }) =>\r\n    noRoundedCorners\r\n      ? css`\r\n          border-radius: 0;\r\n        `\r\n      : css`\r\n          border-radius: 16px 16px 0 0;\r\n        `}\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  transform: ${({ isOpen }) => (isOpen ? \"translateY(0)\" : \"translateY(100%)\")};\r\n  transition: transform ${({ transitionDuration }) => transitionDuration}ms ease-in-out,\r\n    opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  width: 48px;\r\n  height: 4px;\r\n  background-color: #d1d5db;\r\n  border-radius: 9999px;\r\n  margin: 8px auto;\r\n  display: ${({ hideHandle }) => (hideHandle ? \"none\" : \"block\")};\r\n`;\r\n\r\nconst DrawerContent = styled.div`\r\n  flex: 1;\r\n  overflow-y: ${({ autoHeight }) => (autoHeight ? \"visible\" : \"auto\")};\r\n`;\r\n\r\nexport default function BottomDrawer({\r\n  isOpen,\r\n  onClose,\r\n  children,\r\n  transitionDuration = 300,\r\n  height = \"80vh\",\r\n  autoHeight = false,\r\n  maxWidth = \"600px\",\r\n  hideHandle = false, // New prop to hide handle\r\n  noRoundedCorners = false, // New prop to remove rounded corners\r\n}) {\r\n  const drawerRef = useRef();\r\n\r\n  // Close the drawer when clicking outside of it\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (drawerRef.current && !drawerRef.current.contains(event.target)) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"hidden\"; // Prevent background scrolling\r\n    } else {\r\n      document.body.style.overflow = \"auto\";\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"auto\";\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  return createPortal(\r\n    <DrawerContainer isOpen={isOpen} transitionDuration={transitionDuration}>\r\n      {/* Background overlay */}\r\n      <BackgroundOverlay isOpen={isOpen} onClick={onClose} transitionDuration={transitionDuration} />\r\n\r\n      {/* Drawer content */}\r\n      <Drawer\r\n        ref={drawerRef}\r\n        isOpen={isOpen}\r\n        transitionDuration={transitionDuration}\r\n        height={height}\r\n        autoHeight={autoHeight}\r\n        maxWidth={maxWidth}\r\n        noRoundedCorners={noRoundedCorners} // Pass the new prop\r\n      >\r\n        {/* Drawer handle */}\r\n        <Handle hideHandle={hideHandle} /> {/* Pass the new prop */}\r\n        {/* Scrollable or auto-adjusted content area */}\r\n        <DrawerContent autoHeight={autoHeight}>{children}</DrawerContent>\r\n      </Drawer>\r\n    </DrawerContainer>,\r\n    document.body\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SliderContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 16px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #333;\r\n`;\r\n\r\nconst RangeInputContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 50px;\r\n`;\r\n\r\nconst Track = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  height: 8px;\r\n  background: #e0e0e0;\r\n  border-radius: 5px;\r\n  width: 100%;\r\n\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    left: ${(props) => props.left}%;\r\n    right: ${(props) => 100 - props.right}%;\r\n    height: 100%;\r\n    background: #A855F7;\r\n    border-radius: 5px;\r\n    z-index: 1;\r\n  }\r\n`;\r\n\r\nconst ThumbValue = styled.div`\r\n  position: absolute;\r\n  top: -10px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #A855F7;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst Slider = styled.input`\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  width: 100%;\r\n  height: 8px;\r\n  background: transparent;\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  z-index: 3;\r\n  pointer-events: none;\r\n\r\n  &::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    width: 16px;\r\n    height: 16px;\r\n    background: #A855F7;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    pointer-events: auto;\r\n  }\r\n\r\n  &::-moz-range-thumb {\r\n    width: 14px;\r\n    height: 14px;\r\n    background: #007bff;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    pointer-events: auto;\r\n  }\r\n`;\r\n\r\n\r\nconst RangeSlider = ({\r\n  min = 0,\r\n  max = 100,\r\n  step = 1,\r\n  minimumGap = 1,\r\n  label = \"Range\",\r\n  valuePrefix = \"\",\r\n  valueSuffix = \"\",\r\n  value,   // receive value as prop\r\n  onChange,\r\n}) => {\r\n  const [range, setRange] = useState(value || [min, max]);\r\n\r\n  // Update internal state when `value` prop changes\r\n  useEffect(() => {\r\n    if (value && Array.isArray(value) && value.length === 2) {\r\n      setRange(value);\r\n    }\r\n  }, [value]);\r\n\r\n  const handleMinChange = (e) => {\r\n    const newMin = Math.min(Number(e.target.value), range[1] - minimumGap);\r\n    const newRange = [newMin, range[1]];\r\n    setRange(newRange);\r\n    if (onChange) onChange(newRange);\r\n  };\r\n\r\n  const handleMaxChange = (e) => {\r\n    const newMax = Math.max(Number(e.target.value), range[0] + minimumGap);\r\n    const newRange = [range[0], newMax];\r\n    setRange(newRange);\r\n    if (onChange) onChange(newRange);\r\n  };\r\n\r\n  const calculatePercentage = (value) => ((value - min) / (max - min)) * 100;\r\n\r\n  return (\r\n    <SliderContainer>\r\n      <Label>{label}</Label>\r\n      <RangeInputContainer>\r\n        <ThumbValue\r\n          style={{\r\n            left: `calc(${calculatePercentage(range[0])}% - 14px)`,\r\n          }}\r\n        >\r\n          {valuePrefix}\r\n          {range[0]}\r\n          {valueSuffix}\r\n        </ThumbValue>\r\n        <ThumbValue\r\n          style={{\r\n            left: `calc(${calculatePercentage(range[1])}% - 14px)`,\r\n          }}\r\n        >\r\n          {valuePrefix}\r\n          {range[1]}\r\n          {valueSuffix}\r\n        </ThumbValue>\r\n        <Track\r\n          left={calculatePercentage(range[0])}\r\n          right={calculatePercentage(range[1])}\r\n        />\r\n        <Slider\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          step={step}\r\n          value={range[0]}\r\n          onChange={handleMinChange}\r\n        />\r\n        <Slider\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          step={step}\r\n          value={range[1]}\r\n          onChange={handleMaxChange}\r\n        />\r\n      </RangeInputContainer>\r\n    </SliderContainer>\r\n  );\r\n};\r\n\r\nexport default RangeSlider;\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { ChevronDownIcon } from '../../Branding/icons/Icons';\r\n\r\nconst SelectContainer = styled.div`\r\n  position: relative;\r\n  font-family: sans-serif;\r\n`;\r\n\r\nconst sharedSelectStyles = css`\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  border: 2px solid;\r\n  background: transparent;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  appearance: none;\r\n  transition: border-color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n  ${sharedSelectStyles}\r\n  border-color: ${({ isFocused, color }) => (isFocused ? color : '#D1D5DB')};\r\n  color: ${({ value }) => (value ? '#000' : '#6B7280')}; /* Default placeholder style */\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  position: absolute;\r\n  left: 0;\r\n  margin: 0.25rem;\r\n  padding: 0.25rem;\r\n  background: white;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n  font-size: 1rem;\r\n  pointer-events: none;\r\n  transform: ${({ hasValue, isFocused }) =>\r\n    hasValue || isFocused ? 'translate(1.25rem, -70%) scale(0.9)' : 'translate(0.625rem, 0)'};\r\n  transform-origin: left top;\r\n  transition: transform 0.3s ease-in-out, color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledArrow = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 0.75rem;\r\n  transform: translateY(-50%);\r\n  pointer-events: none;\r\n  font-size: 1rem;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n`;\r\n\r\nconst SelectInput = ({ name, value, onChange, color = '#000', label, options = [] }) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const handleFocus = () => setIsFocused(true);\r\n  const handleBlur = () => setIsFocused(false);\r\n\r\n  return (\r\n    <SelectContainer>\r\n      <StyledSelect\r\n        name={name}\r\n        id={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        isFocused={isFocused}\r\n        color={color}\r\n        required\r\n      >\r\n        <option value=\"\" disabled>\r\n        </option>\r\n        {options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </StyledSelect>\r\n      <StyledLabel\r\n        htmlFor={name}\r\n        isFocused={isFocused}\r\n        color={color}\r\n        hasValue={Boolean(value)}\r\n      >\r\n        {label}\r\n      </StyledLabel>\r\n      <StyledArrow isFocused={isFocused} color={color}>\r\n        <ChevronDownIcon className='w-4 h-4'/>\r\n      </StyledArrow>\r\n    </SelectContainer>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","// ../../components/search/Feed.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport FeedItem from './FeedItem';\r\nimport FeedLogic from './FeedLogic'; // <--- newly created\r\n\r\n// ---------------------- Styled Components ----------------------\r\nconst FeedContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst PaginationContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n  gap: 8px;\r\n`;\r\n\r\nconst PageButton = styled.button`\r\n  padding: 8px 12px;\r\n  border: none;\r\n  background-color: ${({ active }) => (active ? '#007bff' : '#e0e0e0')};\r\n  color: ${({ active }) => (active ? '#fff' : '#000')};\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  \r\n  &:hover {\r\n    background-color: ${({ active }) => (active ? '#0056b3' : '#ccc')};\r\n  }\r\n`;\r\n\r\nconst LoadMoreButton = styled.button`\r\n  margin: 20px auto;\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    background-color: #0056b3;\r\n  }\r\n`;\r\n\r\n// ---------------------- Feed Component ----------------------\r\nconst Feed = ({\r\n  items = [],\r\n  sortBy,\r\n  selectedFilters = {},\r\n  ItemComponent = FeedItem,\r\n  pagination,         // optional number of items per page\r\n  loadMore,           // optional number of items to load per click\r\n  infiniteScroll,     // optional number of items to load on bottom scroll\r\n  scrollContainerRef  // optional container ref for infinite scrolling\r\n}) => {\r\n\r\n  // -- 1) Retrieve all the logic from FeedLogic\r\n  const {\r\n    itemsToRender,\r\n    pages,\r\n    currentPage,\r\n    setCurrentPage,\r\n    hasMoreItems,\r\n    handleLoadMore\r\n  } = FeedLogic({\r\n    items,\r\n    sortBy,\r\n    selectedFilters,\r\n    pagination,\r\n    loadMore,\r\n    infiniteScroll,\r\n    scrollContainerRef\r\n  });\r\n\r\n  // -- 2) Render\r\n  return (\r\n    <FeedContainer>\r\n      {itemsToRender.map((item, index) => (\r\n        <ItemComponent key={index} data={item} />\r\n      ))}\r\n\r\n      {/* Pagination controls (if pagination is used) */}\r\n      {pages?.length > 1 && (\r\n        <PaginationContainer>\r\n          {pages.map((page) => (\r\n            <PageButton\r\n              key={page}\r\n              active={page === currentPage}\r\n              onClick={() => setCurrentPage(page)}\r\n            >\r\n              {page}\r\n            </PageButton>\r\n          ))}\r\n        </PaginationContainer>\r\n      )}\r\n\r\n      {/* Load-more button (if loadMore is used) */}\r\n      {loadMore && hasMoreItems && (\r\n        <LoadMoreButton onClick={handleLoadMore}>\r\n          Load More\r\n        </LoadMoreButton>\r\n      )}\r\n    </FeedContainer>\r\n  );\r\n};\r\n\r\nexport default Feed;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FeedItemContainer = styled.div`\r\n  border: 1px solid #ccc;\r\n  padding: 1rem;\r\n  border-radius: 4px;\r\n  background: #fff;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  margin: 0 0 0.5rem 0;\r\n`;\r\n\r\nconst Description = styled.p`\r\n  margin: 0;\r\n`;\r\n\r\nconst FeedItem = ({ data }) => {\r\n  return (\r\n    <FeedItemContainer>\r\n      <Title>{data.title}</Title>\r\n      <Description>{data.description}</Description>\r\n    </FeedItemContainer>\r\n  );\r\n};\r\n\r\nexport default FeedItem;\r\n","// ../../components/search/FeedItem2.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ItemContainer = styled.div`\r\n  padding: 1rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst FeedItem2 = ({ data }) => {\r\n  return (\r\n    <ItemContainer>\r\n      <h3>{data.title} (FeedItem2)</h3>\r\n      <p>{data.description}</p>\r\n      <p>Status: {data.status}</p>\r\n      <p>Priority: {data.priority}</p>\r\n      <p>Date: {data.date}</p>\r\n    </ItemContainer>\r\n  );\r\n};\r\n\r\nexport default FeedItem2;\r\n","// Filter.jsx\r\nimport React from 'react';\r\nimport FilterLogic from './FilterLogic';\r\nimport RangeSlider from '../atoms/inputs/RangeSlider';  // Adjust import paths as needed\r\nimport styled from 'styled-components';\r\nimport SelectInput from '../atoms/inputs/SelectInput';\r\n\r\nexport const FilterContainer = styled.div`\r\n  display: grid;\r\n  gap: 2rem;\r\n`;\r\n\r\nexport const GroupContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const GroupLabel = styled.h5`\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\n// Define filter configurations explicitly\r\nconst filtersConfig = {\r\n  status: {\r\n    category: 'status',\r\n    label: 'Status',\r\n    type: 'dropdown',\r\n    options: [\r\n      { value: 'completed', label: 'Completed', initial: false },\r\n      { value: 'pending', label: 'Pending', initial: false },\r\n      { value: 'inProgress', label: 'In Progress', initial: false },\r\n    ],\r\n  },\r\n  priority: {\r\n    category: 'priority',\r\n    label: 'Priority',\r\n    type: 'range',\r\n    options: [\r\n      { value: 'high', label: 'High', initial: false },\r\n      { value: 'medium', label: 'Medium', initial: false },\r\n      { value: 'low', label: 'Low', initial: false },\r\n    ],\r\n  },\r\n};\r\n\r\nconst Filter = ({ onChange }) => (\r\n  <FilterLogic\r\n    filters={Object.values(filtersConfig)}\r\n    onChange={selectedFilters => {\r\n      if (onChange) {\r\n        onChange(selectedFilters); // Pass the selectedFilters up to the parent\r\n      }\r\n    }}\r\n  >\r\n    {({ selectedFilters, setSelection }) => {\r\n      const statusFilter = filtersConfig.status;\r\n      const priorityFilter = filtersConfig.priority;\r\n\r\n      return (\r\n        <FilterContainer>\r\n          {/* Status Dropdown */}\r\n          <GroupContainer>\r\n            <GroupLabel>{statusFilter.label}</GroupLabel>\r\n            <SelectInput\r\n              name={statusFilter.category}\r\n              label={`Select ${statusFilter.label}`}\r\n              value={\r\n                selectedFilters[statusFilter.category] &&\r\n                selectedFilters[statusFilter.category][0]\r\n                  ? selectedFilters[statusFilter.category][0]\r\n                  : ''\r\n              }\r\n              onChange={(e) =>\r\n                setSelection(statusFilter.category, e.target.value)\r\n              }\r\n              options={statusFilter.options}\r\n              color=\"#000\"\r\n            />\r\n          </GroupContainer>\r\n\r\n          {/* Priority Range Slider */}\r\n          <GroupContainer>\r\n            <GroupLabel>{priorityFilter.label}</GroupLabel>\r\n            <RangeSlider\r\n              min={0}\r\n              max={priorityFilter.options.length - 1}\r\n              label={priorityFilter.label}\r\n              onChange={(index) => {\r\n                const value = priorityFilter.options[index]?.value;\r\n                if (value) setSelection(priorityFilter.category, value);\r\n              }}\r\n            />\r\n          </GroupContainer>\r\n        </FilterContainer>\r\n      );\r\n    }}\r\n  </FilterLogic>\r\n);\r\n\r\nexport default Filter;\r\n","// src/components/search/Search2.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport BottomDrawer from '../atoms/Drawers/BottomDrawer'; // adjust path as needed\r\nimport { SearchLogic } from './SearchLogic'; // adjust path as needed\r\n\r\n\r\n// Styled components for Search2 UI\r\nconst Container = styled.div`\r\n  padding: 16px;\r\n`;\r\n\r\nconst SearchInputContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\n  width: 100%;\r\n  padding: 12px 40px 12px 12px; /* Add padding-right for the 'X' button */\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n\r\n  &:focus {\r\n    border-color: #007bff;\r\n    box-shadow: 0 0 4px rgba(0,123,255,0.3);\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  position: absolute;\r\n  right: 12px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  color: #888;\r\n\r\n  &:hover {\r\n    color: #555;\r\n  }\r\n`;\r\n\r\nconst SuggestionsList = styled.ul`\r\n  list-style: none;\r\n  margin: 12px 0 0 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst SuggestionItem = styled.li`\r\n  padding: 10px;\r\n  border-bottom: 1px solid #eee;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: #f7f7f7;\r\n  }\r\n`;\r\n\r\nconst SectionTitle = styled.h4`\r\n  margin: 16px 0 8px;\r\n  font-size: 14px;\r\n  color: #555;\r\n`;\r\n\r\nconst SearchButton = styled.button`\r\n  width: 100%;\r\n  max-width: 300px;\r\n  padding: 10px 12px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 25px;\r\n  background-color: white;\r\n  box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);\r\n  text-align: left;\r\n  cursor: pointer;\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &:hover {\r\n    border-color: #007bff;\r\n  }\r\n`;\r\n\r\n\r\nconst SearchText = styled.span`\r\n  color: ${props => (props.hasQuery ? '#000' : '#888')};\r\n`;\r\n\r\nconst OpenButton = styled(SearchButton)`\r\n  margin: 20px;\r\n`;\r\nconst Search2 = ({ items, onSearch, historyItems = [] }) => {\r\n  const {\r\n    isOpen,\r\n    open,\r\n    close,\r\n    query,\r\n    suggestions,\r\n    lastQuery,\r\n    handleInputChange,\r\n    handleSuggestionClick,\r\n    handleSearchForClick,\r\n  } = SearchLogic({ items, onSearch, historyItems }, { keys: ['title'] });\r\n\r\n  return (\r\n    <>\r\n      <OpenButton onClick={open}>\r\n        <SearchText hasQuery={lastQuery}>{lastQuery || 'Search...'}</SearchText>\r\n      </OpenButton>\r\n      <BottomDrawer isOpen={isOpen} onClose={close}>\r\n        <Container>\r\n          <SearchInputContainer>\r\n            <SearchInput\r\n              type=\"text\"\r\n              value={query}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Search tasks...\"\r\n            />\r\n            {query && (\r\n              <CloseButton onClick={close} aria-label=\"Close Search\">\r\n                &times;\r\n              </CloseButton>\r\n            )}\r\n          </SearchInputContainer>\r\n\r\n          {/* Display historyItems when there's no query */}\r\n          {!query && historyItems.length > 0 && (\r\n            <>\r\n              <SectionTitle>Recent Searches</SectionTitle>\r\n              <SuggestionsList>\r\n                {historyItems.map((item, index) => (\r\n                  <SuggestionItem\r\n                    key={index}\r\n                    onClick={() => handleSuggestionClick(item)}\r\n                  >\r\n                    {item.title}\r\n                  </SuggestionItem>\r\n                ))}\r\n              </SuggestionsList>\r\n            </>\r\n          )}\r\n\r\n          {/* Display suggestions when user types */}\r\n          {query && suggestions.length > 0 && (\r\n            <SuggestionsList>\r\n              {query && (\r\n                <SuggestionItem onClick={handleSearchForClick}>\r\n                  Search For \"{query}\"\r\n                </SuggestionItem>\r\n              )}\r\n              {suggestions.map((item, index) => (\r\n                <SuggestionItem\r\n                  key={index}\r\n                  onClick={() => handleSuggestionClick(item)}\r\n                >\r\n                  {item.title}\r\n                </SuggestionItem>\r\n              ))}\r\n            </SuggestionsList>\r\n          )}\r\n        </Container>\r\n      </BottomDrawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search2;\r\n","// Sort.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport SortLogic from './SortLogic';\r\n\r\nconst SortContainer = styled.div`\r\n`;\r\n\r\nconst Select = styled.select`\r\n  padding: 0.5rem;\r\n  border-radius: 4px;\r\n  border: 1px solid #ccc;\r\n`;\r\n\r\n// Simplified sorting options with labels as values\r\nconst sortingOptions = [\r\n  {\r\n    label: 'Sort By',\r\n    comparator: null,\r\n  },\r\n  {\r\n    label: 'Title: A-Z',\r\n    comparator: (a, b) => a.title.localeCompare(b.title),\r\n  },\r\n  {\r\n    label: 'Title: Z-A',\r\n    comparator: (a, b) => b.title.localeCompare(a.title),\r\n  },\r\n  {\r\n    label: 'Date: Newest',\r\n    comparator: (a, b) => new Date(b.date) - new Date(a.date),\r\n  },\r\n  {\r\n    label: 'Date: Oldest',\r\n    comparator: (a, b) => new Date(a.date) - new Date(b.date),\r\n  },\r\n];\r\n\r\nconst Sort = ({ items, onSortedChange }) => {\r\n  const { updateSort } = SortLogic({ items, onSortedChange });\r\n\r\n  return (\r\n    <SortContainer>\r\n      <Select\r\n        onChange={(e) => {\r\n          const selectedOption = sortingOptions.find(\r\n            (option) => option.label === e.target.value\r\n          );\r\n          updateSort(selectedOption?.comparator || null);\r\n        }}\r\n      >\r\n        {sortingOptions.map((option) => (\r\n          <option value={option.label} key={option.label}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </Select>\r\n    </SortContainer>\r\n  );\r\n};\r\n\r\nexport default Sort;\r\n"],"names":[],"sourceRoot":""}