{"version":3,"file":"stories-atoms-overlays-Drawer-stories.3fd42879.iframe.bundle.js","mappings":";;;;;AAWA;;AAGA;AACA;AACA;AACA;;;;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;;AAEA;;AAIA;;AAIA;;AAGA;;AAEA;AAEA;AACA;AACA;;;AAGA;;;AAgCA;;;ACxDA","sources":["webpack://storybook/./src/components/atoms/overlays/drawers/Drawer.jsx","webpack://storybook/./src/stories/atoms/overlays/Drawer.stories.js"],"sourcesContent":["// src/components/Drawers/Drawer.jsx\r\n\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst DrawerContainer = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  z-index: 50;\r\n  display: flex;\r\n  justify-content: ${({ side }) =>\r\n    side === \"left\" ? \"flex-start\" : \"flex-end\"};\r\n  align-items: stretch;\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  pointer-events: ${({ isOpen }) => (isOpen ? \"auto\" : \"none\")};\r\n`;\r\n\r\nconst BackgroundOverlay = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n`;\r\n\r\nconst DrawerStyle = styled.div`\r\n  width: ${({ width }) => width || \"80%\"};\r\n  max-width: ${({ maxWidth }) => maxWidth || \"400px\"};\r\n  height: ${({ height }) => height || \"100%\"};\r\n  max-height: ${({ maxHeight }) => maxHeight || \"100%\"};\r\n  background-color: white;\r\n  ${({ noRoundedCorners, side }) =>\r\n    noRoundedCorners\r\n      ? css`\r\n          border-radius: 0;\r\n        `\r\n      : side === \"left\"\r\n      ? css`\r\n          border-radius: 0 16px 16px 0;\r\n        `\r\n      : css`\r\n          border-radius: 16px 0 0 16px;\r\n        `}\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  transform: ${({ isOpen, side }) =>\r\n    isOpen ? \"translateX(0)\" : side === \"left\" ? \"translateX(-100%)\" : \"translateX(100%)\"};\r\n  transition: transform ${({ transitionDuration }) => transitionDuration}ms ease-in-out,\r\n    opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst DrawerContent = styled.div`\r\n  flex: 1;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst Drawer = ({\r\n  isOpen,\r\n  onClose,\r\n  children,\r\n  side = \"left\", // \"left\" or \"right\"\r\n  transitionDuration = 300,\r\n  width,\r\n  height,\r\n  maxWidth,\r\n  maxHeight,\r\n  noRoundedCorners = false,\r\n}) => {\r\n  const drawerRef = useRef();\r\n\r\n  // Close the drawer when clicking outside of it\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (drawerRef.current && !drawerRef.current.contains(event.target)) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"hidden\"; // Prevent background scrolling\r\n    } else {\r\n      document.body.style.overflow = \"auto\";\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"auto\";\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  return createPortal(\r\n    <DrawerContainer\r\n      isOpen={isOpen}\r\n      transitionDuration={transitionDuration}\r\n      side={side}\r\n    >\r\n      {/* Background overlay */}\r\n      <BackgroundOverlay\r\n        isOpen={isOpen}\r\n        onClick={onClose}\r\n        transitionDuration={transitionDuration}\r\n      />\r\n\r\n      {/* Drawer content */}\r\n      <DrawerStyle\r\n        ref={drawerRef}\r\n        isOpen={isOpen}\r\n        transitionDuration={transitionDuration}\r\n        width={width}\r\n        height={height}\r\n        maxWidth={maxWidth}\r\n        maxHeight={maxHeight}\r\n        noRoundedCorners={noRoundedCorners}\r\n        side={side}\r\n      >\r\n        <DrawerContent>{children}</DrawerContent>\r\n      </DrawerStyle>\r\n    </DrawerContainer>,\r\n    document.body\r\n  );\r\n};\r\n\r\nexport default Drawer;\r\n","// src/stories/Drawer.stories.jsx\r\n\r\nimport React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Drawer from \"../../../components/atoms/overlays/drawers/Drawer\";\r\n\r\nexport default {\r\n  title: \"Atoms/Overlays/Drawer\",\r\n  component: Drawer,\r\n  argTypes: {\r\n    side: {\r\n      control: { type: \"select\" },\r\n      options: [\"left\", \"right\"],\r\n    },\r\n    transitionDuration: { control: \"number\" },\r\n    width: { control: \"text\" },\r\n    maxWidth: { control: \"text\" },\r\n    height: { control: \"text\" },\r\n    maxHeight: { control: \"text\" },\r\n    noRoundedCorners: { control: \"boolean\" },\r\n    hideHandle: { control: \"boolean\" },\r\n  },\r\n};\r\n\r\nconst Container = styled.div`\r\n  padding: 50px;\r\n  text-align: center;\r\n`;\r\n\r\nconst Template = (args) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  return (\r\n    <Container>\r\n      <button onClick={() => setIsOpen(true)}>Open Drawer</button>\r\n      <Drawer\r\n        {...args}\r\n        isOpen={isOpen}\r\n        onClose={() => setIsOpen(false)}\r\n      >\r\n        <p>This is the content inside the side drawer.</p>\r\n      </Drawer>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Default = Template.bind({});\r\nDefault.args = {\r\n  side: \"left\",\r\n  transitionDuration: 300,\r\n  width: \"70%\",\r\n  maxWidth: \"500px\",\r\n  height: \"100%\",\r\n  maxHeight: \"100%\",\r\n  noRoundedCorners: false,\r\n};\r\n\r\nexport const RightDrawer = Template.bind({});\r\nRightDrawer.args = {\r\n  side: \"right\",\r\n  transitionDuration: 300,\r\n  width: \"70%\",\r\n  maxWidth: \"500px\",\r\n  height: \"100%\",\r\n  maxHeight: \"100%\",\r\n  noRoundedCorners: false,\r\n};\r\n"],"names":[],"sourceRoot":""}