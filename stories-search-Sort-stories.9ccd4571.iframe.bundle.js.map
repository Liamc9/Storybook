{"version":3,"file":"stories-search-Sort-stories.9ccd4571.iframe.bundle.js","mappings":";;;;;AA+BA;;;;;;;;;;;;;;AAgBA;;;;;AAOA;;;;AAMA;;;AAKA;;;;;;;ACpDA;AACA;AACA;AACA;;;;AAMA;AACA;AACA;;AAIA;AACA;;AAEA;;AAIA;;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;AAQA;AACA;;AAIA;AACA;;;ACrDA;;;;;;;;;;AAYA;AAGA;AACA;AACA;AACA;;;;;;AAQA;;;AAGA;;;AAIA;;;;;;;AASA;AACA;AC5CA;;;;AASA","sources":["webpack://storybook/./src/components/search/SortRadio.jsx","webpack://storybook/./src/components/atoms/Drawers/BottomDrawer.jsx","webpack://storybook/./src/components/atoms/inputs/SelectInput.jsx","webpack://storybook/./src/components/search/Sort.jsx"],"sourcesContent":["// SortRadio.jsx\r\nimport React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport BottomDrawer from '../atoms/Drawers/BottomDrawer'; // Adjust import path as needed\r\nimport SortLogic from './SortLogic';\r\nimport { SortIcon } from '../Branding/icons/Icons';\r\n\r\nconst sortingOptions = [\r\n  {\r\n    label: 'Title: A-Z',\r\n    comparator: (a, b) => a.title.localeCompare(b.title),\r\n  },\r\n  {\r\n    label: 'Title: Z-A',\r\n    comparator: (a, b) => b.title.localeCompare(a.title),\r\n  },\r\n  {\r\n    label: 'Date: Newest',\r\n    comparator: (a, b) => new Date(b.date) - new Date(a.date),\r\n  },\r\n  {\r\n    label: 'Date: Oldest',\r\n    comparator: (a, b) => new Date(a.date) - new Date(b.date),\r\n  },\r\n];\r\n\r\nconst RadioContainer = styled.div`\r\n  margin: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n`;\r\n\r\nconst SortButton = styled.button`\r\ndisplay: flex;\r\n  flex-direction: row;\r\n  padding: 0.5rem 1rem;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n\r\n  .icon {\r\n    margin-right: 0.5rem;\r\n    height: 24px;\r\n    width: 24px;\r\n  }\r\n`;\r\n\r\nconst DrawerHeader = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\nfont-weight: bold;\r\nfont-size: 1.5rem;\r\n`;\r\n\r\nconst RadioLabel = styled.label`\r\n  margin-left: 0.5rem;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst RadioOption = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst SortRadio = ({ items, onSortedChange }) => {\r\n  const [isDrawerOpen, setDrawerOpen] = useState(false);\r\n  const { updateSort } = SortLogic({ items, onSortedChange });\r\n\r\n  const handleChange = (e) => {\r\n    const selectedOption = sortingOptions.find(\r\n      (option) => option.label === e.target.value\r\n    );\r\n    updateSort(selectedOption?.comparator || null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SortButton onClick={() => setDrawerOpen(true)}><SortIcon className=\"icon\"/>Sort by</SortButton>\r\n\r\n      <BottomDrawer isOpen={isDrawerOpen} onClose={() => setDrawerOpen(false)}>\r\n        <DrawerHeader>\r\n          <h4>Sort By</h4>\r\n        </DrawerHeader>\r\n        <RadioContainer>\r\n          {sortingOptions.map((option) => (\r\n            <RadioOption key={option.label}>\r\n              <input\r\n                type=\"radio\"\r\n                id={option.label}\r\n                name=\"sort\"\r\n                value={option.label}\r\n                onChange={handleChange}\r\n              />\r\n              <RadioLabel htmlFor={option.label}>{option.label}</RadioLabel>\r\n            </RadioOption>\r\n          ))}\r\n        </RadioContainer>\r\n      </BottomDrawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SortRadio;\r\n","// src/components/Drawers/BottomDrawer.jsx\r\n\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst DrawerContainer = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  z-index: 50;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  pointer-events: ${({ isOpen }) => (isOpen ? \"auto\" : \"none\")};\r\n`;\r\n\r\nconst BackgroundOverlay = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  transition: opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n`;\r\n\r\nconst Drawer = styled.div`\r\n  width: 100%;\r\n  max-width: ${({ maxWidth }) => maxWidth};\r\n  height: ${({ autoHeight, height }) => (autoHeight ? \"auto\" : height)};\r\n  background-color: white;\r\n  ${({ noRoundedCorners }) =>\r\n    noRoundedCorners\r\n      ? css`\r\n          border-radius: 0;\r\n        `\r\n      : css`\r\n          border-radius: 16px 16px 0 0;\r\n        `}\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  transform: ${({ isOpen }) => (isOpen ? \"translateY(0)\" : \"translateY(100%)\")};\r\n  transition: transform ${({ transitionDuration }) => transitionDuration}ms ease-in-out,\r\n    opacity ${({ transitionDuration }) => transitionDuration}ms ease-in-out;\r\n  opacity: ${({ isOpen }) => (isOpen ? \"1\" : \"0\")};\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  width: 48px;\r\n  height: 4px;\r\n  background-color: #d1d5db;\r\n  border-radius: 9999px;\r\n  margin: 8px auto;\r\n  display: ${({ hideHandle }) => (hideHandle ? \"none\" : \"block\")};\r\n`;\r\n\r\nconst DrawerContent = styled.div`\r\n  flex: 1;\r\n  overflow-y: ${({ autoHeight }) => (autoHeight ? \"visible\" : \"auto\")};\r\n`;\r\n\r\nexport default function BottomDrawer({\r\n  isOpen,\r\n  onClose,\r\n  children,\r\n  transitionDuration = 300,\r\n  height = \"80vh\",\r\n  autoHeight = false,\r\n  maxWidth = \"600px\",\r\n  hideHandle = false, // New prop to hide handle\r\n  noRoundedCorners = false, // New prop to remove rounded corners\r\n}) {\r\n  const drawerRef = useRef();\r\n\r\n  // Close the drawer when clicking outside of it\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (drawerRef.current && !drawerRef.current.contains(event.target)) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"hidden\"; // Prevent background scrolling\r\n    } else {\r\n      document.body.style.overflow = \"auto\";\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n      document.body.style.overflow = \"auto\";\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  return createPortal(\r\n    <DrawerContainer isOpen={isOpen} transitionDuration={transitionDuration}>\r\n      {/* Background overlay */}\r\n      <BackgroundOverlay isOpen={isOpen} onClick={onClose} transitionDuration={transitionDuration} />\r\n\r\n      {/* Drawer content */}\r\n      <Drawer\r\n        ref={drawerRef}\r\n        isOpen={isOpen}\r\n        transitionDuration={transitionDuration}\r\n        height={height}\r\n        autoHeight={autoHeight}\r\n        maxWidth={maxWidth}\r\n        noRoundedCorners={noRoundedCorners} // Pass the new prop\r\n      >\r\n        {/* Drawer handle */}\r\n        <Handle hideHandle={hideHandle} /> {/* Pass the new prop */}\r\n        {/* Scrollable or auto-adjusted content area */}\r\n        <DrawerContent autoHeight={autoHeight}>{children}</DrawerContent>\r\n      </Drawer>\r\n    </DrawerContainer>,\r\n    document.body\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { ChevronDownIcon } from '../../Branding/icons/Icons';\r\n\r\nconst SelectContainer = styled.div`\r\n  position: relative;\r\n  font-family: sans-serif;\r\n`;\r\n\r\nconst sharedSelectStyles = css`\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  border: 2px solid;\r\n  background: transparent;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  appearance: none;\r\n  transition: border-color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n  ${sharedSelectStyles}\r\n  border-color: ${({ isFocused, color }) => (isFocused ? color : '#D1D5DB')};\r\n  color: ${({ value }) => (value ? '#000' : '#6B7280')}; /* Default placeholder style */\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  position: absolute;\r\n  left: 0;\r\n  margin: 0.25rem;\r\n  padding: 0.25rem;\r\n  background: white;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n  font-size: 1rem;\r\n  pointer-events: none;\r\n  transform: ${({ hasValue, isFocused }) =>\r\n    hasValue || isFocused ? 'translate(1.25rem, -70%) scale(0.9)' : 'translate(0.625rem, 0)'};\r\n  transform-origin: left top;\r\n  transition: transform 0.3s ease-in-out, color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledArrow = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 0.75rem;\r\n  transform: translateY(-50%);\r\n  pointer-events: none;\r\n  font-size: 1rem;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n`;\r\n\r\nconst SelectInput = ({ name, value, onChange, color = '#000', label, options = [] }) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const handleFocus = () => setIsFocused(true);\r\n  const handleBlur = () => setIsFocused(false);\r\n\r\n  return (\r\n    <SelectContainer>\r\n      <StyledSelect\r\n        name={name}\r\n        id={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        isFocused={isFocused}\r\n        color={color}\r\n        required\r\n      >\r\n        <option value=\"\" disabled>\r\n        </option>\r\n        {options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </StyledSelect>\r\n      <StyledLabel\r\n        htmlFor={name}\r\n        isFocused={isFocused}\r\n        color={color}\r\n        hasValue={Boolean(value)}\r\n      >\r\n        {label}\r\n      </StyledLabel>\r\n      <StyledArrow isFocused={isFocused} color={color}>\r\n        <ChevronDownIcon className='w-4 h-4'/>\r\n      </StyledArrow>\r\n    </SelectContainer>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","// Sort.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport SortLogic from './SortLogic';\r\n\r\nconst SortContainer = styled.div`\r\n`;\r\n\r\nconst Select = styled.select`\r\n  padding: 0.5rem;\r\n  border-radius: 4px;\r\n  border: 1px solid #ccc;\r\n`;\r\n\r\n// Simplified sorting options with labels as values\r\nconst sortingOptions = [\r\n  {\r\n    label: 'Sort By',\r\n    comparator: null,\r\n  },\r\n  {\r\n    label: 'Title: A-Z',\r\n    comparator: (a, b) => a.title.localeCompare(b.title),\r\n  },\r\n  {\r\n    label: 'Title: Z-A',\r\n    comparator: (a, b) => b.title.localeCompare(a.title),\r\n  },\r\n  {\r\n    label: 'Date: Newest',\r\n    comparator: (a, b) => new Date(b.date) - new Date(a.date),\r\n  },\r\n  {\r\n    label: 'Date: Oldest',\r\n    comparator: (a, b) => new Date(a.date) - new Date(b.date),\r\n  },\r\n];\r\n\r\nconst Sort = ({ items, onSortedChange }) => {\r\n  const { updateSort } = SortLogic({ items, onSortedChange });\r\n\r\n  return (\r\n    <SortContainer>\r\n      <Select\r\n        onChange={(e) => {\r\n          const selectedOption = sortingOptions.find(\r\n            (option) => option.label === e.target.value\r\n          );\r\n          updateSort(selectedOption?.comparator || null);\r\n        }}\r\n      >\r\n        {sortingOptions.map((option) => (\r\n          <option value={option.label} key={option.label}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </Select>\r\n    </SortContainer>\r\n  );\r\n};\r\n\r\nexport default Sort;\r\n"],"names":[],"sourceRoot":""}