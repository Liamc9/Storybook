{"version":3,"file":"stories-pages-account-EditSettingsTemplate-stories.fd54580a.iframe.bundle.js","mappings":";;;;AAWA;;;;;;;;AAUA;;;;;;;;;AAWA;;;;AAoBA;;;AC9CA;;;;AAMA;;;;;;;;;;;;;;;;;;AAiCA;;;;ACrCA;;;;;AAOA;;;;;;AAQA;;;;;;;;;;AAYA;;;;;;;;;;AA2CA;;;ACtEA;;;;;AAcA;;;ACfA;;;AAKA;;AAIA;AACA;;AAEA;;AAEA;;;;;;AAMA;;;;;;;AAOA;AACA;;;AAGA;AACA;;;;;;;AAOA;;;;;;;;;;;AAYA;;ACjDA;;;;AAMA;;;;;;;AASA;;;;;;AAqBA","sources":["webpack://storybook/./src/components/pages/account/EditSettingsTemplate.jsx","webpack://storybook/./src/components/atoms/menuitem/EditableTextField.jsx","webpack://storybook/./src/components/atoms/menuitem/SelectField.jsx","webpack://storybook/./src/components/atoms/menuitem/ToggleField.jsx","webpack://storybook/./src/components/form/inputs/toggleSwitches/ToggleSwitch.jsx","webpack://storybook/./src/components/molecules/stackedlist/EditStackedList.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport EditStackedList  from '../../../components/molecules/stackedlist/EditStackedList'\r\nimport { FiChevronLeft } from 'react-icons/fi';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Styled Components\r\nconst Page = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 1rem;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  margin-bottom: 2rem;\r\n  padding-bottom: 0.5rem;\r\n  border-bottom: 1px solid #e5e7eb; /* light tailwind-gray */\r\n`;\r\n\r\nconst BackButton = styled.button`\r\n  position: absolute;\r\n  left: 0;\r\n  padding: 0.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 1.25rem;\r\n  font-weight: 700;\r\n  text-align: center;\r\n`;\r\n\r\nconst EditSettingsTemplate = ({\r\n  headerTitle = 'Settings',\r\n  sections = [],\r\n  initialValues = {},\r\n  onSave,\r\n  toggleColor,\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState(initialValues);\r\n\r\n  // Whenever a field changes, update formData\r\n  // and immediately call onSave (or log to console if onSave is not provided).\r\n  const updateState = (fieldName, value) => {\r\n    setFormData((prev) => {\r\n      const newData = { ...prev, [fieldName]: value };\r\n      if (onSave) {\r\n        onSave(newData);\r\n      } else {\r\n        console.log('Form Data:', newData);\r\n      }\r\n      return newData;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Page>\r\n      <Header>\r\n        <BackButton onClick={() => navigate(-1)}>\r\n          <FiChevronLeft size={24} />\r\n        </BackButton>\r\n        <Title>{headerTitle}</Title>\r\n      </Header>\r\n\r\n      <main>\r\n        {sections.map(({ title, fields }, idx) => (\r\n          <EditStackedList\r\n            key={idx}\r\n            title={title}\r\n            toggleColor={toggleColor}\r\n            items={fields.map(({ name, type, fieldName, options }) => ({\r\n              type,\r\n              props: {\r\n                name,\r\n                fieldName,\r\n                currentState: formData[fieldName],\r\n                value: formData[fieldName],\r\n                options,\r\n              },\r\n            }))}\r\n            updateState={updateState}\r\n          />\r\n        ))}\r\n      </main>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default EditSettingsTemplate;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FieldContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst FieldName = styled.div`\r\n  font-size: 14px; /* Slightly larger for better readability */\r\n  font-weight: 600; /* Makes it bold for emphasis */\r\n  color: #6b7280; /* Tailwind's gray-500 equivalent */\r\n`;\r\n\r\nconst EditableInput = styled.input`\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #111827; /* Tailwind's gray-900 equivalent */\r\n  background-color: transparent; /* Removes background */\r\n  padding: 4px 0 2px; /* Adds vertical padding, no horizontal padding */\r\n  border: none; /* Removes all borders */\r\n  border-bottom: 2px solid #d1d5db; /* Bottom border only */\r\n  transition: border-color 0.3s ease; /* Smooth transition for focus effect */\r\n  outline: none; /* Removes default focus outline */\r\n\r\n  &:focus {\r\n    border-bottom: 2px solid #3b82f6; /* Blue bottom border on focus */\r\n  }\r\n\r\n  &:hover {\r\n    border-bottom: 2px solid #6b7280; /* Slightly darker border on hover */\r\n  }\r\n`;\r\n\r\n\r\nconst EditableTextField = ({ name, value, onChange }) => {\r\n  const [currentValue, setCurrentValue] = useState(value);\r\n\r\n  const handleInputChange = (e) => {\r\n    const newValue = e.target.value;\r\n    setCurrentValue(newValue);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    onChange(currentValue); // Trigger the updateState function from EditStackedList\r\n  };\r\n\r\n  return (\r\n    <FieldContainer>\r\n      <FieldName>{name}</FieldName>\r\n      <EditableInput\r\n        value={currentValue}\r\n        onChange={handleInputChange}\r\n        onBlur={handleBlur}\r\n      />\r\n    </FieldContainer>\r\n  );\r\n};\r\n\r\nexport default EditableTextField;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ChevronUpDownIcon } from '../../Branding/icons/Icons';\r\n\r\nconst FieldContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\n\r\nconst FieldName = styled.div`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #111827;\r\n  margin-right: auto;\r\n`;\r\n\r\nconst FieldValue = styled.div`\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #6b7280;\r\n  cursor: pointer;\r\n  margin-right: 12px;\r\n`;\r\n\r\nconst Dropdown = styled.select`\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #111827;\r\n  border: 1px solid #d1d5db; /* Equivalent to border-gray-300 */\r\n  border-radius: 4px;\r\n  padding: 4px 8px;\r\n  width: auto;\r\n  background: white;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ChevronWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  color: #6b7280;\r\n  transition: color 0.3s;\r\n\r\n  &:hover {\r\n    color: #4b5563;\r\n  }\r\n`;\r\n\r\nconst SelectField = ({ name, value, options, onChange, placeholder = 'Select value...' }) => {\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n  const dropdownRef = useRef(null);\r\n\r\n  const toggleDropdown = () => {\r\n    setIsDropdownOpen(true);\r\n  };\r\n\r\n  const handleSelectChange = (e) => {\r\n    const newValue = e.target.value;\r\n    setIsDropdownOpen(false);\r\n    onChange(newValue);\r\n  };\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setIsDropdownOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  // Find the label for the current value\r\n  const getLabelForValue = (val) => {\r\n    const option = options.find((opt) =>\r\n      typeof opt === 'object' ? opt.value === val : opt === val\r\n    );\r\n    return typeof option === 'object' ? option.label : option;\r\n  };\r\n\r\n  return (\r\n    <FieldContainer ref={dropdownRef}>\r\n      <FieldName>{name}</FieldName>\r\n      {isDropdownOpen ? (\r\n        <Dropdown\r\n          value={value}\r\n          onChange={handleSelectChange}\r\n          autoFocus\r\n          onBlur={() => setIsDropdownOpen(false)}\r\n        >\r\n          <option value=\"\" disabled>\r\n            {placeholder}\r\n          </option>\r\n          {options.map((option) =>\r\n            typeof option === 'object' ? (\r\n              <option key={option.value} value={option.value}>\r\n                {option.label}\r\n              </option>\r\n            ) : (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            )\r\n          )}\r\n        </Dropdown>\r\n      ) : (\r\n        <FieldValue onClick={toggleDropdown}>\r\n          {value ? getLabelForValue(value) : placeholder}\r\n        </FieldValue>\r\n      )}\r\n      <ChevronWrapper onClick={toggleDropdown}>\r\n        <ChevronUpDownIcon className=\"w-6 h-6\" />\r\n      </ChevronWrapper>\r\n    </FieldContainer>\r\n  );\r\n};\r\n\r\nexport default SelectField;\r\n","// ToggleField.jsx\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ToggleSwitch from \"../../form/inputs/toggleSwitches/ToggleSwitch\";\r\n\r\nconst FieldContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst FieldName = styled.div`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #111827;\r\n  margin-right: auto;\r\n`;\r\n\r\nconst ToggleField = ({ name, value, onChange, activeColor, size, id, ...rest }) => {\r\n  // Generate an id based on name if none is provided.\r\n  const toggleId = id || `toggle-${name.replace(/\\s+/g, \"-\").toLowerCase()}`;\r\n\r\n  // Handle change event from ToggleSwitch; pass boolean to onChange.\r\n  const handleChange = (event) => {\r\n    onChange(event.target.checked);\r\n  };\r\n\r\n  return (\r\n    <FieldContainer>\r\n      <FieldName>{name}</FieldName>\r\n      <ToggleSwitch\r\n        id={toggleId}\r\n        checked={value}\r\n        onChange={handleChange}\r\n        activeColor={activeColor}\r\n        size={size}\r\n        {...rest}\r\n      />\r\n    </FieldContainer>\r\n  );\r\n};\r\n\r\nexport default ToggleField;\r\n","// ToggleSwitch.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst ToggleLabel = styled.label`\r\n  margin-left: 8px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst ToggleInput = styled.input.attrs({ type: 'checkbox' })`\r\n  /* Use the \"size\" prop (default to 50px if not provided) */\r\n  width: ${(props) => (props.size ? `${props.size}px` : '50px')};\r\n  height: ${(props) => (props.size ? `${props.size / 2}px` : '25px')};\r\n  -webkit-appearance: none;\r\n  background: ${(props) => props.inactiveColor || '#c6c6c6'};\r\n  outline: none;\r\n  border-radius: ${(props) => (props.size ? `${props.size / 2}px` : '25px')};\r\n  position: relative;\r\n  cursor: pointer;\r\n  transition: background 0.3s;\r\n\r\n  &:checked {\r\n    background: ${(props) => props.activeColor || '#007bff'};\r\n  }\r\n\r\n  &:before {\r\n    content: '';\r\n    position: absolute;\r\n    /* Knob size scales in proportion to the default (21px when size=50) */\r\n    width: ${(props) => (props.size ? `${21 * (props.size / 50)}px` : '21px')};\r\n    height: ${(props) => (props.size ? `${21 * (props.size / 50)}px` : '21px')};\r\n    border-radius: 50%;\r\n    /* Offset scales proportionally (default 2px) */\r\n    top: ${(props) => (props.size ? `${2 * (props.size / 50)}px` : '2px')};\r\n    left: ${(props) => (props.size ? `${2 * (props.size / 50)}px` : '2px')};\r\n    background: white;\r\n    transition: transform 0.3s;\r\n  }\r\n\r\n  &:checked:before {\r\n    /* Translation distance scales proportionally (25px when size=50) */\r\n    transform: translateX(${(props) =>\r\n      props.size ? `${25 * (props.size / 50)}px` : '25px'});\r\n  }\r\n\r\n  &:disabled {\r\n    background: #e9ecef;\r\n    cursor: not-allowed;\r\n\r\n    &:before {\r\n      background: #ced4da;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ToggleSwitch = ({ ...props }) => (\r\n  <ToggleWrapper>\r\n    <ToggleInput {...props} />\r\n    {props.label && <ToggleLabel htmlFor={props.id}>{props.label}</ToggleLabel>}\r\n  </ToggleWrapper>\r\n);\r\n\r\nexport default ToggleSwitch;\r\n","// EditStackedList.jsx\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport EditableTextField from \"../../atoms/menuitem/EditableTextField\";\r\nimport SelectField from \"../../atoms/menuitem/SelectField\";\r\nimport ToggleField from \"../../atoms/menuitem/ToggleField\";\r\n\r\nconst CategoryWrapper = styled.div`\r\n  margin-bottom: 1.5rem;\r\n`;\r\n\r\nconst CategoryTitle = styled.h3`\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst ItemsContainer = styled.div`\r\n  border: 1px solid #e5e7eb;\r\n  border-radius: 0.375rem;\r\n  overflow: hidden;\r\n  & > *:not(:last-child) {\r\n    border-bottom: 1px solid #e5e7eb;\r\n  }\r\n`;\r\n\r\nconst ListItem = styled.div`\r\n  padding: 16px;\r\n  border-bottom: 1px solid #e5e7eb;\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n`;\r\n\r\nconst EditStackedList = ({ title, items, updateState, toggleColor }) => {\r\n  const renderComponent = (item, index) => {\r\n    const { type, props } = item;\r\n    \r\n    // Always call updateState to keep the list in sync,\r\n    // and also call the user-provided onChange if it exists.\r\n    const handleChange = (newValue) => {\r\n      if (props.onChange) {\r\n        props.onChange(newValue);  // user-provided callback\r\n      }\r\n      updateState(props.fieldName, newValue); // keep local state updated\r\n    };\r\n\r\n    const childProps = {\r\n      ...props,\r\n      onChange: handleChange,\r\n    };\r\n\r\n    switch (type) {\r\n      case \"EditableTextField\":\r\n        return <EditableTextField key={index} {...childProps} />;\r\n      case \"SelectField\":\r\n        return <SelectField key={index} {...childProps} />;\r\n      case \"ToggleField\":\r\n        return <ToggleField key={index} {...childProps} activeColor={toggleColor}/>;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CategoryWrapper>\r\n      {title && <CategoryTitle>{title}</CategoryTitle>}\r\n      <ItemsContainer>\r\n        {items.map((item, index) => (\r\n          <ListItem key={index}>{renderComponent(item, index)}</ListItem>\r\n        ))}\r\n      </ItemsContainer>\r\n    </CategoryWrapper>\r\n  );\r\n};\r\n\r\nexport default EditStackedList;\r\n"],"names":[],"sourceRoot":""}