{"version":3,"file":"stories-atoms-menuitem-ToggleField-stories.4c93c816.iframe.bundle.js","mappings":";;;AAQA;;;;;AAcA;;;ACfA;;;AAKA;;AAIA;AACA;;AAEA;;AAEA;;;;;;AAMA;;;;;;;AAOA;AACA;;;AAGA;AACA;;;;;;;AAOA;;;;;;;;;;;AAYA","sources":["webpack://storybook/./src/components/atoms/menuitem/ToggleField.jsx","webpack://storybook/./src/components/form/inputs/toggleSwitches/ToggleSwitch.jsx"],"sourcesContent":["// ToggleField.jsx\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ToggleSwitch from \"../../form/inputs/toggleSwitches/ToggleSwitch\";\r\n\r\nconst FieldContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst FieldName = styled.div`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #111827;\r\n  margin-right: auto;\r\n`;\r\n\r\nconst ToggleField = ({ name, value, onChange, activeColor, size, id, ...rest }) => {\r\n  // Generate an id based on name if none is provided.\r\n  const toggleId = id || `toggle-${name.replace(/\\s+/g, \"-\").toLowerCase()}`;\r\n\r\n  // Handle change event from ToggleSwitch; pass boolean to onChange.\r\n  const handleChange = (event) => {\r\n    onChange(event.target.checked);\r\n  };\r\n\r\n  return (\r\n    <FieldContainer>\r\n      <FieldName>{name}</FieldName>\r\n      <ToggleSwitch\r\n        id={toggleId}\r\n        checked={value}\r\n        onChange={handleChange}\r\n        activeColor={activeColor}\r\n        size={size}\r\n        {...rest}\r\n      />\r\n    </FieldContainer>\r\n  );\r\n};\r\n\r\nexport default ToggleField;\r\n","// ToggleSwitch.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst ToggleLabel = styled.label`\r\n  margin-left: 8px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst ToggleInput = styled.input.attrs({ type: 'checkbox' })`\r\n  /* Use the \"size\" prop (default to 50px if not provided) */\r\n  width: ${(props) => (props.size ? `${props.size}px` : '50px')};\r\n  height: ${(props) => (props.size ? `${props.size / 2}px` : '25px')};\r\n  -webkit-appearance: none;\r\n  background: ${(props) => props.inactiveColor || '#c6c6c6'};\r\n  outline: none;\r\n  border-radius: ${(props) => (props.size ? `${props.size / 2}px` : '25px')};\r\n  position: relative;\r\n  cursor: pointer;\r\n  transition: background 0.3s;\r\n\r\n  &:checked {\r\n    background: ${(props) => props.activeColor || '#007bff'};\r\n  }\r\n\r\n  &:before {\r\n    content: '';\r\n    position: absolute;\r\n    /* Knob size scales in proportion to the default (21px when size=50) */\r\n    width: ${(props) => (props.size ? `${21 * (props.size / 50)}px` : '21px')};\r\n    height: ${(props) => (props.size ? `${21 * (props.size / 50)}px` : '21px')};\r\n    border-radius: 50%;\r\n    /* Offset scales proportionally (default 2px) */\r\n    top: ${(props) => (props.size ? `${2 * (props.size / 50)}px` : '2px')};\r\n    left: ${(props) => (props.size ? `${2 * (props.size / 50)}px` : '2px')};\r\n    background: white;\r\n    transition: transform 0.3s;\r\n  }\r\n\r\n  &:checked:before {\r\n    /* Translation distance scales proportionally (25px when size=50) */\r\n    transform: translateX(${(props) =>\r\n      props.size ? `${25 * (props.size / 50)}px` : '25px'});\r\n  }\r\n\r\n  &:disabled {\r\n    background: #e9ecef;\r\n    cursor: not-allowed;\r\n\r\n    &:before {\r\n      background: #ced4da;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ToggleSwitch = ({ ...props }) => (\r\n  <ToggleWrapper>\r\n    <ToggleInput {...props} />\r\n    {props.label && <ToggleLabel htmlFor={props.id}>{props.label}</ToggleLabel>}\r\n  </ToggleWrapper>\r\n);\r\n\r\nexport default ToggleSwitch;\r\n"],"names":[],"sourceRoot":""}