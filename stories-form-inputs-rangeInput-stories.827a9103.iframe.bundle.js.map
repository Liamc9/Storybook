{"version":3,"file":"stories-form-inputs-rangeInput-stories.827a9103.iframe.bundle.js","mappings":";AAMA;;;;;AAKA;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;ACtCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;;;;;AC/EA;;;;AAMA;;;;AAMA;;;;;;;;;;;;AAcA;AACA;;;;;;AAMA;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA","sources":["webpack://storybook/./src/components/form/inputs/rangeInputs/RangeInput.jsx","webpack://storybook/./src/components/form/inputs/rangeInputs/RangeInput2.jsx","webpack://storybook/./src/components/form/inputs/rangeInputs/RangeSlider.jsx"],"sourcesContent":["// RangeInput.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// Styled Components\r\nconst RangeInputWrapper = styled.div`\r\n      grid-column: ${(props) => props.gridSpan || 'auto'};\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  margin-bottom: 0.5rem;\r\n  font-size: 1rem;\r\n  color: #333;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  -webkit-appearance: none;\r\n  height: 8px;\r\n  border-radius: 5px;\r\n  background: #ddd;\r\n  outline: none;\r\n  transition: background 0.3s ease;\r\n\r\n  &:hover {\r\n    background: #ccc;\r\n  }\r\n\r\n  &:focus {\r\n    background: #bbb;\r\n  }\r\n\r\n  &::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 50%;\r\n    background: #6200ee;\r\n    cursor: pointer;\r\n    transition: background 0.3s ease;\r\n  }\r\n\r\n  &::-moz-range-thumb {\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 50%;\r\n    background: #6200ee;\r\n    cursor: pointer;\r\n    transition: background 0.3s ease;\r\n  }\r\n`;\r\n\r\n// RangeInput Component\r\nconst RangeInput = ({ ...props }) => {\r\n  return (\r\n    <RangeInputWrapper gridSpan={props.gridSpan}>\r\n      {props.label && <StyledLabel htmlFor={props.id}>{props.label}</StyledLabel>}\r\n      <StyledInput type=\"range\" {...props} />\r\n    </RangeInputWrapper>\r\n  );\r\n};\r\n\r\nexport default RangeInput;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst RangeInput2 = ({...props}) => {\r\n  return (\r\n    <StyledWrapper gridSpan={props.gridSpan}>\r\n      <label className=\"slider\">\r\n        <input type=\"range\"  className=\"level\" {...props} />\r\n        <svg className=\"volume\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" width={512} height={512} x={0} y={0} viewBox=\"0 0 24 24\" style={{enableBackground: 'new 0 0 512 512'}} xmlSpace=\"preserve\">\r\n          <g>\r\n            <path d=\"M18.36 19.36a1 1 0 0 1-.705-1.71C19.167 16.148 20 14.142 20 12s-.833-4.148-2.345-5.65a1 1 0 1 1 1.41-1.419C20.958 6.812 22 9.322 22 12s-1.042 5.188-2.935 7.069a.997.997 0 0 1-.705.291z\" fill=\"currentColor\" data-original=\"#000000\" />\r\n            <path d=\"M15.53 16.53a.999.999 0 0 1-.703-1.711C15.572 14.082 16 13.054 16 12s-.428-2.082-1.173-2.819a1 1 0 1 1 1.406-1.422A6 6 0 0 1 18 12a6 6 0 0 1-1.767 4.241.996.996 0 0 1-.703.289zM12 22a1 1 0 0 1-.707-.293L6.586 17H4c-1.103 0-2-.897-2-2V9c0-1.103.897-2 2-2h2.586l4.707-4.707A.998.998 0 0 1 13 3v18a1 1 0 0 1-1 1z\" fill=\"currentColor\" data-original=\"#000000\" />\r\n          </g>\r\n        </svg>\r\n      </label>\r\n    </StyledWrapper>\r\n  );\r\n}\r\n\r\nconst StyledWrapper = styled.div`\r\n      grid-column: ${(props) => props.gridSpan || 'auto'};\r\n\r\n  /* level settings ðŸ‘‡ */\r\n\r\n  .slider {\r\n    /* slider */\r\n    --slider-width: 100%;\r\n    --slider-height: 6px;\r\n    --slider-bg: rgb(82, 82, 82);\r\n    --slider-border-radius: 999px;\r\n    /* level */\r\n    --level-color: #fff;\r\n    --level-transition-duration: .1s;\r\n    /* icon */\r\n    --icon-margin: 15px;\r\n    --icon-color: var(--slider-bg);\r\n    --icon-size: 25px;\r\n  }\r\n\r\n  .slider {\r\n    cursor: pointer;\r\n    display: -webkit-inline-box;\r\n    display: -ms-inline-flexbox;\r\n    display: inline-flex;\r\n    -webkit-box-orient: horizontal;\r\n    -webkit-box-direction: reverse;\r\n    -ms-flex-direction: row-reverse;\r\n    flex-direction: row-reverse;\r\n    -webkit-box-align: center;\r\n    -ms-flex-align: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .slider .volume {\r\n    display: inline-block;\r\n    vertical-align: top;\r\n    margin-right: var(--icon-margin);\r\n    color: var(--icon-color);\r\n    width: var(--icon-size);\r\n    height: auto;\r\n  }\r\n\r\n  .slider .level {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    appearance: none;\r\n    width: var(--slider-width);\r\n    height: var(--slider-height);\r\n    background: var(--slider-bg);\r\n    overflow: hidden;\r\n    border-radius: var(--slider-border-radius);\r\n    -webkit-transition: height var(--level-transition-duration);\r\n    -o-transition: height var(--level-transition-duration);\r\n    transition: height var(--level-transition-duration);\r\n    cursor: inherit;\r\n  }\r\n\r\n  .slider .level::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    width: 0;\r\n    height: 0;\r\n    -webkit-box-shadow: -200px 0 0 200px var(--level-color);\r\n    box-shadow: -200px 0 0 200px var(--level-color);\r\n  }\r\n\r\n  .slider:hover .level {\r\n    height: calc(var(--slider-height) * 2);\r\n  }`;\r\n\r\nexport default RangeInput2;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SliderContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 16px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #333;\r\n`;\r\n\r\nconst RangeInputContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 50px;\r\n`;\r\n\r\nconst Track = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  height: 8px;\r\n  background: #e0e0e0;\r\n  border-radius: 5px;\r\n  width: 100%;\r\n\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    left: ${(props) => props.left}%;\r\n    right: ${(props) => 100 - props.right}%;\r\n    height: 100%;\r\n    background: #A855F7;\r\n    border-radius: 5px;\r\n    z-index: 1;\r\n  }\r\n`;\r\n\r\nconst ThumbValue = styled.div`\r\n  position: absolute;\r\n  top: -10px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #A855F7;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst Slider = styled.input`\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  width: 100%;\r\n  height: 8px;\r\n  background: transparent;\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  z-index: 3;\r\n  pointer-events: none;\r\n\r\n  &::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    width: 16px;\r\n    height: 16px;\r\n    background: #A855F7;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    pointer-events: auto;\r\n  }\r\n\r\n  &::-moz-range-thumb {\r\n    width: 14px;\r\n    height: 14px;\r\n    background: #007bff;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    pointer-events: auto;\r\n  }\r\n`;\r\n\r\n\r\nconst RangeSlider = ({\r\n  min = 0,\r\n  max = 100,\r\n  step = 1,\r\n  minimumGap = 1,\r\n  label = \"Range\",\r\n  valuePrefix = \"\",\r\n  valueSuffix = \"\",\r\n  value,\r\n  onChange,\r\n}) => {\r\n  const [range, setRange] = useState(value || [min, max]);\r\n\r\n  // Update internal state when `value` prop changes\r\n  useEffect(() => {\r\n    if (value && Array.isArray(value) && value.length === 2) {\r\n      setRange(value);\r\n    }\r\n  }, [value]);\r\n\r\n  const handleMinChange = (e) => {\r\n    const newMin = Math.min(Number(e.target.value), range[1] - minimumGap);\r\n    const newRange = [newMin, range[1]];\r\n    setRange(newRange);\r\n    if (onChange) onChange(newRange);\r\n  };\r\n\r\n  const handleMaxChange = (e) => {\r\n    const newMax = Math.max(Number(e.target.value), range[0] + minimumGap);\r\n    const newRange = [range[0], newMax];\r\n    setRange(newRange);\r\n    if (onChange) onChange(newRange);\r\n  };\r\n\r\n  const calculatePercentage = (value) => ((value - min) / (max - min)) * 100;\r\n\r\n  return (\r\n    <SliderContainer>\r\n      <Label>{label}</Label>\r\n      <RangeInputContainer>\r\n        <ThumbValue\r\n          style={{\r\n            left: `calc(${calculatePercentage(range[0])}% - 14px)`,\r\n          }}\r\n        >\r\n          {valuePrefix}\r\n          {range[0]}\r\n          {valueSuffix}\r\n        </ThumbValue>\r\n        <ThumbValue\r\n          style={{\r\n            left: `calc(${calculatePercentage(range[1])}% - 14px)`,\r\n          }}\r\n        >\r\n          {valuePrefix}\r\n          {range[1]}\r\n          {valueSuffix}\r\n        </ThumbValue>\r\n        <Track\r\n          left={calculatePercentage(range[0])}\r\n          right={calculatePercentage(range[1])}\r\n        />\r\n        <Slider\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          step={step}\r\n          value={range[0]}\r\n          onChange={handleMinChange}\r\n        />\r\n        <Slider\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          step={step}\r\n          value={range[1]}\r\n          onChange={handleMaxChange}\r\n        />\r\n      </RangeInputContainer>\r\n    </SliderContainer>\r\n  );\r\n};\r\n\r\nexport default RangeSlider;\r\n"],"names":[],"sourceRoot":""}