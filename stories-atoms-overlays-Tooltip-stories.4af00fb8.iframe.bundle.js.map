{"version":3,"file":"stories-atoms-overlays-Tooltip-stories.4af00fb8.iframe.bundle.js","mappings":";;;;AAWA;;;;;;;;;;;;AAYA;;;;AAOA;;;;AAMA;;;;AAMA;;;;AAOA;AAMA;;;;;;;;;;AAUA","sources":["webpack://storybook/./src/components/atoms/overlays/tooltips/Tooltip.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\n// Tooltip container with relative positioning\r\nconst TooltipContainer = styled.div`\r\n  position: relative;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n`;\r\n\r\n// Base tooltip styles with dynamic positioning\r\nconst BaseTooltip = styled.div`\r\n  position: absolute;\r\n  padding: 5px;\r\n  background-color: black;\r\n  color: white;\r\n  border-radius: 4px;\r\n  text-align: center;\r\n  opacity: 0.9;\r\n  z-index: 10;\r\n  width: 200px;\r\n  white-space: nowrap;\r\n\r\n  ${({ position }) => {\r\n    switch (position) {\r\n      case \"bottom\":\r\n        return css`\r\n          top: 100%;\r\n          left: 50%;\r\n          transform: translateX(-50%) translateY(10px);\r\n        `;\r\n      case \"left\":\r\n        return css`\r\n          right: 100%;\r\n          top: 50%;\r\n          transform: translateX(-10px) translateY(-50%);\r\n        `;\r\n      case \"right\":\r\n        return css`\r\n          left: 100%;\r\n          top: 50%;\r\n          transform: translateX(10px) translateY(-50%);\r\n        `;\r\n      case \"top\":\r\n      default:\r\n        return css`\r\n          bottom: 100%;\r\n          left: 50%;\r\n          transform: translateX(-50%) translateY(-10px);\r\n        `;\r\n    }\r\n  }}\r\n`;\r\n\r\n// Default icon styling if no child is provided\r\nconst DefaultIcon = styled.span`\r\n  display: flex;\r\n  height: 1rem;\r\n  width: 1rem;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  background-color: #cbd5e0; /* Equivalent to Tailwind's bg-gray-400 */\r\n  font-size: 0.75rem;\r\n  color: white;\r\n`;\r\n\r\nconst Tooltip = ({\r\n  tooltipText,\r\n  position = \"top\",\r\n  children,\r\n  tooltipStyle: customStyle = {},\r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  return (\r\n    <TooltipContainer\r\n      onMouseEnter={() => setIsVisible(true)}\r\n      onMouseLeave={() => setIsVisible(false)}\r\n    >\r\n      {children || <DefaultIcon>i</DefaultIcon>}\r\n      {isVisible && (\r\n        <BaseTooltip position={position} style={customStyle}>\r\n          {tooltipText}\r\n        </BaseTooltip>\r\n      )}\r\n    </TooltipContainer>\r\n  );\r\n};\r\n\r\nexport default Tooltip;\r\n"],"names":[],"sourceRoot":""}