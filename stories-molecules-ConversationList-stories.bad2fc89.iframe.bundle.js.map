{"version":3,"file":"stories-molecules-ConversationList-stories.bad2fc89.iframe.bundle.js","mappings":";;AAoCA;;;;;;;;;;ACrBA;;;;;;AAQA;;;;AAMA;;;;AAMA;;;AAKA;AACA;;;AAKA;;;AAKA;;;;;;;AAoCA","sources":["webpack://storybook/./src/components/molecules/ConversationList.jsx","webpack://storybook/./src/components/atoms/menuitem/ConversationItem.jsx"],"sourcesContent":["// src/components/ConversationList.js\r\nimport React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport ConversationItem from '../atoms/menuitem/ConversationItem';\r\n\r\nconst ListWrapper = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst ConversationList = ({ conversations, currentUser, participantsData }) => {\r\n  // Helper to extract time in milliseconds from various timestamp types.\r\n  const getTime = (timestamp) => {\r\n    if (!timestamp) return 0;\r\n    if (timestamp.toMillis) return timestamp.toMillis();\r\n    if (timestamp.getTime) return timestamp.getTime();\r\n    return new Date(timestamp).getTime();\r\n  };\r\n\r\n  // Sort conversations by their lastMessage timestamp, descending.\r\n  const sortedConversations = useMemo(() => {\r\n    return conversations\r\n      ? [...conversations].sort((a, b) => {\r\n          const aTime = getTime(a.lastMessage?.timestamp);\r\n          const bTime = getTime(b.lastMessage?.timestamp);\r\n          return bTime - aTime;\r\n        })\r\n      : [];\r\n  }, [conversations]);\r\n\r\n  return (\r\n    <ListWrapper>\r\n      {sortedConversations.map((conversation) => (\r\n        <ConversationItem\r\n          key={conversation.id}\r\n          conversation={conversation}\r\n          currentUser={currentUser}\r\n          participantsData={participantsData}  // Pass participantsData\r\n        />\r\n      ))}\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nexport default ConversationList;\r\n","// src/components/ConversationItem.jsx\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ItemWrapper = styled(Link)`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100px;\r\n  padding: 1rem;\r\n  text-decoration: none;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  color: inherit;\r\n  position: relative;\r\n`;\r\n\r\nconst ProfilePic = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  margin-right: 1rem;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst Name = styled.span`\r\n  font-size: 1.3rem;\r\n  color: #333;\r\n  font-weight: ${({ hasNewMessage }) => (hasNewMessage ? 700 : 600)};\r\n`;\r\n\r\nconst Timestamp = styled.span`\r\n  font-size: 0.75rem;\r\n  color: #9ca3af;\r\n`;\r\n\r\nconst LastMessage = styled.span`\r\n  font-size: 0.875rem;\r\n  color: #6b7280;\r\n  font-weight: ${({ hasNewMessage }) => (hasNewMessage ? 700 : 400)};\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  max-width: 80%;\r\n`;\r\n\r\n// Helper to display a \"time ago\" format\r\nconst formatTimestamp = (timestamp) => {\r\n  if (!timestamp) return '';\r\n  \r\n  const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\r\n\r\n  const now = new Date();\r\n  const today = new Date(now);\r\n  const messageDay = new Date(date);\r\n\r\n  // Zero out time for both dates\r\n  today.setHours(0, 0, 0, 0);\r\n  messageDay.setHours(0, 0, 0, 0);\r\n\r\n  const msDiff = today - messageDay;\r\n  const daysDiff = Math.floor(msDiff / (1000 * 60 * 60 * 24));\r\n\r\n  if (daysDiff === 0) return 'Today';\r\n  if (daysDiff === 1) return 'Yesterday';\r\n  return `${daysDiff} days ago`;\r\n};\r\n\r\n\r\nconst ConversationItem = ({ conversation, currentUser, participantsData }) => {\r\n  // Identify the other participant’s UID\r\n  const otherUID = conversation.participantUIDs.find(uid => uid !== currentUser.uid);\r\n  // Look up the other participant’s profile from participantsData\r\n  const other = participantsData && participantsData[otherUID] ? participantsData[otherUID] : {};\r\n\r\n  return (\r\n    <ItemWrapper to={`/conversation/${conversation.id}`}>\r\n      <ProfilePic\r\n        src={other.photoURL || 'https://upload.wikimedia.org/wikipedia/commons/a/ac/Default_pfp.jpg'}\r\n        alt=\"Profile\"\r\n      />\r\n      <Column>\r\n        <Header>\r\n          <Name hasNewMessage={conversation.hasNewMessage}>\r\n            {other.displayName || otherUID}\r\n          </Name>\r\n          <Timestamp>{formatTimestamp(conversation.lastMessage?.localTimestamp)}</Timestamp>\r\n        </Header>\r\n        <LastMessage hasNewMessage={conversation.hasNewMessage}>\r\n          {conversation.lastMessage?.text}\r\n        </LastMessage>\r\n      </Column>\r\n    </ItemWrapper>\r\n  );\r\n};\r\n\r\nexport default ConversationItem;\r\n"],"names":[],"sourceRoot":""}