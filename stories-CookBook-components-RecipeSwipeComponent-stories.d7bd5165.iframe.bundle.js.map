{"version":3,"file":"stories-CookBook-components-RecipeSwipeComponent-stories.d7bd5165.iframe.bundle.js","mappings":";;;;;;;AAmBA;;;;;;;;AAUA;;;;AAMA;;;;AAMA;;;;;;;;;;AAYA;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;AAcA;;;;AAMA;;;AAKA;;;;;;;;;;;;;AAeA;;;AAKA;;;;;;AAQA;;AAIA;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;AA6CA","sources":["webpack://storybook/./src/components/CookBook/components/RecipeSwipeComponent.jsx"],"sourcesContent":["// RecipeSwipeComponent.jsx\r\nimport React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport 'swiper/css';\r\nimport PropTypes from 'prop-types';\r\n\r\n// If you intend to use VolumeIcon and MuteIcon, ensure they're correctly imported\r\n// import { VolumeIcon, MuteIcon } from 'liamc9npm';\r\n\r\n// Styled Components\r\n\r\nconst RecipeSwipeContainer = styled.div`\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  width: 100%;\r\n  height: 100svh;\r\n  background-color: #ffffff;\r\n  position: relative;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst DrawerOverlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  z-index: 9;\r\n`;\r\n\r\nconst SlideContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: relative;\r\n`;\r\n\r\nconst Video = styled.video`\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  margin: 5px;\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  z-index: 5;\r\n  color: #ffffff;\r\n  text-shadow: 1px 1px 2px rgba(0,0,0,0.7);\r\n`;\r\n\r\nconst RecipeInfoCards = styled.div`\r\n  width: 100%;\r\n  height: 50%;\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  gap: 10px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n\r\n  @media (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nconst RecipeCard = styled.div`\r\n  margin: 5px;\r\n  padding: 15px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n  transition: transform 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: translateY(-5px);\r\n  }\r\n`;\r\n\r\nconst RecipeCardHeader = styled.div`\r\n  font-size: 1.2em;\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nconst RecipeCardContent = styled.div`\r\n  font-size: 1em;\r\n  color: #555;\r\n`;\r\n\r\nconst Drawer = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  height: 50%;\r\n  background-color: #fff;\r\n  transition: transform 0.3s ease;\r\n  z-index: 10;\r\n  overflow-y: auto;\r\n\r\n  transform: translateY(80%);\r\n\r\n  ${(props) =>\r\n    props.open &&\r\n    css`\r\n      transform: translateY(0);\r\n    `}\r\n`;\r\n\r\nconst DrawerHandle = styled.div`\r\n  text-align: center;\r\n  color: #000000;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  background-color: #f0f0f0;\r\n`;\r\n\r\nconst DrawerContent = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst BackButton = styled.button`\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  color: #fff;\r\n  padding: 8px 12px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 1em;\r\n  cursor: pointer;\r\n  z-index: 15;\r\n\r\n  &:hover {\r\n    background-color: rgba(0, 0, 0, 0.7);\r\n  }\r\n`;\r\n\r\nconst StepIndicator = styled.div`\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  color: #fff;\r\n  padding: 8px 12px;\r\n  border-radius: 5px;\r\n  font-size: 1em;\r\n  z-index: 15;\r\n`;\r\n\r\nconst MuteButton = styled.button`\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  color: #fff;\r\n  padding: 8px 12px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 1em;\r\n  cursor: pointer;\r\n  z-index: 15;\r\n\r\n  &:hover {\r\n    background-color: rgba(0, 0, 0, 0.7);\r\n  }\r\n`;\r\n\r\n// React Component\r\n\r\nconst RecipeSwipeComponent = ({ recipe }) => {\r\n  const {\r\n    name,\r\n    cuisine,\r\n    time,\r\n    servings,\r\n    calories,\r\n    steps,\r\n    overviewVideoUrl,\r\n    overviewDescription,\r\n  } = recipe;\r\n\r\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n  const [currentStepDescription, setCurrentStepDescription] = useState(overviewDescription);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n\r\n  const toggleDrawer = (description) => {\r\n    setCurrentStepDescription(description);\r\n    setIsDrawerOpen((prev) => !prev);\r\n  };\r\n\r\n  const closeDrawer = (e) => {\r\n    // Since DrawerOverlay is a separate styled component, we don't need to check class\r\n    setIsDrawerOpen(false);\r\n  };\r\n\r\n  const goToOverview = () => {\r\n    const swiperInstance = document.querySelector('.swiper').swiper;\r\n    if (swiperInstance) {\r\n      swiperInstance.slideTo(0);\r\n    }\r\n    setCurrentStepDescription(overviewDescription);\r\n  };\r\n\r\n  const handleSlideChange = (swiper) => {\r\n    document.querySelectorAll('video').forEach((video) => video.pause());\r\n    const activeSlide = swiper.slides[swiper.activeIndex];\r\n    const video = activeSlide.querySelector('video');\r\n    if (video) {\r\n      video.play();\r\n    }\r\n    setCurrentStepDescription(\r\n      swiper.activeIndex === 0\r\n        ? overviewDescription\r\n        : steps[swiper.activeIndex - 1].description\r\n    );\r\n  };\r\n\r\n  const toggleMute = () => {\r\n    setIsMuted((prev) => !prev);\r\n    document.querySelectorAll('video').forEach((video) => (video.muted = !isMuted));\r\n  };\r\n\r\n  return (\r\n    <RecipeSwipeContainer>\r\n      {isDrawerOpen && <DrawerOverlay onClick={closeDrawer} />}\r\n      <Swiper\r\n        spaceBetween={0}\r\n        slidesPerView={1}\r\n        allowTouchMove={!isDrawerOpen}\r\n        onSlideChange={handleSlideChange}\r\n      >\r\n        <SwiperSlide>\r\n          <SlideContainer className=\"recipe-overview\">\r\n            <Video\r\n              src={overviewVideoUrl}\r\n              className=\"overview-video\"\r\n              playsInline\r\n              muted={isMuted}\r\n              onClick={(e) =>\r\n                e.target.paused ? e.target.play() : e.target.pause()\r\n              }\r\n            />\r\n            <Title>{name}</Title>\r\n            <RecipeInfoCards>\r\n              <RecipeCard>\r\n                <RecipeCardHeader>Cuisine</RecipeCardHeader>\r\n                <RecipeCardContent>{cuisine}</RecipeCardContent>\r\n              </RecipeCard>\r\n              <RecipeCard>\r\n                <RecipeCardHeader>Time</RecipeCardHeader>\r\n                <RecipeCardContent>{time}</RecipeCardContent>\r\n              </RecipeCard>\r\n              <RecipeCard>\r\n                <RecipeCardHeader>Servings</RecipeCardHeader>\r\n                <RecipeCardContent>{servings}</RecipeCardContent>\r\n              </RecipeCard>\r\n              <RecipeCard>\r\n                <RecipeCardHeader>Calories</RecipeCardHeader>\r\n                <RecipeCardContent>{calories} kcal</RecipeCardContent>\r\n              </RecipeCard>\r\n            </RecipeInfoCards>\r\n          </SlideContainer>\r\n        </SwiperSlide>\r\n\r\n        {steps.map((step, index) => (\r\n          <SwiperSlide key={index}>\r\n            <SlideContainer className=\"recipe-step\">\r\n              <BackButton onClick={goToOverview}>Back</BackButton>\r\n              <StepIndicator>Step {index + 1}</StepIndicator>\r\n              <MuteButton onClick={toggleMute}>\r\n                {isMuted ? 'Unmute' : 'Mute'}\r\n                {/* If using icons, replace text with icons */}\r\n                {/* {isMuted ? <VolumeIcon /> : <MuteIcon />} */}\r\n              </MuteButton>\r\n              <Video\r\n                src={step.videoUrl}\r\n                className=\"step-video\"\r\n                playsInline\r\n                muted={isMuted}\r\n                onClick={(e) =>\r\n                  e.target.paused ? e.target.play() : e.target.pause()\r\n                }\r\n              />\r\n            </SlideContainer>\r\n          </SwiperSlide>\r\n        ))}\r\n      </Swiper>\r\n\r\n      <Drawer open={isDrawerOpen} onClick={(e) => {\r\n        if (e.target.closest('.drawer-handle')) {\r\n          toggleDrawer(currentStepDescription);\r\n        }\r\n      }}>\r\n        <DrawerHandle className=\"drawer-handle\">Swipe up for step details</DrawerHandle>\r\n        {isDrawerOpen && (\r\n          <DrawerContent>\r\n            <p>{currentStepDescription}</p>\r\n          </DrawerContent>\r\n        )}\r\n      </Drawer>\r\n    </RecipeSwipeContainer>\r\n  );\r\n};\r\n\r\n\r\nexport default RecipeSwipeComponent;\r\n"],"names":[],"sourceRoot":""}