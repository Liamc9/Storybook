{"version":3,"file":"stories-atoms-overlays-Modal-stories.d640ca03.iframe.bundle.js","mappings":";;;AAgBA;;AAEA;;;;;;AASA;;AAKA;;;;;;;ACtBA;;;;;;;AASA;;;;;;;AASA;AACA;;;;;AAOA;AACA;;;;;AAOA;;;;;AAOA;;;;AAMA;;;;AAMA;;;;;;;;;;;AAaA;;;;;;;;AAUA;;;;;;;;AAUA;;;;;;;AClFA;;;;;;;AAYA;;;;;;;;;;;AAWA;AAGA;;AAEA;;AAIA;;AAEA;AAEA;AAEA;AAEA;;AAGA;AAGA;;AAEA;;;;;;;;;;;;;AAeA;;;;AAQA;;;AAQA","sources":["webpack://storybook/./src/stories/atoms/overlays/Modal.stories.js","webpack://storybook/./src/components/atoms/cards/DeleteCard.jsx","webpack://storybook/./src/components/atoms/overlays/modals/Modal.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Modal from \"../../../components/atoms/overlays/modals/Modal\";\r\nimport DeleteCard from \"../../../components/atoms/cards/DeleteCard\";\r\n\r\nexport default {\r\n  title: \"Atoms/Overlays/Modals\",\r\n  component: Modal,\r\n  tags: [\"autodocs\"],\r\n};\r\n\r\nconst Container = styled.div`\r\n  padding: 100px;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  padding: 0.5rem 1rem;\r\n  background-color: ${(props) =>\r\n    props.variant === \"danger\" ? \"#dc2626\" : \"#2563eb\"};\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin: 1rem;\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n  padding: 20px;\r\n  `;\r\n\r\n// Default Modal Story\r\nexport const Default = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleClose = () => setIsOpen(false);\r\n\r\n  return (\r\n    <Container>\r\n      <StyledButton onClick={() => setIsOpen(true)}>Open Modal</StyledButton>\r\n      <Modal\r\n  isModalOpen={isOpen}\r\n  closeModal={handleClose}\r\n  animate={true}\r\n  rounded={false}         // Set to false for square corners\r\n  fullScreen={true}      // Set to true for a full-screen modal\r\n  //width=\"500px\"           // Custom width\r\n  //height=\"300px\"          // Custom height\r\n  maxWidth=\"600px\"        // Custom max-width\r\n  maxHeight=\"1000px\"        // Custom max-height\r\n  showCloseButton={true}  // Toggle X button visibility\r\n>\r\n  <ModalContent>\r\n  <p>This modal can now be fully customized!</p>\r\n  </ModalContent>\r\n</Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\n// Delete Modal Story using the DeleteCard component\r\nexport const DeleteModalCard = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleCancel = () => setIsOpen(false);\r\n  const handleConfirm = () => {\r\n    // perform delete action here\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <StyledButton variant=\"danger\" onClick={() => setIsOpen(true)}>\r\n        Open Delete Modal\r\n      </StyledButton>\r\n      <Modal isModalOpen={isOpen} closeModal={handleCancel} animate={true}>\r\n        <DeleteCard onCancel={handleCancel} onConfirm={handleConfirm} />\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst fadeIn = keyframes`\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst slideDown = keyframes`\r\n  from {\r\n    transform: translateY(-20px);\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  background-color: white;\r\n  border-radius: 1.5rem;\r\n  padding: 1.5rem;\r\n  width: 100%;\r\n  max-width: 400px;\r\n  box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);\r\n  animation: ${slideDown} 0.3s ease-out forwards;\r\n`;\r\n\r\nconst CardContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  text-align: center;\r\n  animation: ${fadeIn} 0.3s ease-out forwards;\r\n`;\r\n\r\nconst Icon = styled.svg`\r\n  height: 3rem;\r\n  width: 3rem;\r\n  fill: #ef4444;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst CardTitle = styled.h2`\r\n  font-size: 1.25rem;\r\n  font-weight: bold;\r\n  color: #1f2937;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst CardMessage = styled.p`\r\n  font-size: 0.875rem;\r\n  color: #4b5563;\r\n  margin-bottom: 1.5rem;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 0.5rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  border-radius: 9999px;\r\n  padding: 0.5rem 1.25rem;\r\n  font-size: 0.875rem;\r\n  font-weight: 500;\r\n  transition: all 0.3s ease-in;\r\n  border: 2px solid;\r\n  cursor: pointer;\r\n  &:hover {\r\n    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);\r\n  }\r\n`;\r\n\r\nconst CancelButton = styled(Button)`\r\n  border-color: #d1d5db;\r\n  background-color: #e5e7eb;\r\n  color: #4b5563;\r\n  &:hover {\r\n    border-color: #9ca3af;\r\n    background-color: #d1d5db;\r\n  }\r\n`;\r\n\r\nconst ConfirmButton = styled(Button)`\r\n  border-color: #ef4444;\r\n  background-color: #ef4444;\r\n  color: white;\r\n  &:hover {\r\n    background-color: transparent;\r\n    color: #ef4444;\r\n  }\r\n`;\r\n\r\nconst DeleteCard = ({ title, message, onCancel, onConfirm }) => (\r\n  <CardContainer>\r\n    <CardContent>\r\n      <Icon\r\n        fill=\"currentColor\"\r\n        viewBox=\"0 0 20 20\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          clipRule=\"evenodd\"\r\n          d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\r\n          fillRule=\"evenodd\"\r\n        />\r\n      </Icon>\r\n      <CardTitle>{title || \"Are you sure?\"}</CardTitle>\r\n      <CardMessage>\r\n        {message ||\r\n          \"Do you really want to continue? This process cannot be undone.\"}\r\n      </CardMessage>\r\n    </CardContent>\r\n    <ButtonContainer>\r\n      <CancelButton onClick={onCancel}>Cancel</CancelButton>\r\n      <ConfirmButton onClick={onConfirm}>Confirm</ConfirmButton>\r\n    </ButtonContainer>\r\n  </CardContainer>\r\n);\r\n\r\nexport default DeleteCard;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport styled, { keyframes, css } from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MdClose } from \"react-icons/md\";\r\n\r\n// Animations\r\nconst fadeIn = keyframes`\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst slideIn = keyframes`\r\n  from {\r\n    transform: translateY(-20px);\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\n// Styled Components\r\nconst Overlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n  ${(props) =>\r\n    props.animate &&\r\n    css`\r\n      animation: ${fadeIn} 0.3s ease-out forwards;\r\n    `}\r\n`;\r\n\r\nconst ModalContainer = styled.div`\r\n  background-color: white;\r\n  border-radius: ${(props) => (props.rounded ? \"12px\" : \"0\")};\r\n  position: relative;\r\n  width: ${(props) =>\r\n    props.fullScreen ? \"100vw\" : props.width ? props.width : \"auto\"};\r\n  height: ${(props) =>\r\n    props.fullScreen ? \"100vh\" : props.height ? props.height : \"auto\"};\r\n  max-width: ${(props) =>\r\n    props.maxWidth ? props.maxWidth : props.fullScreen ? \"100%\" : \"90%\"};\r\n  max-height: ${(props) =>\r\n    props.maxHeight ? props.maxHeight : props.fullScreen ? \"100%\" : \"90%\"};\r\n  overflow-y: auto;\r\n  ${(props) =>\r\n    props.animate &&\r\n    css`\r\n      animation: ${slideIn} 0.3s ease-out forwards;\r\n    `}\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  position: absolute;\r\n  top: 16px;\r\n  right: 16px;\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.25rem;\r\n  color: #333;\r\n\r\n  &:hover {\r\n    color: #555;\r\n  }\r\n`;\r\n\r\nconst ModalContent = styled.div``;\r\n\r\nconst ModalTitle = styled.h2`\r\n  font-size: 1.5rem;\r\n  margin-bottom: 8px;\r\n  color: #333;\r\n`;\r\n\r\nconst ModalBody = styled.div`\r\n  font-size: 1rem;\r\n  color: #555;\r\n`;\r\n\r\n// Modal Component\r\nconst Modal = ({\r\n  isModalOpen,\r\n  closeModal,\r\n  title,\r\n  children,\r\n  animate = true,\r\n  rounded = true,\r\n  fullScreen = false,\r\n  width,\r\n  height,\r\n  maxWidth,\r\n  maxHeight,\r\n  showCloseButton = true,\r\n}) => {\r\n  useEffect(() => {\r\n    if (isModalOpen) {\r\n      document.body.style.overflow = \"hidden\";\r\n    } else {\r\n      document.body.style.overflow = \"\";\r\n    }\r\n    return () => {\r\n      document.body.style.overflow = \"\";\r\n    };\r\n  }, [isModalOpen]);\r\n\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.key === \"Escape\" && isModalOpen) {\r\n        closeModal();\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", handleEsc);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleEsc);\r\n    };\r\n  }, [isModalOpen, closeModal]);\r\n\r\n  if (!isModalOpen) return null;\r\n\r\n  return ReactDOM.createPortal(\r\n    <Overlay animate={animate} onClick={closeModal}>\r\n      <ModalContainer\r\n        animate={animate}\r\n        rounded={rounded}\r\n        fullScreen={fullScreen}\r\n        width={width}\r\n        height={height}\r\n        maxWidth={maxWidth}\r\n        maxHeight={maxHeight}\r\n        onClick={(e) => e.stopPropagation()}\r\n        aria-modal=\"true\"\r\n        role=\"dialog\"\r\n        aria-labelledby=\"modal-title\"\r\n      >\r\n        {showCloseButton && (\r\n          <CloseButton onClick={closeModal} aria-label=\"Close Modal\">\r\n            <MdClose />\r\n          </CloseButton>\r\n        )}\r\n        <ModalContent>\r\n          {title && <ModalTitle id=\"modal-title\">{title}</ModalTitle>}\r\n          <ModalBody>{children}</ModalBody>\r\n        </ModalContent>\r\n      </ModalContainer>\r\n    </Overlay>,\r\n    document.getElementById(\"modal-root\")\r\n  );\r\n};\r\n\r\nModal.propTypes = {\r\n  isModalOpen: PropTypes.bool.isRequired,\r\n  closeModal: PropTypes.func.isRequired,\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n  animate: PropTypes.bool,\r\n  rounded: PropTypes.bool,\r\n  fullScreen: PropTypes.bool,\r\n  width: PropTypes.string,\r\n  height: PropTypes.string,\r\n  maxWidth: PropTypes.string,\r\n  maxHeight: PropTypes.string,\r\n  showCloseButton: PropTypes.bool,\r\n};\r\n\r\nexport default Modal;\r\n"],"names":[],"sourceRoot":""}