{"version":3,"file":"stories-Lettz-components-LettzFilterDrawer-stories.601d9972.iframe.bundle.js","mappings":";;;;;AAcA;;;;;AAOA;;;;AAMA;;;;;;;;;;;;AAcA;;;;;;AAQA;AACA;AAIA;;;;;;;;;;ACtCA;;;;AAMA;;;;;;;AASA;;;;;;;;;;;AAaA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;;;;AASA;;AAEA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;AAgBA;;AAEA;;;;;;;;;;;;AAwBA;;;;;AC9GA;;;;AAMA;;;;AAMA;;;;;;;;;;;;AAcA;AACA;;;;;;AAMA;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;AC5EA;;;;;;;;;;AAYA;AAGA;AACA;AACA;AACA;;;;;;AAQA;;;AAGA;;;AAIA;;;;;;;AASA;AACA","sources":["webpack://storybook/./src/components/Lettz/components/LettzFilterDrawer.jsx","webpack://storybook/./src/components/atoms/inputs/CheckedItem.jsx","webpack://storybook/./src/components/atoms/inputs/RangeSlider.jsx","webpack://storybook/./src/components/atoms/inputs/SelectInput.jsx"],"sourcesContent":["// LettzFilterDrawer.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SelectInput from \"../../atoms/inputs/SelectInput\";\r\nimport CheckedItem from \"../../atoms/inputs/CheckedItem\";\r\nimport RangeSlider from \"../../atoms/inputs/RangeSlider\";\r\nimport { HomeIcon } from \"../../Branding/icons/Icons\";\r\n\r\n// Styled Components\r\nconst DrawerContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  padding-bottom: 64px; /* To ensure content doesn't overlap with the button bar */\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 28px; /* Add consistent spacing between inputs */\r\n  margin-bottom: 64px; /* To ensure content doesn't overlap with the button bar */\r\n`;\r\n\r\nconst CheckboxGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 16px;\r\n`;\r\n\r\nconst FixedButtonBar = styled.div`\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px;\r\n  background-color: #fff;\r\n  box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);\r\n  z-index: 10;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 8px 16px;\r\n  font-size: 18px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  background-color: ${(props) => (props.primary ? \"#A855F7\" : \"#e0e0e0\")};\r\n  color: ${(props) => (props.primary ? \"#fff\" : \"#333\")};\r\n`;\r\n\r\n// Constants for Months and Counties\r\nconst MONTHS = [\r\n  { value: \"jan\", label: \"Jan\" },\r\n  { value: \"feb\", label: \"Feb\" },\r\n  { value: \"mar\", label: \"Mar\" },\r\n  { value: \"apr\", label: \"Apr\" },\r\n  { value: \"may\", label: \"May\" },\r\n  { value: \"jun\", label: \"Jun\" },\r\n  { value: \"jul\", label: \"Jul\" },\r\n  { value: \"aug\", label: \"Aug\" },\r\n  { value: \"sep\", label: \"Sep\" },\r\n  { value: \"oct\", label: \"Oct\" },\r\n  { value: \"nov\", label: \"Nov\" },\r\n  { value: \"dec\", label: \"Dec\" },\r\n];\r\n\r\nconst COUNTIES = [\r\n  \"Carlow\",\r\n  \"Cavan\",\r\n  \"Clare\",\r\n  \"Cork\",\r\n  \"Derry\",\r\n  \"Donegal\",\r\n  \"Down\",\r\n  \"Dublin\",\r\n  \"Fermanagh\",\r\n  \"Galway\",\r\n  \"Kerry\",\r\n  \"Kildare\",\r\n  \"Kilkenny\",\r\n  \"Laois\",\r\n  \"Leitrim\",\r\n  \"Limerick\",\r\n  \"Longford\",\r\n  \"Louth\",\r\n  \"Mayo\",\r\n  \"Meath\",\r\n  \"Monaghan\",\r\n  \"Offaly\",\r\n  \"Roscommon\",\r\n  \"Sligo\",\r\n  \"Tipperary\",\r\n  \"Tyrone\",\r\n  \"Waterford\",\r\n  \"Westmeath\",\r\n  \"Wexford\",\r\n  \"Wicklow\",\r\n  // Add more counties if necessary\r\n];\r\n\r\nconst TYPE_OPTIONS = [\r\n  { value: \"house\", label: \"House\" },\r\n  { value: \"apartment\", label: \"Apartment\" },\r\n  { value: \"room\", label: \"Room\" },\r\n  // Add more types if necessary\r\n];\r\n\r\nconst LettzFilterDrawer = ({\r\n  selectedFilters,\r\n  onFilterChange,\r\n  closeDrawer,\r\n  sortOptions = [], // Default to an empty array\r\n  selectedSortOption,\r\n  onSortChange,\r\n}) => {\r\n  const [localFilters, setLocalFilters] = useState(selectedFilters || {});\r\n  const [localSortOption, setLocalSortOption] = useState(selectedSortOption || \"\");\r\n\r\n  // Update local state when selectedFilters prop changes\r\n  useEffect(() => {\r\n    setLocalFilters(selectedFilters || {});\r\n  }, [selectedFilters]);\r\n\r\n  // Update local sort option when selectedSortOption prop changes\r\n  useEffect(() => {\r\n    setLocalSortOption(selectedSortOption || \"\");\r\n  }, [selectedSortOption]);\r\n\r\n  const handleFilterChange = (key, value) => {\r\n    setLocalFilters((prevFilters) => ({\r\n      ...prevFilters,\r\n      [key]: value,\r\n    }));\r\n  };\r\n\r\n  const handleTypeChange = (type, isChecked) => {\r\n    setLocalFilters((prevFilters) => {\r\n      const currentTypes = prevFilters.type || [];\r\n      if (isChecked) {\r\n        // Add the type if it's not already in the array\r\n        if (!currentTypes.includes(type)) {\r\n          return {\r\n            ...prevFilters,\r\n            type: [...currentTypes, type],\r\n          };\r\n        }\r\n      } else {\r\n        // Remove the type from the array\r\n        return {\r\n          ...prevFilters,\r\n          type: currentTypes.filter((t) => t !== type),\r\n        };\r\n      }\r\n      return prevFilters;\r\n    });\r\n  };\r\n\r\n  const handleSortChangeLocal = (event) => {\r\n    setLocalSortOption(event.target.value);\r\n  };\r\n\r\n  const handleApply = () => {\r\n    onFilterChange(localFilters);\r\n    onSortChange(localSortOption);\r\n    closeDrawer();\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setLocalFilters({});\r\n    setLocalSortOption(\"\");\r\n    onFilterChange({});\r\n    onSortChange(\"\");\r\n    closeDrawer();\r\n  };\r\n\r\n  return (\r\n    <DrawerContainer>\r\n      <InputContainer>\r\n        {/* County Filter */}\r\n        <SelectInput\r\n          name=\"county\"\r\n          label=\"County\"\r\n          color=\"#A855F7\"\r\n          value={localFilters.county || \"\"}\r\n          onChange={(e) => handleFilterChange(\"county\", e.target.value)}\r\n          options={[\r\n            { value: \"\", label: \"Any County\" },\r\n            ...COUNTIES.map((county) => ({\r\n              value: county,\r\n              label: county,\r\n            })),\r\n          ]}\r\n        />\r\n\r\n        {/* Start and End Month Filters */}\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          {/* Start Month Filter */}\r\n          <SelectInput\r\n            name=\"startMonth\"\r\n            label=\"From\"\r\n            color=\"#A855F7\"\r\n            value={localFilters.startMonth || \"\"}\r\n            onChange={(e) => handleFilterChange(\"startMonth\", e.target.value)}\r\n            options={[\r\n              { value: \"\", label: \"Any\" },\r\n              ...MONTHS.map((month) => ({\r\n                value: month.value,\r\n                label: month.label,\r\n              })),\r\n            ]}\r\n          />\r\n\r\n          {/* End Month Filter */}\r\n          <SelectInput\r\n            name=\"endMonth\"\r\n            label=\"To\"\r\n            color=\"#A855F7\"\r\n            value={localFilters.endMonth || \"\"}\r\n            onChange={(e) => handleFilterChange(\"endMonth\", e.target.value)}\r\n            options={[\r\n              { value: \"\", label: \"Any\" },\r\n              ...MONTHS.map((month) => ({\r\n                value: month.value,\r\n                label: month.label,\r\n              })),\r\n            ]}\r\n          />\r\n        </div>\r\n\r\n        {/* Rent Range Filter */}\r\n        <div className=\"mx-8\">\r\n          <RangeSlider\r\n            min={0}\r\n            max={5000}\r\n            step={50}\r\n            minimumGap={100}\r\n            label=\"Rent\"\r\n            valuePrefix=\"â‚¬\"\r\n            value={localFilters.rentRange || [0, 5000]}\r\n            onChange={(range) => handleFilterChange(\"rentRange\", range)}\r\n          />\r\n        </div>\r\n\r\n        {/* Type Filter - Multi Select with Checkboxes */}\r\n        <CheckboxGroup>\r\n          {TYPE_OPTIONS.map((typeOption) => (\r\n            <CheckedItem\r\n              height=\"5rem\"\r\n              width=\"5rem\"\r\n              color=\"#A855F7\"\r\n              key={typeOption.value}\r\n              label={typeOption.label}\r\n              onChange={(e) => handleTypeChange(typeOption.value, e.target.checked)}\r\n              checked={localFilters.type && localFilters.type.includes(typeOption.value)}\r\n              svg={<HomeIcon className=\"w-6 h-6\" />}\r\n            />\r\n          ))}\r\n        </CheckboxGroup>\r\n\r\n        {/* Sort By */}\r\n        <SelectInput\r\n          name=\"sort\"\r\n          label=\"Sort By\"\r\n          color=\"#A855F7\"\r\n          value={localSortOption}\r\n          onChange={handleSortChangeLocal}\r\n          options={sortOptions}\r\n        />\r\n      </InputContainer>\r\n\r\n      <FixedButtonBar>\r\n        <Button onClick={handleClear}>Clear</Button>\r\n        <Button primary onClick={handleApply}>\r\n          Apply\r\n        </Button>\r\n      </FixedButtonBar>\r\n    </DrawerContainer>\r\n  );\r\n};\r\n\r\nexport default LettzFilterDrawer;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Styled Components\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 91.666667%; /* Equivalent to w-11/12 */\r\n  margin: 0 auto;\r\n  user-select: none;\r\n  gap: 1rem;\r\n  max-width: 500px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  color: #94a3b8; /* Equivalent to text-slate-400 */\r\n  position: relative;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst HiddenCheckbox = styled.input.attrs({ type: \"checkbox\" })`\r\n  height: 1px;\r\n  width: 1px;\r\n  opacity: 0;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  border: 3px solid #cbd5e1; /* Equivalent to border-slate-300 */\r\n  background-color: #ffffff; /* bg-white */\r\n  border-radius: 0.5rem; /* rounded-lg */\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* shadow-lg */\r\n  transition: all 0.2s ease-in-out;\r\n  width: ${({ width }) => width};\r\n  height: ${({ height }) => height};\r\n\r\n  /* Checked State */\r\n  ${HiddenCheckbox}:checked + & {\r\n    border-color: ${({ color }) => color || \"#3b82f6\"}; /* Default to blue-500 */\r\n    box-shadow: 0 4px 6px ${({ color }) => color}33; /* 10% opacity */\r\n    color: ${({ color }) => color || \"#3b82f6\"};\r\n\r\n    &::before {\r\n      content: 'âœ“';\r\n      position: absolute;\r\n      top: 0.25rem;\r\n      left: 0.25rem;\r\n      width: 1.25rem;\r\n      height: 1.25rem;\r\n      border: 3px solid ${({ color }) => color || \"#3b82f6\"};\r\n      border-radius: 50%;\r\n      background-color: ${({ color }) => color || \"#3b82f6\"};\r\n      opacity: 1;\r\n      transform: scale(1);\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      color: #ffffff;\r\n      font-size: 0.75rem;\r\n      transition: all 0.2s ease-in-out;\r\n    }\r\n  }\r\n\r\n  /* Hover State */\r\n  &:hover {\r\n    border-color: ${({ color }) => color || \"#3b82f6\"};\r\n\r\n    &::before {\r\n      transform: scale(1);\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  /* Pseudo-element before */\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 0.25rem;\r\n    left: 0.25rem;\r\n    width: 1.25rem;\r\n    height: 1.25rem;\r\n    border: 3px solid ${({ color }) => color || \"#3b82f6\"};\r\n    border-radius: 50%;\r\n    background-color: ${({ color }) => color || \"#3b82f6\"};\r\n    opacity: 0;\r\n    transform: scale(0);\r\n    transition: all 0.2s ease-in-out;\r\n  }\r\n\r\n  /* SVG and Label Text */\r\n  > span {\r\n    transition: all 0.2s ease-in-out;\r\n    text-align: center;\r\n    font-size: 0.875rem; /* Equivalent to text-sm */\r\n  }\r\n`;\r\n\r\n// Component\r\n\r\nconst CheckedItem = ({\r\n  label,\r\n  svg,\r\n  onChange,\r\n  checked,\r\n  height = \"7rem\",\r\n  width = \"7rem\",\r\n  color = \"#3b82f6\", // Default to blue-500\r\n}) => {\r\n  return (\r\n    <Container>\r\n      <Label>\r\n        <HiddenCheckbox onChange={onChange} checked={checked} />\r\n        <StyledSpan height={height} width={width} color={color}>\r\n          <span>{svg}</span>\r\n          <span>{label}</span>\r\n        </StyledSpan>\r\n      </Label>\r\n    </Container>\r\n  );\r\n};\r\n\r\n\r\nexport default CheckedItem;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SliderContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 16px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #333;\r\n`;\r\n\r\nconst RangeInputContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 50px;\r\n`;\r\n\r\nconst Track = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  height: 8px;\r\n  background: #e0e0e0;\r\n  border-radius: 5px;\r\n  width: 100%;\r\n\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    left: ${(props) => props.left}%;\r\n    right: ${(props) => 100 - props.right}%;\r\n    height: 100%;\r\n    background: #A855F7;\r\n    border-radius: 5px;\r\n    z-index: 1;\r\n  }\r\n`;\r\n\r\nconst ThumbValue = styled.div`\r\n  position: absolute;\r\n  top: -10px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #A855F7;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst Slider = styled.input`\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  width: 100%;\r\n  height: 8px;\r\n  background: transparent;\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  z-index: 3;\r\n  pointer-events: none;\r\n\r\n  &::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    width: 16px;\r\n    height: 16px;\r\n    background: #A855F7;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    pointer-events: auto;\r\n  }\r\n\r\n  &::-moz-range-thumb {\r\n    width: 14px;\r\n    height: 14px;\r\n    background: #007bff;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    pointer-events: auto;\r\n  }\r\n`;\r\n\r\nconst RangeSlider = ({\r\n  min = 0,\r\n  max = 100,\r\n  step = 1,\r\n  minimumGap = 10,\r\n  label = \"Range\",\r\n  valuePrefix = \"\",\r\n  valueSuffix = \"\",\r\n  onChange,\r\n}) => {\r\n  const [range, setRange] = useState([min, max]);\r\n\r\n  const handleMinChange = (e) => {\r\n    const newMin = Math.min(Number(e.target.value), range[1] - minimumGap);\r\n    const newRange = [newMin, range[1]];\r\n    setRange(newRange);\r\n    if (onChange) onChange(newRange);\r\n  };\r\n\r\n  const handleMaxChange = (e) => {\r\n    const newMax = Math.max(Number(e.target.value), range[0] + minimumGap);\r\n    const newRange = [range[0], newMax];\r\n    setRange(newRange);\r\n    if (onChange) onChange(newRange);\r\n  };\r\n\r\n  const calculatePercentage = (value) => ((value - min) / (max - min)) * 100;\r\n\r\n  return (\r\n    <SliderContainer>\r\n      <Label>{label}</Label>\r\n      <RangeInputContainer>\r\n        <ThumbValue\r\n          style={{\r\n            left: `calc(${calculatePercentage(range[0])}% - 14px)`,\r\n          }}\r\n        >\r\n          {valuePrefix}\r\n          {range[0]}\r\n          {valueSuffix}\r\n        </ThumbValue>\r\n        <ThumbValue\r\n          style={{\r\n            left: `calc(${calculatePercentage(range[1])}% - 14px)`,\r\n          }}\r\n        >\r\n          {valuePrefix}\r\n          {range[1]}\r\n          {valueSuffix}\r\n        </ThumbValue>\r\n        <Track\r\n          left={calculatePercentage(range[0])}\r\n          right={calculatePercentage(range[1])}\r\n        />\r\n        <Slider\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          step={step}\r\n          value={range[0]}\r\n          onChange={handleMinChange}\r\n        />\r\n        <Slider\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          step={step}\r\n          value={range[1]}\r\n          onChange={handleMaxChange}\r\n        />\r\n      </RangeInputContainer>\r\n    </SliderContainer>\r\n  );\r\n};\r\n\r\nexport default RangeSlider;\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { ChevronDownIcon } from '../../Branding/icons/Icons';\r\n\r\nconst SelectContainer = styled.div`\r\n  position: relative;\r\n  font-family: sans-serif;\r\n`;\r\n\r\nconst sharedSelectStyles = css`\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  border: 2px solid;\r\n  background: transparent;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  appearance: none;\r\n  transition: border-color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n  ${sharedSelectStyles}\r\n  border-color: ${({ isFocused, color }) => (isFocused ? color : '#D1D5DB')};\r\n  color: ${({ value }) => (value ? '#000' : '#6B7280')}; /* Default placeholder style */\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  position: absolute;\r\n  left: 0;\r\n  margin: 0.25rem;\r\n  padding: 0.25rem;\r\n  background: white;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n  font-size: 1rem;\r\n  pointer-events: none;\r\n  transform: ${({ hasValue, isFocused }) =>\r\n    hasValue || isFocused ? 'translate(1.25rem, -70%) scale(0.9)' : 'translate(0.625rem, 0)'};\r\n  transform-origin: left top;\r\n  transition: transform 0.3s ease-in-out, color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledArrow = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 0.75rem;\r\n  transform: translateY(-50%);\r\n  pointer-events: none;\r\n  font-size: 1rem;\r\n  color: ${({ isFocused, color }) => (isFocused ? color : '#6B7280')};\r\n`;\r\n\r\nconst SelectInput = ({ name, value, onChange, color = '#000', label, options = [] }) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const handleFocus = () => setIsFocused(true);\r\n  const handleBlur = () => setIsFocused(false);\r\n\r\n  return (\r\n    <SelectContainer>\r\n      <StyledSelect\r\n        name={name}\r\n        id={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        isFocused={isFocused}\r\n        color={color}\r\n      >\r\n        <option value=\"\" disabled>\r\n        </option>\r\n        {options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </StyledSelect>\r\n      <StyledLabel\r\n        htmlFor={name}\r\n        isFocused={isFocused}\r\n        color={color}\r\n        hasValue={Boolean(value)}\r\n      >\r\n        {label}\r\n      </StyledLabel>\r\n      <StyledArrow isFocused={isFocused} color={color}>\r\n        <ChevronDownIcon className='w-4 h-4'/>\r\n      </StyledArrow>\r\n    </SelectContainer>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n"],"names":[],"sourceRoot":""}