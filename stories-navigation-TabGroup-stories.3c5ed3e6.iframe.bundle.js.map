{"version":3,"file":"stories-navigation-TabGroup-stories.3c5ed3e6.iframe.bundle.js","mappings":";;;;;AASA;;;;;;;;AAUA;;AAEA;;;;;AAOA","sources":["webpack://storybook/./src/components/navigation/TabGroup.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  width: 100%;\r\n  border-bottom: 1px solid #ccc;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  flex: 1;\r\n  padding: 1rem;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background: transparent;\r\n  font-size: 1rem;\r\n  color: ${({ isActive, activeColor }) => (isActive ? activeColor : 'inherit')};\r\n\r\n`;\r\n\r\nconst Underline = styled.div`\r\n  position: absolute;\r\n  bottom: 0;\r\n  height: 2px;\r\n  transition: transform 0.3s ease, width 0.3s ease;\r\n`;\r\n\r\nconst TabGroup = ({ tabs, activeColor, activeIndex: controlledIndex, onTabChange }) => {\r\n  const isControlled = controlledIndex !== undefined && typeof onTabChange === 'function';\r\n  const [internalIndex, setInternalIndex] = useState(0);\r\n  const activeIndex = isControlled ? controlledIndex : internalIndex;\r\n\r\n  const tabContainerRef = useRef(null);\r\n  const [underlineStyle, setUnderlineStyle] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (tabContainerRef.current) {\r\n      const containerWidth = tabContainerRef.current.offsetWidth;\r\n      const tabWidth = containerWidth / tabs.length;\r\n      setUnderlineStyle({\r\n        width: `${tabWidth}px`,\r\n        transform: `translateX(${activeIndex * tabWidth}px)`,\r\n      });\r\n    }\r\n  }, [activeIndex, tabs.length]);\r\n\r\n  const handleTabClick = (index) => {\r\n    if (isControlled) {\r\n      onTabChange(index);\r\n    } else {\r\n      setInternalIndex(index);\r\n      if (onTabChange) {\r\n        onTabChange(index);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container ref={tabContainerRef}>\r\n      {tabs.map((tabName, index) => (\r\n        <Button\r\n          key={tabName}\r\n          isActive={activeIndex === index}\r\n          activeColor={activeColor}\r\n          onClick={() => handleTabClick(index)}\r\n        >\r\n          {tabName}\r\n        </Button>\r\n      ))}\r\n      <Underline style={{ ...underlineStyle, backgroundColor: activeColor }} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nTabGroup.propTypes = {\r\n  tabs: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  activeColor: PropTypes.string,\r\n  activeIndex: PropTypes.number,\r\n  onTabChange: PropTypes.func,\r\n};\r\n\r\nTabGroup.defaultProps = {\r\n  activeColor: '#007bff',\r\n  activeIndex: undefined,\r\n  onTabChange: undefined,\r\n};\r\n\r\nexport default TabGroup;\r\n"],"names":[],"sourceRoot":""}