"use strict";(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[8452],{"./src/stories/molecules/search/SearchSort.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithInitialSort:()=>WithInitialSort,__namedExportsOrder:()=>__namedExportsOrder,default:()=>SearchSort_stories});var react=__webpack_require__("./node_modules/react/index.js"),Icons=__webpack_require__("./src/components/Branding/icons/Icons.jsx");const search_SearchSort=_ref=>{let{attributes,onSortChange}=_ref;return react.createElement("div",{className:"flex items-center space-x-2 p-4"},react.createElement(Icons.SortIcon,{className:"w-5 h-5 text-gray-500"}),react.createElement("select",{onChange:e=>{onSortChange(e.target.value)},className:"ml-2 rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"},react.createElement("option",{value:""},"None"),attributes.map((attr=>react.createElement(react.Fragment,{key:attr},react.createElement("option",{value:`${attr}:asc`},`${attr.charAt(0).toUpperCase()+attr.slice(1)} (Asc)`),react.createElement("option",{value:`${attr}:desc`},`${attr.charAt(0).toUpperCase()+attr.slice(1)} (Desc)`))))))};function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const SearchSort_stories={title:"Molecules/Search/SearchSort",component:search_SearchSort,parameters:{docs:{description:{component:"\nThe `SearchSort` component provides a user interface for sorting search results based on various attributes. Users can select from multiple sorting options, which can be configured as needed for different applications.\n\n### Features\n- **Dynamic Sort Options**: Accepts an array of attributes to provide flexible sorting options.\n- **Initial Sort Option**: Supports setting an initial sort order.\n- **Callback on Sort Change**: Invokes a callback when the selected sort option changes, allowing for dynamic sorting behavior.\n\n### Usage\n\n```jsx\nimport React, { useState } from 'react';\nimport SearchSort from './components/search/SearchSort';\n\nconst ExampleComponent = () => {\n  const [sortOption, setSortOption] = useState('');\n\n  const handleSortChange = (sortValue) => {\n    setSortOption(sortValue);\n    console.log(`Selected sort option: ${sortValue}`);\n  };\n\n  return (\n    <SearchSort\n      attributes={['price', 'date', 'rating']}\n      onSortChange={handleSortChange}\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n        "}}}},Template=args=>{const[sortOption,setSortOption]=(0,react.useState)("");return react.createElement(search_SearchSort,_extends({},args,{onSortChange:sortValue=>{setSortOption(sortValue)}}))},Default=Template.bind({});Default.args={attributes:["price","date","rating"]};const WithInitialSort=Template.bind({});WithInitialSort.args={attributes:["price","date","rating"],initialSort:"price:asc"};const __namedExportsOrder=["Default","WithInitialSort"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  const [sortOption, setSortOption] = useState('');\n  const handleSortChange = sortValue => {\n    setSortOption(sortValue);\n  };\n  return <SearchSort {...args} onSortChange={handleSortChange} />;\n}",...Default.parameters?.docs?.source}}},WithInitialSort.parameters={...WithInitialSort.parameters,docs:{...WithInitialSort.parameters?.docs,source:{originalSource:"args => {\n  const [sortOption, setSortOption] = useState('');\n  const handleSortChange = sortValue => {\n    setSortOption(sortValue);\n  };\n  return <SearchSort {...args} onSortChange={handleSortChange} />;\n}",...WithInitialSort.parameters?.docs?.source}}}}}]);