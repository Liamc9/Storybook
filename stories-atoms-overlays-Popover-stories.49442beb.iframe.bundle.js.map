{"version":3,"file":"stories-atoms-overlays-Popover-stories.49442beb.iframe.bundle.js","mappings":";;;AAMA;;;;AAMA;;;;;;;;;;;AAaA;;;;;AAQA;;;;;AAOA;;;;;AAOA;;;;;AAQA;AAGA;;AC5CA;;;;;;;AASA;;AAIA","sources":["webpack://storybook/./src/components/atoms/overlays/popovers/Popover.jsx","webpack://storybook/./src/stories/atoms/overlays/Popover.stories.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst PopoverContainer = styled.div`\r\n  position: relative;\r\n  display: inline-block;\r\n`;\r\n\r\nconst TriggerWrapper = styled.div`\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  position: absolute;\r\n  background-color: white;\r\n  border-radius: 0.375rem; /* similar to Tailwind's rounded-md */\r\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),\r\n    0 4px 6px -4px rgba(0, 0, 0, 0.1);\r\n  padding: 0.5rem 0;\r\n  width: 12rem; /* ~192px */\r\n  z-index: 50;\r\n  white-space: normal;\r\n\r\n  ${({ placement }) => {\r\n    switch (placement) {\r\n      case 'top':\r\n        return css`\r\n          bottom: 100%;\r\n          left: 50%;\r\n          transform: translateX(-50%) translateY(-8px);\r\n          margin-bottom: 8px;\r\n        `;\r\n      case 'left':\r\n        return css`\r\n          right: 100%;\r\n          top: 50%;\r\n          transform: translateX(-8px) translateY(-50%);\r\n          margin-right: 8px;\r\n        `;\r\n      case 'right':\r\n        return css`\r\n          left: 100%;\r\n          top: 50%;\r\n          transform: translateX(8px) translateY(-50%);\r\n          margin-left: 8px;\r\n        `;\r\n      case 'bottom':\r\n      default:\r\n        return css`\r\n          top: 100%;\r\n          left: 50%;\r\n          transform: translateX(-50%) translateY(8px);\r\n          margin-top: 8px;\r\n        `;\r\n    }\r\n  }}\r\n`;\r\n\r\nconst Popover = ({\r\n  trigger,\r\n  children,\r\n  placement = 'bottom',\r\n  onOpen,\r\n  onClose,\r\n  ...props\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const popoverRef = useRef();\r\n  const triggerRef = useRef();\r\n\r\n  const handleTogglePopover = () => {\r\n    setIsOpen((prev) => {\r\n      const newState = !prev;\r\n      if (newState && onOpen) onOpen();\r\n      if (!newState && onClose) onClose();\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (\r\n        popoverRef.current &&\r\n        !popoverRef.current.contains(event.target) &&\r\n        triggerRef.current &&\r\n        !triggerRef.current.contains(event.target)\r\n      ) {\r\n        setIsOpen(false);\r\n        if (onClose) onClose();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () =>\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n  }, [onClose]);\r\n\r\n  return (\r\n    <PopoverContainer {...props}>\r\n      <TriggerWrapper ref={triggerRef} onClick={handleTogglePopover}>\r\n        {trigger}\r\n      </TriggerWrapper>\r\n      {isOpen && (\r\n        <Content ref={popoverRef} placement={placement}>\r\n          {children}\r\n        </Content>\r\n      )}\r\n    </PopoverContainer>\r\n  );\r\n};\r\n\r\nexport default Popover;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Popover from '../../../components/atoms/overlays/popovers/Popover';\r\n\r\nexport default {\r\n  title: 'Atoms/Overlays/Popovers',\r\n  component: Popover,\r\n  tags: ['autodocs'],\r\n};\r\n\r\nconst Container = styled.div`\r\n  padding: 100px;\r\n`;\r\n\r\nconst TriggerButton = styled.button`\r\n  padding: 0.5rem 1rem;\r\n  background-color: #3b82f6; /* Equivalent to Tailwind's bg-blue-500 */\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  padding: 16px;\r\n`;\r\n\r\nexport const XPopover = () => (\r\n  <Container>\r\n    <Popover trigger={<TriggerButton>Click Me</TriggerButton>}>\r\n      <ContentWrapper>\r\n        <p>This is the popover content.</p>\r\n      </ContentWrapper>\r\n    </Popover>\r\n  </Container>\r\n);\r\n"],"names":[],"sourceRoot":""}